************* Module solution0
solution0.py:10:136: C0303: Trailing whitespace (trailing-whitespace)
solution0.py:10:0: C0301: Line too long (136/100) (line-too-long)
solution0.py:12:0: C0301: Line too long (169/100) (line-too-long)
solution0.py:16:0: C0301: Line too long (385/100) (line-too-long)
solution0.py:31:0: C0301: Line too long (232/100) (line-too-long)
solution0.py:33:24: C0303: Trailing whitespace (trailing-whitespace)
solution0.py:35:0: C0303: Trailing whitespace (trailing-whitespace)
solution0.py:37:237: C0303: Trailing whitespace (trailing-whitespace)
solution0.py:37:0: C0301: Line too long (237/100) (line-too-long)
solution0.py:41:0: W0311: Bad indentation. Found 7 spaces, expected 8 (bad-indentation)
solution0.py:44:0: C0303: Trailing whitespace (trailing-whitespace)
solution0.py:49:25: C0303: Trailing whitespace (trailing-whitespace)
solution0.py:53:25: C0303: Trailing whitespace (trailing-whitespace)
solution0.py:58:0: C0301: Line too long (142/100) (line-too-long)
solution0.py:59:0: C0301: Line too long (181/100) (line-too-long)
solution0.py:60:0: C0301: Line too long (168/100) (line-too-long)
solution0.py:62:0: C0301: Line too long (248/100) (line-too-long)
solution0.py:78:51: C0303: Trailing whitespace (trailing-whitespace)
solution0.py:88:18: C0303: Trailing whitespace (trailing-whitespace)
solution0.py:89:0: C0303: Trailing whitespace (trailing-whitespace)
solution0.py:101:0: C0303: Trailing whitespace (trailing-whitespace)
solution0.py:103:0: C0301: Line too long (237/100) (line-too-long)
solution0.py:105:49: C0303: Trailing whitespace (trailing-whitespace)
solution0.py:114:0: W0311: Bad indentation. Found 11 spaces, expected 12 (bad-indentation)
solution0.py:116:20: C0303: Trailing whitespace (trailing-whitespace)
solution0.py:116:0: W0311: Bad indentation. Found 11 spaces, expected 12 (bad-indentation)
solution0.py:143:0: C0301: Line too long (137/100) (line-too-long)
solution0.py:192:129: C0303: Trailing whitespace (trailing-whitespace)
solution0.py:196:214: C0303: Trailing whitespace (trailing-whitespace)
solution0.py:192:0: C0301: Line too long (129/100) (line-too-long)
solution0.py:194:0: C0301: Line too long (151/100) (line-too-long)
solution0.py:196:0: C0301: Line too long (214/100) (line-too-long)
solution0.py:231:17: C0303: Trailing whitespace (trailing-whitespace)
solution0.py:238:0: C0304: Final newline missing (missing-final-newline)
solution0.py:7:0: W0105: String statement has no effect (pointless-string-statement)
solution0.py:20:0: C0103: Argument name "n" doesn't conform to snake_case naming style (invalid-name)
solution0.py:20:0: C0116: Missing function or method docstring (missing-function-docstring)
solution0.py:20:10: W0613: Unused argument 'val' (unused-argument)
solution0.py:20:15: W0613: Unused argument 'n' (unused-argument)
solution0.py:25:0: C0103: Argument name "n" doesn't conform to snake_case naming style (invalid-name)
solution0.py:25:0: C0116: Missing function or method docstring (missing-function-docstring)
solution0.py:30:0: C0103: Argument name "n" doesn't conform to snake_case naming style (invalid-name)
solution0.py:30:0: C0116: Missing function or method docstring (missing-function-docstring)
solution0.py:31:4: C0103: Variable name "d" doesn't conform to snake_case naming style (invalid-name)
solution0.py:36:0: C0103: Argument name "n" doesn't conform to snake_case naming style (invalid-name)
solution0.py:36:0: C0116: Missing function or method docstring (missing-function-docstring)
solution0.py:37:4: C0103: Variable name "d" doesn't conform to snake_case naming style (invalid-name)
solution0.py:39:4: C0103: Variable name "s" doesn't conform to snake_case naming style (invalid-name)
solution0.py:40:8: C0103: Variable name "e" doesn't conform to snake_case naming style (invalid-name)
solution0.py:41:7: C0103: Variable name "s" doesn't conform to snake_case naming style (invalid-name)
solution0.py:52:0: W0105: String statement has no effect (pointless-string-statement)
solution0.py:57:0: W0105: String statement has no effect (pointless-string-statement)
solution0.py:66:0: C0103: Constant name "size" doesn't conform to UPPER_CASE naming style (invalid-name)
solution0.py:67:0: C0103: Constant name "table" doesn't conform to UPPER_CASE naming style (invalid-name)
solution0.py:68:0: C0103: Constant name "collision" doesn't conform to UPPER_CASE naming style (invalid-name)
solution0.py:70:0: C0116: Missing function or method docstring (missing-function-docstring)
solution0.py:71:4: W0603: Using the global statement (global-statement)
solution0.py:71:4: C0103: Constant name "size" doesn't conform to UPPER_CASE naming style (invalid-name)
solution0.py:71:4: C0103: Constant name "table" doesn't conform to UPPER_CASE naming style (invalid-name)
solution0.py:71:4: C0103: Constant name "collision" doesn't conform to UPPER_CASE naming style (invalid-name)
solution0.py:76:0: C0116: Missing function or method docstring (missing-function-docstring)
solution0.py:83:4: W0603: Using the global statement (global-statement)
solution0.py:83:4: C0103: Constant name "collision" doesn't conform to UPPER_CASE naming style (invalid-name)
solution0.py:90:0: C0116: Missing function or method docstring (missing-function-docstring)
solution0.py:96:8: C0103: Variable name "e" doesn't conform to snake_case naming style (invalid-name)
solution0.py:102:0: C0116: Missing function or method docstring (missing-function-docstring)
solution0.py:103:4: C0103: Variable name "d" doesn't conform to snake_case naming style (invalid-name)
solution0.py:110:4: W0603: Using the global statement (global-statement)
solution0.py:110:4: C0103: Constant name "size" doesn't conform to UPPER_CASE naming style (invalid-name)
solution0.py:111:4: C0103: Variable name "s" doesn't conform to snake_case naming style (invalid-name)
solution0.py:112:8: C0103: Variable name "e" doesn't conform to snake_case naming style (invalid-name)
solution0.py:115:8: W0702: No exception type(s) specified (bare-except)
solution0.py:114:11: C0103: Variable name "s" doesn't conform to snake_case naming style (invalid-name)
solution0.py:116:11: C0103: Variable name "s" doesn't conform to snake_case naming style (invalid-name)
solution0.py:140:0: W0105: String statement has no effect (pointless-string-statement)
solution0.py:162:0: C0103: Argument name "li" doesn't conform to snake_case naming style (invalid-name)
solution0.py:162:0: C0116: Missing function or method docstring (missing-function-docstring)
solution0.py:166:4: C0103: Variable name "d" doesn't conform to snake_case naming style (invalid-name)
solution0.py:167:8: C0103: Variable name "e" doesn't conform to snake_case naming style (invalid-name)
solution0.py:168:8: R1705: Unnecessary "else" after "return" (no-else-return)
solution0.py:178:0: C0103: Constant name "b" doesn't conform to UPPER_CASE naming style (invalid-name)
solution0.py:180:0: C0103: Constant name "b" doesn't conform to UPPER_CASE naming style (invalid-name)
solution0.py:182:0: C0103: Constant name "b" doesn't conform to UPPER_CASE naming style (invalid-name)
solution0.py:186:0: W0105: String statement has no effect (pointless-string-statement)
solution0.py:191:0: W0105: String statement has no effect (pointless-string-statement)
solution0.py:217:0: C0103: Argument name "li" doesn't conform to snake_case naming style (invalid-name)
solution0.py:217:0: C0116: Missing function or method docstring (missing-function-docstring)
solution0.py:222:4: C0200: Consider using enumerate instead of iterating with range and len (consider-using-enumerate)
solution0.py:223:8: C0103: Variable name "v" doesn't conform to snake_case naming style (invalid-name)
solution0.py:224:8: R1705: Unnecessary "else" after "return" (no-else-return)
************* Module solution1
solution1.py:10:136: C0303: Trailing whitespace (trailing-whitespace)
solution1.py:10:0: C0301: Line too long (136/100) (line-too-long)
solution1.py:12:0: C0301: Line too long (169/100) (line-too-long)
solution1.py:16:0: C0301: Line too long (385/100) (line-too-long)
solution1.py:27:0: C0301: Line too long (232/100) (line-too-long)
solution1.py:29:0: C0303: Trailing whitespace (trailing-whitespace)
solution1.py:31:237: C0303: Trailing whitespace (trailing-whitespace)
solution1.py:31:0: C0301: Line too long (237/100) (line-too-long)
solution1.py:37:0: C0303: Trailing whitespace (trailing-whitespace)
solution1.py:42:25: C0303: Trailing whitespace (trailing-whitespace)
solution1.py:46:25: C0303: Trailing whitespace (trailing-whitespace)
solution1.py:51:0: C0301: Line too long (142/100) (line-too-long)
solution1.py:52:0: C0301: Line too long (181/100) (line-too-long)
solution1.py:53:0: C0301: Line too long (168/100) (line-too-long)
solution1.py:55:0: C0301: Line too long (248/100) (line-too-long)
solution1.py:71:51: C0303: Trailing whitespace (trailing-whitespace)
solution1.py:80:0: C0303: Trailing whitespace (trailing-whitespace)
solution1.py:89:0: C0303: Trailing whitespace (trailing-whitespace)
solution1.py:91:0: C0301: Line too long (237/100) (line-too-long)
solution1.py:93:49: C0303: Trailing whitespace (trailing-whitespace)
solution1.py:126:0: C0301: Line too long (137/100) (line-too-long)
solution1.py:173:129: C0303: Trailing whitespace (trailing-whitespace)
solution1.py:177:214: C0303: Trailing whitespace (trailing-whitespace)
solution1.py:173:0: C0301: Line too long (129/100) (line-too-long)
solution1.py:175:0: C0301: Line too long (151/100) (line-too-long)
solution1.py:177:0: C0301: Line too long (214/100) (line-too-long)
solution1.py:203:0: C0325: Unnecessary parens after 'if' keyword (superfluous-parens)
solution1.py:207:17: C0303: Trailing whitespace (trailing-whitespace)
solution1.py:214:0: C0304: Final newline missing (missing-final-newline)
solution1.py:7:0: W0105: String statement has no effect (pointless-string-statement)
solution1.py:20:0: C0103: Argument name "n" doesn't conform to snake_case naming style (invalid-name)
solution1.py:20:0: C0116: Missing function or method docstring (missing-function-docstring)
solution1.py:20:10: W0613: Unused argument 'val' (unused-argument)
solution1.py:20:15: W0613: Unused argument 'n' (unused-argument)
solution1.py:23:0: C0103: Argument name "n" doesn't conform to snake_case naming style (invalid-name)
solution1.py:23:0: C0116: Missing function or method docstring (missing-function-docstring)
solution1.py:23:15: W0613: Unused argument 'n' (unused-argument)
solution1.py:26:0: C0103: Argument name "n" doesn't conform to snake_case naming style (invalid-name)
solution1.py:26:0: C0116: Missing function or method docstring (missing-function-docstring)
solution1.py:27:4: C0103: Variable name "d" doesn't conform to snake_case naming style (invalid-name)
solution1.py:26:15: W0613: Unused argument 'n' (unused-argument)
solution1.py:30:0: C0103: Argument name "n" doesn't conform to snake_case naming style (invalid-name)
solution1.py:30:0: C0116: Missing function or method docstring (missing-function-docstring)
solution1.py:31:4: C0103: Variable name "d" doesn't conform to snake_case naming style (invalid-name)
solution1.py:32:4: C0103: Variable name "s" doesn't conform to snake_case naming style (invalid-name)
solution1.py:33:8: C0103: Variable name "c" doesn't conform to snake_case naming style (invalid-name)
solution1.py:35:12: C0103: Variable name "s" doesn't conform to snake_case naming style (invalid-name)
solution1.py:45:0: W0105: String statement has no effect (pointless-string-statement)
solution1.py:50:0: W0105: String statement has no effect (pointless-string-statement)
solution1.py:59:0: C0103: Constant name "size" doesn't conform to UPPER_CASE naming style (invalid-name)
solution1.py:61:0: C0103: Constant name "collision" doesn't conform to UPPER_CASE naming style (invalid-name)
solution1.py:63:0: C0116: Missing function or method docstring (missing-function-docstring)
solution1.py:64:4: W0603: Using the global statement (global-statement)
solution1.py:64:4: C0103: Constant name "size" doesn't conform to UPPER_CASE naming style (invalid-name)
solution1.py:64:4: C0103: Constant name "table" doesn't conform to UPPER_CASE naming style (invalid-name)
solution1.py:64:4: C0103: Constant name "collision" doesn't conform to UPPER_CASE naming style (invalid-name)
solution1.py:69:0: C0116: Missing function or method docstring (missing-function-docstring)
solution1.py:75:4: W0603: Using the global statement (global-statement)
solution1.py:75:4: C0103: Constant name "collision" doesn't conform to UPPER_CASE naming style (invalid-name)
solution1.py:81:0: C0116: Missing function or method docstring (missing-function-docstring)
solution1.py:85:8: C0103: Variable name "li" doesn't conform to snake_case naming style (invalid-name)
solution1.py:90:0: C0116: Missing function or method docstring (missing-function-docstring)
solution1.py:91:4: C0103: Variable name "d" doesn't conform to snake_case naming style (invalid-name)
solution1.py:97:4: C0103: Variable name "s" doesn't conform to snake_case naming style (invalid-name)
solution1.py:98:8: C0103: Variable name "c" doesn't conform to snake_case naming style (invalid-name)
solution1.py:100:12: C0103: Variable name "s" doesn't conform to snake_case naming style (invalid-name)
solution1.py:123:0: W0105: String statement has no effect (pointless-string-statement)
solution1.py:145:0: C0103: Argument name "li" doesn't conform to snake_case naming style (invalid-name)
solution1.py:145:0: C0116: Missing function or method docstring (missing-function-docstring)
solution1.py:148:4: C0103: Variable name "d" doesn't conform to snake_case naming style (invalid-name)
solution1.py:159:0: C0103: Constant name "b" doesn't conform to UPPER_CASE naming style (invalid-name)
solution1.py:161:0: C0103: Constant name "b" doesn't conform to UPPER_CASE naming style (invalid-name)
solution1.py:163:0: C0103: Constant name "b" doesn't conform to UPPER_CASE naming style (invalid-name)
solution1.py:167:0: W0105: String statement has no effect (pointless-string-statement)
solution1.py:172:0: W0105: String statement has no effect (pointless-string-statement)
solution1.py:198:0: C0103: Argument name "li" doesn't conform to snake_case naming style (invalid-name)
solution1.py:198:0: C0116: Missing function or method docstring (missing-function-docstring)
solution1.py:201:4: C0103: Variable name "d" doesn't conform to snake_case naming style (invalid-name)
solution1.py:202:4: C0200: Consider using enumerate instead of iterating with range and len (consider-using-enumerate)
solution1.py:198:0: R1710: Either all return statements in a function should return an expression, or none of them should. (inconsistent-return-statements)
************* Module solution10
solution10.py:10:136: C0303: Trailing whitespace (trailing-whitespace)
solution10.py:10:0: C0301: Line too long (136/100) (line-too-long)
solution10.py:12:0: C0301: Line too long (169/100) (line-too-long)
solution10.py:16:0: C0301: Line too long (385/100) (line-too-long)
solution10.py:30:0: C0301: Line too long (232/100) (line-too-long)
solution10.py:36:0: C0303: Trailing whitespace (trailing-whitespace)
solution10.py:38:237: C0303: Trailing whitespace (trailing-whitespace)
solution10.py:38:0: C0301: Line too long (237/100) (line-too-long)
solution10.py:44:27: C0303: Trailing whitespace (trailing-whitespace)
solution10.py:46:0: C0303: Trailing whitespace (trailing-whitespace)
solution10.py:52:25: C0303: Trailing whitespace (trailing-whitespace)
solution10.py:57:25: C0303: Trailing whitespace (trailing-whitespace)
solution10.py:62:0: C0301: Line too long (142/100) (line-too-long)
solution10.py:63:0: C0301: Line too long (181/100) (line-too-long)
solution10.py:64:0: C0301: Line too long (168/100) (line-too-long)
solution10.py:66:0: C0301: Line too long (248/100) (line-too-long)
solution10.py:82:51: C0303: Trailing whitespace (trailing-whitespace)
solution10.py:89:0: C0303: Trailing whitespace (trailing-whitespace)
solution10.py:92:0: C0303: Trailing whitespace (trailing-whitespace)
solution10.py:102:0: C0303: Trailing whitespace (trailing-whitespace)
solution10.py:104:0: C0301: Line too long (237/100) (line-too-long)
solution10.py:106:49: C0303: Trailing whitespace (trailing-whitespace)
solution10.py:112:0: C0303: Trailing whitespace (trailing-whitespace)
solution10.py:117:19: C0303: Trailing whitespace (trailing-whitespace)
solution10.py:118:0: C0303: Trailing whitespace (trailing-whitespace)
solution10.py:120:0: C0303: Trailing whitespace (trailing-whitespace)
solution10.py:146:0: C0301: Line too long (137/100) (line-too-long)
solution10.py:171:27: C0303: Trailing whitespace (trailing-whitespace)
solution10.py:191:129: C0303: Trailing whitespace (trailing-whitespace)
solution10.py:195:214: C0303: Trailing whitespace (trailing-whitespace)
solution10.py:191:0: C0301: Line too long (129/100) (line-too-long)
solution10.py:193:0: C0301: Line too long (151/100) (line-too-long)
solution10.py:195:0: C0301: Line too long (214/100) (line-too-long)
solution10.py:223:0: C0303: Trailing whitespace (trailing-whitespace)
solution10.py:224:17: C0303: Trailing whitespace (trailing-whitespace)
solution10.py:231:0: C0304: Final newline missing (missing-final-newline)
solution10.py:7:0: W0105: String statement has no effect (pointless-string-statement)
solution10.py:20:0: C0103: Argument name "n" doesn't conform to snake_case naming style (invalid-name)
solution10.py:20:0: C0116: Missing function or method docstring (missing-function-docstring)
solution10.py:21:4: C0103: Variable name "h1" doesn't conform to snake_case naming style (invalid-name)
solution10.py:20:10: W0613: Unused argument 'val' (unused-argument)
solution10.py:20:15: W0613: Unused argument 'n' (unused-argument)
solution10.py:24:0: C0103: Argument name "n" doesn't conform to snake_case naming style (invalid-name)
solution10.py:24:0: C0116: Missing function or method docstring (missing-function-docstring)
solution10.py:26:4: C0103: Variable name "h2" doesn't conform to snake_case naming style (invalid-name)
solution10.py:24:15: W0613: Unused argument 'n' (unused-argument)
solution10.py:29:0: C0103: Argument name "n" doesn't conform to snake_case naming style (invalid-name)
solution10.py:29:0: C0116: Missing function or method docstring (missing-function-docstring)
solution10.py:30:4: C0103: Variable name "d" doesn't conform to snake_case naming style (invalid-name)
solution10.py:34:12: C0103: Variable name "h3" doesn't conform to snake_case naming style (invalid-name)
solution10.py:29:0: R1710: Either all return statements in a function should return an expression, or none of them should. (inconsistent-return-statements)
solution10.py:29:15: W0613: Unused argument 'n' (unused-argument)
solution10.py:37:0: C0103: Argument name "n" doesn't conform to snake_case naming style (invalid-name)
solution10.py:37:0: C0116: Missing function or method docstring (missing-function-docstring)
solution10.py:38:4: C0103: Variable name "d" doesn't conform to snake_case naming style (invalid-name)
solution10.py:40:4: C0103: Variable name "h4" doesn't conform to snake_case naming style (invalid-name)
solution10.py:44:16: C0103: Variable name "h4" doesn't conform to snake_case naming style (invalid-name)
solution10.py:56:0: W0105: String statement has no effect (pointless-string-statement)
solution10.py:61:0: W0105: String statement has no effect (pointless-string-statement)
solution10.py:70:0: C0103: Constant name "size" doesn't conform to UPPER_CASE naming style (invalid-name)
solution10.py:72:0: C0103: Constant name "collision" doesn't conform to UPPER_CASE naming style (invalid-name)
solution10.py:74:0: C0116: Missing function or method docstring (missing-function-docstring)
solution10.py:75:4: W0603: Using the global statement (global-statement)
solution10.py:75:4: C0103: Constant name "size" doesn't conform to UPPER_CASE naming style (invalid-name)
solution10.py:75:4: C0103: Constant name "table" doesn't conform to UPPER_CASE naming style (invalid-name)
solution10.py:75:4: C0103: Constant name "collision" doesn't conform to UPPER_CASE naming style (invalid-name)
solution10.py:80:0: C0116: Missing function or method docstring (missing-function-docstring)
solution10.py:87:4: W0603: Using the global statement (global-statement)
solution10.py:87:4: C0103: Constant name "collision" doesn't conform to UPPER_CASE naming style (invalid-name)
solution10.py:93:0: C0116: Missing function or method docstring (missing-function-docstring)
solution10.py:98:4: R1703: The if statement can be replaced with 'return bool(test)' (simplifiable-if-statement)
solution10.py:98:4: R1705: Unnecessary "else" after "return" (no-else-return)
solution10.py:103:0: C0116: Missing function or method docstring (missing-function-docstring)
solution10.py:104:4: C0103: Variable name "d" doesn't conform to snake_case naming style (invalid-name)
solution10.py:111:4: C0103: Variable name "h4" doesn't conform to snake_case naming style (invalid-name)
solution10.py:115:12: C0103: Variable name "h4" doesn't conform to snake_case naming style (invalid-name)
solution10.py:117:12: C0103: Variable name "h4" doesn't conform to snake_case naming style (invalid-name)
solution10.py:143:0: W0105: String statement has no effect (pointless-string-statement)
solution10.py:165:0: C0103: Argument name "li" doesn't conform to snake_case naming style (invalid-name)
solution10.py:165:0: C0116: Missing function or method docstring (missing-function-docstring)
solution10.py:168:4: C0200: Consider using enumerate instead of iterating with range and len (consider-using-enumerate)
solution10.py:168:8: C0103: Variable name "x" doesn't conform to snake_case naming style (invalid-name)
solution10.py:169:12: C0103: Variable name "y" doesn't conform to snake_case naming style (invalid-name)
solution10.py:177:0: C0103: Constant name "b" doesn't conform to UPPER_CASE naming style (invalid-name)
solution10.py:179:0: C0103: Constant name "b" doesn't conform to UPPER_CASE naming style (invalid-name)
solution10.py:181:0: C0103: Constant name "b" doesn't conform to UPPER_CASE naming style (invalid-name)
solution10.py:185:0: W0105: String statement has no effect (pointless-string-statement)
solution10.py:190:0: W0105: String statement has no effect (pointless-string-statement)
solution10.py:216:0: C0103: Argument name "li" doesn't conform to snake_case naming style (invalid-name)
solution10.py:216:0: C0116: Missing function or method docstring (missing-function-docstring)
solution10.py:219:4: C0200: Consider using enumerate instead of iterating with range and len (consider-using-enumerate)
solution10.py:219:8: C0103: Variable name "x" doesn't conform to snake_case naming style (invalid-name)
solution10.py:220:12: C0103: Variable name "y" doesn't conform to snake_case naming style (invalid-name)
solution10.py:216:0: R1710: Either all return statements in a function should return an expression, or none of them should. (inconsistent-return-statements)
************* Module solution11
solution11.py:16:0: C0301: Line too long (115/100) (line-too-long)
solution11.py:40:0: C0303: Trailing whitespace (trailing-whitespace)
solution11.py:45:0: C0303: Trailing whitespace (trailing-whitespace)
solution11.py:49:0: C0303: Trailing whitespace (trailing-whitespace)
solution11.py:54:0: C0303: Trailing whitespace (trailing-whitespace)
solution11.py:58:0: C0303: Trailing whitespace (trailing-whitespace)
solution11.py:61:0: C0303: Trailing whitespace (trailing-whitespace)
solution11.py:64:0: C0303: Trailing whitespace (trailing-whitespace)
solution11.py:77:0: C0303: Trailing whitespace (trailing-whitespace)
solution11.py:97:86: C0303: Trailing whitespace (trailing-whitespace)
solution11.py:98:74: C0303: Trailing whitespace (trailing-whitespace)
solution11.py:116:0: C0301: Line too long (157/100) (line-too-long)
solution11.py:202:23: C0303: Trailing whitespace (trailing-whitespace)
solution11.py:202:0: C0325: Unnecessary parens after 'if' keyword (superfluous-parens)
solution11.py:205:24: C0303: Trailing whitespace (trailing-whitespace)
solution11.py:220:30: C0303: Trailing whitespace (trailing-whitespace)
solution11.py:222:0: C0304: Final newline missing (missing-final-newline)
solution11.py:8:0: W0105: String statement has no effect (pointless-string-statement)
solution11.py:15:0: W0105: String statement has no effect (pointless-string-statement)
solution11.py:31:0: C0413: Import "import copy" should be placed at the top of the module (wrong-import-position)
solution11.py:35:0: C0116: Missing function or method docstring (missing-function-docstring)
solution11.py:41:0: C0116: Missing function or method docstring (missing-function-docstring)
solution11.py:55:0: C0116: Missing function or method docstring (missing-function-docstring)
solution11.py:55:0: R1710: Either all return statements in a function should return an expression, or none of them should. (inconsistent-return-statements)
solution11.py:62:0: C0116: Missing function or method docstring (missing-function-docstring)
solution11.py:65:0: C0116: Missing function or method docstring (missing-function-docstring)
solution11.py:78:0: C0116: Missing function or method docstring (missing-function-docstring)
solution11.py:102:0: C0103: Constant name "f" doesn't conform to UPPER_CASE naming style (invalid-name)
solution11.py:104:0: C0103: Constant name "f" doesn't conform to UPPER_CASE naming style (invalid-name)
solution11.py:108:0: W0105: String statement has no effect (pointless-string-statement)
solution11.py:115:0: W0105: String statement has no effect (pointless-string-statement)
solution11.py:130:0: W0404: Reimport 'copy' (imported line 31) (reimported)
solution11.py:130:0: C0413: Import "import copy" should be placed at the top of the module (wrong-import-position)
solution11.py:134:0: C0116: Missing function or method docstring (missing-function-docstring)
solution11.py:145:0: C0116: Missing function or method docstring (missing-function-docstring)
solution11.py:145:0: R1710: Either all return statements in a function should return an expression, or none of them should. (inconsistent-return-statements)
solution11.py:151:0: C0116: Missing function or method docstring (missing-function-docstring)
solution11.py:154:0: C0116: Missing function or method docstring (missing-function-docstring)
solution11.py:168:0: C0116: Missing function or method docstring (missing-function-docstring)
solution11.py:183:8: C0103: Variable name "n" doesn't conform to snake_case naming style (invalid-name)
solution11.py:195:12: C0103: Variable name "n" doesn't conform to snake_case naming style (invalid-name)
solution11.py:211:12: C0103: Variable name "n" doesn't conform to snake_case naming style (invalid-name)
************* Module solution12
solution12.py:10:136: C0303: Trailing whitespace (trailing-whitespace)
solution12.py:10:0: C0301: Line too long (136/100) (line-too-long)
solution12.py:12:0: C0301: Line too long (169/100) (line-too-long)
solution12.py:16:0: C0301: Line too long (385/100) (line-too-long)
solution12.py:22:0: C0303: Trailing whitespace (trailing-whitespace)
solution12.py:29:0: C0301: Line too long (232/100) (line-too-long)
solution12.py:31:0: C0303: Trailing whitespace (trailing-whitespace)
solution12.py:32:0: C0303: Trailing whitespace (trailing-whitespace)
solution12.py:34:237: C0303: Trailing whitespace (trailing-whitespace)
solution12.py:34:0: C0301: Line too long (237/100) (line-too-long)
solution12.py:35:0: C0303: Trailing whitespace (trailing-whitespace)
solution12.py:41:0: C0303: Trailing whitespace (trailing-whitespace)
solution12.py:42:0: C0303: Trailing whitespace (trailing-whitespace)
solution12.py:47:25: C0303: Trailing whitespace (trailing-whitespace)
solution12.py:51:25: C0303: Trailing whitespace (trailing-whitespace)
solution12.py:56:0: C0301: Line too long (142/100) (line-too-long)
solution12.py:57:0: C0301: Line too long (181/100) (line-too-long)
solution12.py:58:0: C0301: Line too long (168/100) (line-too-long)
solution12.py:60:0: C0301: Line too long (248/100) (line-too-long)
solution12.py:76:51: C0303: Trailing whitespace (trailing-whitespace)
solution12.py:80:0: C0303: Trailing whitespace (trailing-whitespace)
solution12.py:86:0: C0303: Trailing whitespace (trailing-whitespace)
solution12.py:87:0: C0303: Trailing whitespace (trailing-whitespace)
solution12.py:96:0: C0303: Trailing whitespace (trailing-whitespace)
solution12.py:98:0: C0301: Line too long (237/100) (line-too-long)
solution12.py:100:49: C0303: Trailing whitespace (trailing-whitespace)
solution12.py:103:28: C0303: Trailing whitespace (trailing-whitespace)
solution12.py:104:0: C0303: Trailing whitespace (trailing-whitespace)
solution12.py:121:0: C0303: Trailing whitespace (trailing-whitespace)
solution12.py:139:0: C0301: Line too long (137/100) (line-too-long)
solution12.py:161:0: C0303: Trailing whitespace (trailing-whitespace)
solution12.py:163:25: C0303: Trailing whitespace (trailing-whitespace)
solution12.py:165:0: C0303: Trailing whitespace (trailing-whitespace)
solution12.py:167:0: C0303: Trailing whitespace (trailing-whitespace)
solution12.py:185:129: C0303: Trailing whitespace (trailing-whitespace)
solution12.py:189:214: C0303: Trailing whitespace (trailing-whitespace)
solution12.py:185:0: C0301: Line too long (129/100) (line-too-long)
solution12.py:187:0: C0301: Line too long (151/100) (line-too-long)
solution12.py:189:0: C0301: Line too long (214/100) (line-too-long)
solution12.py:218:0: C0303: Trailing whitespace (trailing-whitespace)
solution12.py:219:17: C0303: Trailing whitespace (trailing-whitespace)
solution12.py:226:0: C0304: Final newline missing (missing-final-newline)
solution12.py:7:0: W0105: String statement has no effect (pointless-string-statement)
solution12.py:20:0: C0103: Argument name "n" doesn't conform to snake_case naming style (invalid-name)
solution12.py:20:0: C0116: Missing function or method docstring (missing-function-docstring)
solution12.py:20:10: W0613: Unused argument 'val' (unused-argument)
solution12.py:20:15: W0613: Unused argument 'n' (unused-argument)
solution12.py:24:0: C0103: Argument name "n" doesn't conform to snake_case naming style (invalid-name)
solution12.py:24:0: C0116: Missing function or method docstring (missing-function-docstring)
solution12.py:25:4: C0103: Variable name "a" doesn't conform to snake_case naming style (invalid-name)
solution12.py:24:15: W0613: Unused argument 'n' (unused-argument)
solution12.py:28:0: C0103: Argument name "n" doesn't conform to snake_case naming style (invalid-name)
solution12.py:28:0: C0116: Missing function or method docstring (missing-function-docstring)
solution12.py:29:4: C0103: Variable name "d" doesn't conform to snake_case naming style (invalid-name)
solution12.py:28:15: W0613: Unused argument 'n' (unused-argument)
solution12.py:33:0: C0103: Argument name "n" doesn't conform to snake_case naming style (invalid-name)
solution12.py:33:0: C0116: Missing function or method docstring (missing-function-docstring)
solution12.py:34:4: C0103: Variable name "d" doesn't conform to snake_case naming style (invalid-name)
solution12.py:37:4: C0200: Consider using enumerate instead of iterating with range and len (consider-using-enumerate)
solution12.py:33:15: W0613: Unused argument 'n' (unused-argument)
solution12.py:50:0: W0105: String statement has no effect (pointless-string-statement)
solution12.py:55:0: W0105: String statement has no effect (pointless-string-statement)
solution12.py:64:0: C0103: Constant name "size" doesn't conform to UPPER_CASE naming style (invalid-name)
solution12.py:66:0: C0103: Constant name "collision" doesn't conform to UPPER_CASE naming style (invalid-name)
solution12.py:68:0: C0116: Missing function or method docstring (missing-function-docstring)
solution12.py:69:4: W0603: Using the global statement (global-statement)
solution12.py:69:4: C0103: Constant name "size" doesn't conform to UPPER_CASE naming style (invalid-name)
solution12.py:69:4: C0103: Constant name "table" doesn't conform to UPPER_CASE naming style (invalid-name)
solution12.py:69:4: C0103: Constant name "collision" doesn't conform to UPPER_CASE naming style (invalid-name)
solution12.py:74:0: C0116: Missing function or method docstring (missing-function-docstring)
solution12.py:81:4: W0603: Using the global statement (global-statement)
solution12.py:81:4: C0103: Constant name "collision" doesn't conform to UPPER_CASE naming style (invalid-name)
solution12.py:82:4: C0103: Variable name "el" doesn't conform to snake_case naming style (invalid-name)
solution12.py:88:0: C0116: Missing function or method docstring (missing-function-docstring)
solution12.py:97:0: C0116: Missing function or method docstring (missing-function-docstring)
solution12.py:98:4: C0103: Variable name "d" doesn't conform to snake_case naming style (invalid-name)
solution12.py:106:4: C0200: Consider using enumerate instead of iterating with range and len (consider-using-enumerate)
solution12.py:109:8: W0702: No exception type(s) specified (bare-except)
solution12.py:136:0: W0105: String statement has no effect (pointless-string-statement)
solution12.py:158:0: C0103: Argument name "li" doesn't conform to snake_case naming style (invalid-name)
solution12.py:158:0: C0116: Missing function or method docstring (missing-function-docstring)
solution12.py:171:0: C0103: Constant name "b" doesn't conform to UPPER_CASE naming style (invalid-name)
solution12.py:173:0: C0103: Constant name "b" doesn't conform to UPPER_CASE naming style (invalid-name)
solution12.py:175:0: C0103: Constant name "b" doesn't conform to UPPER_CASE naming style (invalid-name)
solution12.py:179:0: W0105: String statement has no effect (pointless-string-statement)
solution12.py:184:0: W0105: String statement has no effect (pointless-string-statement)
solution12.py:210:0: C0103: Argument name "li" doesn't conform to snake_case naming style (invalid-name)
solution12.py:210:0: C0116: Missing function or method docstring (missing-function-docstring)
solution12.py:210:0: R1710: Either all return statements in a function should return an expression, or none of them should. (inconsistent-return-statements)
************* Module solution13
solution13.py:10:136: C0303: Trailing whitespace (trailing-whitespace)
solution13.py:10:0: C0301: Line too long (136/100) (line-too-long)
solution13.py:12:0: C0301: Line too long (169/100) (line-too-long)
solution13.py:16:0: C0301: Line too long (385/100) (line-too-long)
solution13.py:22:0: C0303: Trailing whitespace (trailing-whitespace)
solution13.py:23:0: C0325: Unnecessary parens after 'return' keyword (superfluous-parens)
solution13.py:28:0: C0325: Unnecessary parens after 'return' keyword (superfluous-parens)
solution13.py:29:0: C0303: Trailing whitespace (trailing-whitespace)
solution13.py:32:0: C0301: Line too long (232/100) (line-too-long)
solution13.py:33:0: C0303: Trailing whitespace (trailing-whitespace)
solution13.py:36:0: C0303: Trailing whitespace (trailing-whitespace)
solution13.py:38:237: C0303: Trailing whitespace (trailing-whitespace)
solution13.py:38:0: C0301: Line too long (237/100) (line-too-long)
solution13.py:43:0: C0303: Trailing whitespace (trailing-whitespace)
solution13.py:48:25: C0303: Trailing whitespace (trailing-whitespace)
solution13.py:52:25: C0303: Trailing whitespace (trailing-whitespace)
solution13.py:57:0: C0301: Line too long (142/100) (line-too-long)
solution13.py:58:0: C0301: Line too long (181/100) (line-too-long)
solution13.py:59:0: C0301: Line too long (168/100) (line-too-long)
solution13.py:61:0: C0301: Line too long (248/100) (line-too-long)
solution13.py:77:51: C0303: Trailing whitespace (trailing-whitespace)
solution13.py:83:0: C0303: Trailing whitespace (trailing-whitespace)
solution13.py:87:0: C0303: Trailing whitespace (trailing-whitespace)
solution13.py:88:0: C0303: Trailing whitespace (trailing-whitespace)
solution13.py:95:0: C0303: Trailing whitespace (trailing-whitespace)
solution13.py:96:23: C0303: Trailing whitespace (trailing-whitespace)
solution13.py:97:0: C0303: Trailing whitespace (trailing-whitespace)
solution13.py:99:0: C0303: Trailing whitespace (trailing-whitespace)
solution13.py:101:0: C0301: Line too long (237/100) (line-too-long)
solution13.py:103:49: C0303: Trailing whitespace (trailing-whitespace)
solution13.py:140:0: C0301: Line too long (137/100) (line-too-long)
solution13.py:160:0: C0303: Trailing whitespace (trailing-whitespace)
solution13.py:165:0: C0303: Trailing whitespace (trailing-whitespace)
solution13.py:184:129: C0303: Trailing whitespace (trailing-whitespace)
solution13.py:188:214: C0303: Trailing whitespace (trailing-whitespace)
solution13.py:184:0: C0301: Line too long (129/100) (line-too-long)
solution13.py:186:0: C0301: Line too long (151/100) (line-too-long)
solution13.py:188:0: C0301: Line too long (214/100) (line-too-long)
solution13.py:212:0: C0303: Trailing whitespace (trailing-whitespace)
solution13.py:213:0: C0303: Trailing whitespace (trailing-whitespace)
solution13.py:215:0: C0303: Trailing whitespace (trailing-whitespace)
solution13.py:216:0: C0303: Trailing whitespace (trailing-whitespace)
solution13.py:218:0: W0311: Bad indentation. Found 9 spaces, expected 8 (bad-indentation)
solution13.py:219:0: W0311: Bad indentation. Found 9 spaces, expected 8 (bad-indentation)
solution13.py:220:34: C0303: Trailing whitespace (trailing-whitespace)
solution13.py:220:0: W0311: Bad indentation. Found 13 spaces, expected 12 (bad-indentation)
solution13.py:221:0: W0311: Bad indentation. Found 13 spaces, expected 12 (bad-indentation)
solution13.py:222:0: W0311: Bad indentation. Found 9 spaces, expected 8 (bad-indentation)
solution13.py:224:0: C0303: Trailing whitespace (trailing-whitespace)
solution13.py:225:0: C0303: Trailing whitespace (trailing-whitespace)
solution13.py:229:0: C0303: Trailing whitespace (trailing-whitespace)
solution13.py:230:17: C0303: Trailing whitespace (trailing-whitespace)
solution13.py:7:0: W0105: String statement has no effect (pointless-string-statement)
solution13.py:20:0: C0103: Argument name "n" doesn't conform to snake_case naming style (invalid-name)
solution13.py:20:0: C0116: Missing function or method docstring (missing-function-docstring)
solution13.py:20:15: W0613: Unused argument 'n' (unused-argument)
solution13.py:26:0: C0103: Argument name "n" doesn't conform to snake_case naming style (invalid-name)
solution13.py:26:0: C0116: Missing function or method docstring (missing-function-docstring)
solution13.py:26:15: W0613: Unused argument 'n' (unused-argument)
solution13.py:31:0: C0103: Argument name "n" doesn't conform to snake_case naming style (invalid-name)
solution13.py:31:0: C0116: Missing function or method docstring (missing-function-docstring)
solution13.py:32:4: C0103: Variable name "d" doesn't conform to snake_case naming style (invalid-name)
solution13.py:31:15: W0613: Unused argument 'n' (unused-argument)
solution13.py:37:0: C0103: Argument name "n" doesn't conform to snake_case naming style (invalid-name)
solution13.py:37:0: C0116: Missing function or method docstring (missing-function-docstring)
solution13.py:38:4: C0103: Variable name "d" doesn't conform to snake_case naming style (invalid-name)
solution13.py:39:4: C0103: Variable name "e" doesn't conform to snake_case naming style (invalid-name)
solution13.py:41:8: C0103: Variable name "e" doesn't conform to snake_case naming style (invalid-name)
solution13.py:51:0: W0105: String statement has no effect (pointless-string-statement)
solution13.py:56:0: W0105: String statement has no effect (pointless-string-statement)
solution13.py:65:0: C0103: Constant name "size" doesn't conform to UPPER_CASE naming style (invalid-name)
solution13.py:67:0: C0103: Constant name "collision" doesn't conform to UPPER_CASE naming style (invalid-name)
solution13.py:69:0: C0116: Missing function or method docstring (missing-function-docstring)
solution13.py:70:4: W0603: Using the global statement (global-statement)
solution13.py:70:4: C0103: Constant name "size" doesn't conform to UPPER_CASE naming style (invalid-name)
solution13.py:70:4: C0103: Constant name "table" doesn't conform to UPPER_CASE naming style (invalid-name)
solution13.py:70:4: C0103: Constant name "collision" doesn't conform to UPPER_CASE naming style (invalid-name)
solution13.py:75:0: C0116: Missing function or method docstring (missing-function-docstring)
solution13.py:81:4: W0603: Using the global statement (global-statement)
solution13.py:81:4: C0103: Constant name "table" doesn't conform to UPPER_CASE naming style (invalid-name)
solution13.py:81:4: C0103: Constant name "collision" doesn't conform to UPPER_CASE naming style (invalid-name)
solution13.py:89:0: C0116: Missing function or method docstring (missing-function-docstring)
solution13.py:93:8: C0103: Variable name "li" doesn't conform to snake_case naming style (invalid-name)
solution13.py:100:0: C0116: Missing function or method docstring (missing-function-docstring)
solution13.py:101:4: C0103: Variable name "d" doesn't conform to snake_case naming style (invalid-name)
solution13.py:107:4: C0103: Variable name "e" doesn't conform to snake_case naming style (invalid-name)
solution13.py:111:12: C0103: Variable name "e" doesn't conform to snake_case naming style (invalid-name)
solution13.py:137:0: W0105: String statement has no effect (pointless-string-statement)
solution13.py:159:0: C0103: Argument name "li" doesn't conform to snake_case naming style (invalid-name)
solution13.py:159:0: C0116: Missing function or method docstring (missing-function-docstring)
solution13.py:170:0: C0103: Constant name "b" doesn't conform to UPPER_CASE naming style (invalid-name)
solution13.py:172:0: C0103: Constant name "b" doesn't conform to UPPER_CASE naming style (invalid-name)
solution13.py:174:0: C0103: Constant name "b" doesn't conform to UPPER_CASE naming style (invalid-name)
solution13.py:178:0: W0105: String statement has no effect (pointless-string-statement)
solution13.py:183:0: W0105: String statement has no effect (pointless-string-statement)
solution13.py:209:0: C0103: Argument name "li" doesn't conform to snake_case naming style (invalid-name)
solution13.py:209:0: C0116: Missing function or method docstring (missing-function-docstring)
solution13.py:214:4: C0103: Variable name "d" doesn't conform to snake_case naming style (invalid-name)
solution13.py:217:4: C0200: Consider using enumerate instead of iterating with range and len (consider-using-enumerate)
solution13.py:218:9: C0103: Variable name "t1" doesn't conform to snake_case naming style (invalid-name)
solution13.py:219:9: R1705: Unnecessary "else" after "return" (no-else-return)
solution13.py:220:13: C0103: Variable name "t2" doesn't conform to snake_case naming style (invalid-name)
solution13.py:209:0: R1710: Either all return statements in a function should return an expression, or none of them should. (inconsistent-return-statements)
************* Module solution14
solution14.py:10:136: C0303: Trailing whitespace (trailing-whitespace)
solution14.py:10:0: C0301: Line too long (136/100) (line-too-long)
solution14.py:12:0: C0301: Line too long (169/100) (line-too-long)
solution14.py:16:0: C0301: Line too long (385/100) (line-too-long)
solution14.py:28:0: C0301: Line too long (232/100) (line-too-long)
solution14.py:31:0: C0303: Trailing whitespace (trailing-whitespace)
solution14.py:33:237: C0303: Trailing whitespace (trailing-whitespace)
solution14.py:33:0: C0301: Line too long (237/100) (line-too-long)
solution14.py:35:0: C0303: Trailing whitespace (trailing-whitespace)
solution14.py:40:0: C0303: Trailing whitespace (trailing-whitespace)
solution14.py:46:32: C0303: Trailing whitespace (trailing-whitespace)
solution14.py:50:25: C0303: Trailing whitespace (trailing-whitespace)
solution14.py:55:0: C0301: Line too long (142/100) (line-too-long)
solution14.py:56:0: C0301: Line too long (181/100) (line-too-long)
solution14.py:57:0: C0301: Line too long (168/100) (line-too-long)
solution14.py:59:0: C0301: Line too long (248/100) (line-too-long)
solution14.py:75:51: C0303: Trailing whitespace (trailing-whitespace)
solution14.py:79:20: C0303: Trailing whitespace (trailing-whitespace)
solution14.py:80:0: C0303: Trailing whitespace (trailing-whitespace)
solution14.py:85:0: C0303: Trailing whitespace (trailing-whitespace)
solution14.py:87:0: C0303: Trailing whitespace (trailing-whitespace)
solution14.py:88:0: C0303: Trailing whitespace (trailing-whitespace)
solution14.py:89:0: C0303: Trailing whitespace (trailing-whitespace)
solution14.py:95:0: C0303: Trailing whitespace (trailing-whitespace)
solution14.py:98:0: C0303: Trailing whitespace (trailing-whitespace)
solution14.py:100:0: C0303: Trailing whitespace (trailing-whitespace)
solution14.py:102:0: C0301: Line too long (237/100) (line-too-long)
solution14.py:104:49: C0303: Trailing whitespace (trailing-whitespace)
solution14.py:109:0: C0303: Trailing whitespace (trailing-whitespace)
solution14.py:113:0: C0303: Trailing whitespace (trailing-whitespace)
solution14.py:140:0: C0301: Line too long (137/100) (line-too-long)
solution14.py:162:0: W0311: Bad indentation. Found 8 spaces, expected 4 (bad-indentation)
solution14.py:163:0: W0311: Bad indentation. Found 12 spaces, expected 8 (bad-indentation)
solution14.py:164:0: W0311: Bad indentation. Found 8 spaces, expected 4 (bad-indentation)
solution14.py:165:0: W0311: Bad indentation. Found 12 spaces, expected 8 (bad-indentation)
solution14.py:166:0: C0303: Trailing whitespace (trailing-whitespace)
solution14.py:185:129: C0303: Trailing whitespace (trailing-whitespace)
solution14.py:189:214: C0303: Trailing whitespace (trailing-whitespace)
solution14.py:185:0: C0301: Line too long (129/100) (line-too-long)
solution14.py:187:0: C0301: Line too long (151/100) (line-too-long)
solution14.py:189:0: C0301: Line too long (214/100) (line-too-long)
solution14.py:213:0: C0303: Trailing whitespace (trailing-whitespace)
solution14.py:214:0: C0303: Trailing whitespace (trailing-whitespace)
solution14.py:216:0: W0311: Bad indentation. Found 12 spaces, expected 8 (bad-indentation)
solution14.py:217:0: W0311: Bad indentation. Found 16 spaces, expected 12 (bad-indentation)
solution14.py:218:32: C0303: Trailing whitespace (trailing-whitespace)
solution14.py:218:0: W0311: Bad indentation. Found 20 spaces, expected 16 (bad-indentation)
solution14.py:219:17: C0303: Trailing whitespace (trailing-whitespace)
solution14.py:7:0: W0105: String statement has no effect (pointless-string-statement)
solution14.py:20:0: C0103: Argument name "n" doesn't conform to snake_case naming style (invalid-name)
solution14.py:20:0: C0116: Missing function or method docstring (missing-function-docstring)
solution14.py:20:10: W0613: Unused argument 'val' (unused-argument)
solution14.py:20:15: W0613: Unused argument 'n' (unused-argument)
solution14.py:23:0: C0103: Argument name "n" doesn't conform to snake_case naming style (invalid-name)
solution14.py:23:0: C0116: Missing function or method docstring (missing-function-docstring)
solution14.py:23:15: W0613: Unused argument 'n' (unused-argument)
solution14.py:27:0: C0103: Argument name "n" doesn't conform to snake_case naming style (invalid-name)
solution14.py:27:0: C0116: Missing function or method docstring (missing-function-docstring)
solution14.py:28:4: C0103: Variable name "d" doesn't conform to snake_case naming style (invalid-name)
solution14.py:27:10: W0613: Unused argument 'val' (unused-argument)
solution14.py:27:15: W0613: Unused argument 'n' (unused-argument)
solution14.py:28:4: W0612: Unused variable 'd' (unused-variable)
solution14.py:32:0: C0103: Argument name "n" doesn't conform to snake_case naming style (invalid-name)
solution14.py:32:0: C0116: Missing function or method docstring (missing-function-docstring)
solution14.py:33:4: C0103: Variable name "d" doesn't conform to snake_case naming style (invalid-name)
solution14.py:32:15: W0613: Unused argument 'n' (unused-argument)
solution14.py:49:0: W0105: String statement has no effect (pointless-string-statement)
solution14.py:54:0: W0105: String statement has no effect (pointless-string-statement)
solution14.py:63:0: C0103: Constant name "size" doesn't conform to UPPER_CASE naming style (invalid-name)
solution14.py:65:0: C0103: Constant name "collision" doesn't conform to UPPER_CASE naming style (invalid-name)
solution14.py:67:0: C0116: Missing function or method docstring (missing-function-docstring)
solution14.py:68:4: W0603: Using the global statement (global-statement)
solution14.py:68:4: C0103: Constant name "size" doesn't conform to UPPER_CASE naming style (invalid-name)
solution14.py:68:4: C0103: Constant name "table" doesn't conform to UPPER_CASE naming style (invalid-name)
solution14.py:68:4: C0103: Constant name "collision" doesn't conform to UPPER_CASE naming style (invalid-name)
solution14.py:73:0: C0116: Missing function or method docstring (missing-function-docstring)
solution14.py:79:4: W0603: Using the global statement (global-statement)
solution14.py:79:4: C0103: Constant name "collision" doesn't conform to UPPER_CASE naming style (invalid-name)
solution14.py:81:4: C0103: Variable name "a" doesn't conform to snake_case naming style (invalid-name)
solution14.py:90:0: C0116: Missing function or method docstring (missing-function-docstring)
solution14.py:94:8: C0103: Variable name "li" doesn't conform to snake_case naming style (invalid-name)
solution14.py:101:0: C0116: Missing function or method docstring (missing-function-docstring)
solution14.py:102:4: C0103: Variable name "d" doesn't conform to snake_case naming style (invalid-name)
solution14.py:137:0: W0105: String statement has no effect (pointless-string-statement)
solution14.py:159:0: C0103: Argument name "li" doesn't conform to snake_case naming style (invalid-name)
solution14.py:159:0: C0116: Missing function or method docstring (missing-function-docstring)
solution14.py:162:8: R1703: The if statement can be replaced with 'return bool(test)' (simplifiable-if-statement)
solution14.py:162:8: R1705: Unnecessary "else" after "return" (no-else-return)
solution14.py:171:0: C0103: Constant name "b" doesn't conform to UPPER_CASE naming style (invalid-name)
solution14.py:173:0: C0103: Constant name "b" doesn't conform to UPPER_CASE naming style (invalid-name)
solution14.py:175:0: C0103: Constant name "b" doesn't conform to UPPER_CASE naming style (invalid-name)
solution14.py:179:0: W0105: String statement has no effect (pointless-string-statement)
solution14.py:184:0: W0105: String statement has no effect (pointless-string-statement)
solution14.py:210:0: C0103: Argument name "li" doesn't conform to snake_case naming style (invalid-name)
solution14.py:210:0: C0116: Missing function or method docstring (missing-function-docstring)
solution14.py:215:4: C0200: Consider using enumerate instead of iterating with range and len (consider-using-enumerate)
solution14.py:210:0: R1710: Either all return statements in a function should return an expression, or none of them should. (inconsistent-return-statements)
************* Module solution15
solution15.py:16:0: C0301: Line too long (115/100) (line-too-long)
solution15.py:40:0: C0303: Trailing whitespace (trailing-whitespace)
solution15.py:45:0: C0303: Trailing whitespace (trailing-whitespace)
solution15.py:49:0: C0303: Trailing whitespace (trailing-whitespace)
solution15.py:54:0: C0303: Trailing whitespace (trailing-whitespace)
solution15.py:58:0: C0303: Trailing whitespace (trailing-whitespace)
solution15.py:61:0: C0303: Trailing whitespace (trailing-whitespace)
solution15.py:64:0: C0303: Trailing whitespace (trailing-whitespace)
solution15.py:77:0: C0303: Trailing whitespace (trailing-whitespace)
solution15.py:89:0: C0303: Trailing whitespace (trailing-whitespace)
solution15.py:96:0: C0303: Trailing whitespace (trailing-whitespace)
solution15.py:100:86: C0303: Trailing whitespace (trailing-whitespace)
solution15.py:101:74: C0303: Trailing whitespace (trailing-whitespace)
solution15.py:119:0: C0301: Line too long (157/100) (line-too-long)
solution15.py:203:0: C0303: Trailing whitespace (trailing-whitespace)
solution15.py:208:0: C0303: Trailing whitespace (trailing-whitespace)
solution15.py:211:23: C0303: Trailing whitespace (trailing-whitespace)
solution15.py:211:0: C0325: Unnecessary parens after 'if' keyword (superfluous-parens)
solution15.py:214:24: C0303: Trailing whitespace (trailing-whitespace)
solution15.py:228:22: C0303: Trailing whitespace (trailing-whitespace)
solution15.py:229:0: C0304: Final newline missing (missing-final-newline)
solution15.py:8:0: W0105: String statement has no effect (pointless-string-statement)
solution15.py:15:0: W0105: String statement has no effect (pointless-string-statement)
solution15.py:31:0: C0413: Import "import copy" should be placed at the top of the module (wrong-import-position)
solution15.py:35:0: C0116: Missing function or method docstring (missing-function-docstring)
solution15.py:41:0: C0116: Missing function or method docstring (missing-function-docstring)
solution15.py:55:0: C0116: Missing function or method docstring (missing-function-docstring)
solution15.py:55:0: R1710: Either all return statements in a function should return an expression, or none of them should. (inconsistent-return-statements)
solution15.py:62:0: C0116: Missing function or method docstring (missing-function-docstring)
solution15.py:65:0: C0116: Missing function or method docstring (missing-function-docstring)
solution15.py:78:0: C0116: Missing function or method docstring (missing-function-docstring)
solution15.py:92:4: R1703: The if statement can be replaced with 'return bool(test)' (simplifiable-if-statement)
solution15.py:92:4: R1705: Unnecessary "else" after "return" (no-else-return)
solution15.py:105:0: C0103: Constant name "f" doesn't conform to UPPER_CASE naming style (invalid-name)
solution15.py:107:0: C0103: Constant name "f" doesn't conform to UPPER_CASE naming style (invalid-name)
solution15.py:111:0: W0105: String statement has no effect (pointless-string-statement)
solution15.py:118:0: W0105: String statement has no effect (pointless-string-statement)
solution15.py:133:0: W0404: Reimport 'copy' (imported line 31) (reimported)
solution15.py:133:0: C0413: Import "import copy" should be placed at the top of the module (wrong-import-position)
solution15.py:137:0: C0116: Missing function or method docstring (missing-function-docstring)
solution15.py:148:0: C0116: Missing function or method docstring (missing-function-docstring)
solution15.py:148:0: R1710: Either all return statements in a function should return an expression, or none of them should. (inconsistent-return-statements)
solution15.py:154:0: C0116: Missing function or method docstring (missing-function-docstring)
solution15.py:157:0: C0116: Missing function or method docstring (missing-function-docstring)
solution15.py:171:0: C0116: Missing function or method docstring (missing-function-docstring)
solution15.py:186:8: C0103: Variable name "n" doesn't conform to snake_case naming style (invalid-name)
solution15.py:197:12: C0103: Variable name "n" doesn't conform to snake_case naming style (invalid-name)
************* Module solution16
solution16.py:10:136: C0303: Trailing whitespace (trailing-whitespace)
solution16.py:10:0: C0301: Line too long (136/100) (line-too-long)
solution16.py:12:0: C0301: Line too long (169/100) (line-too-long)
solution16.py:16:0: C0301: Line too long (385/100) (line-too-long)
solution16.py:30:0: C0301: Line too long (232/100) (line-too-long)
solution16.py:38:237: C0303: Trailing whitespace (trailing-whitespace)
solution16.py:38:0: C0301: Line too long (237/100) (line-too-long)
solution16.py:39:11: C0303: Trailing whitespace (trailing-whitespace)
solution16.py:42:17: C0303: Trailing whitespace (trailing-whitespace)
solution16.py:43:0: C0303: Trailing whitespace (trailing-whitespace)
solution16.py:48:25: C0303: Trailing whitespace (trailing-whitespace)
solution16.py:52:25: C0303: Trailing whitespace (trailing-whitespace)
solution16.py:57:0: C0301: Line too long (142/100) (line-too-long)
solution16.py:58:0: C0301: Line too long (181/100) (line-too-long)
solution16.py:59:0: C0301: Line too long (168/100) (line-too-long)
solution16.py:61:0: C0301: Line too long (248/100) (line-too-long)
solution16.py:74:0: C0303: Trailing whitespace (trailing-whitespace)
solution16.py:78:51: C0303: Trailing whitespace (trailing-whitespace)
solution16.py:82:20: C0303: Trailing whitespace (trailing-whitespace)
solution16.py:83:20: C0303: Trailing whitespace (trailing-whitespace)
solution16.py:85:22: C0303: Trailing whitespace (trailing-whitespace)
solution16.py:87:0: C0303: Trailing whitespace (trailing-whitespace)
solution16.py:96:16: C0303: Trailing whitespace (trailing-whitespace)
solution16.py:97:0: C0303: Trailing whitespace (trailing-whitespace)
solution16.py:98:0: C0303: Trailing whitespace (trailing-whitespace)
solution16.py:100:0: C0301: Line too long (237/100) (line-too-long)
solution16.py:102:49: C0303: Trailing whitespace (trailing-whitespace)
solution16.py:106:9: C0303: Trailing whitespace (trailing-whitespace)
solution16.py:110:0: C0325: Unnecessary parens after 'return' keyword (superfluous-parens)
solution16.py:136:0: C0301: Line too long (137/100) (line-too-long)
solution16.py:169:0: C0303: Trailing whitespace (trailing-whitespace)
solution16.py:187:129: C0303: Trailing whitespace (trailing-whitespace)
solution16.py:191:214: C0303: Trailing whitespace (trailing-whitespace)
solution16.py:187:0: C0301: Line too long (129/100) (line-too-long)
solution16.py:189:0: C0301: Line too long (151/100) (line-too-long)
solution16.py:191:0: C0301: Line too long (214/100) (line-too-long)
solution16.py:219:28: C0303: Trailing whitespace (trailing-whitespace)
solution16.py:220:0: C0303: Trailing whitespace (trailing-whitespace)
solution16.py:221:17: C0303: Trailing whitespace (trailing-whitespace)
solution16.py:7:0: W0105: String statement has no effect (pointless-string-statement)
solution16.py:20:0: C0103: Argument name "n" doesn't conform to snake_case naming style (invalid-name)
solution16.py:20:0: C0116: Missing function or method docstring (missing-function-docstring)
solution16.py:20:10: W0613: Unused argument 'val' (unused-argument)
solution16.py:20:15: W0613: Unused argument 'n' (unused-argument)
solution16.py:23:0: C0103: Argument name "n" doesn't conform to snake_case naming style (invalid-name)
solution16.py:23:0: C0116: Missing function or method docstring (missing-function-docstring)
solution16.py:25:8: W0612: Unused variable 'i' (unused-variable)
solution16.py:29:0: C0103: Argument name "n" doesn't conform to snake_case naming style (invalid-name)
solution16.py:29:0: C0116: Missing function or method docstring (missing-function-docstring)
solution16.py:30:4: C0103: Variable name "d" doesn't conform to snake_case naming style (invalid-name)
solution16.py:34:4: C0103: Variable name "x" doesn't conform to snake_case naming style (invalid-name)
solution16.py:29:15: W0613: Unused argument 'n' (unused-argument)
solution16.py:37:0: C0103: Argument name "n" doesn't conform to snake_case naming style (invalid-name)
solution16.py:37:0: C0116: Missing function or method docstring (missing-function-docstring)
solution16.py:38:4: C0103: Variable name "d" doesn't conform to snake_case naming style (invalid-name)
solution16.py:37:15: W0613: Unused argument 'n' (unused-argument)
solution16.py:51:0: W0105: String statement has no effect (pointless-string-statement)
solution16.py:56:0: W0105: String statement has no effect (pointless-string-statement)
solution16.py:65:0: C0103: Constant name "size" doesn't conform to UPPER_CASE naming style (invalid-name)
solution16.py:67:0: C0103: Constant name "collision" doesn't conform to UPPER_CASE naming style (invalid-name)
solution16.py:69:0: C0116: Missing function or method docstring (missing-function-docstring)
solution16.py:70:4: W0603: Using the global statement (global-statement)
solution16.py:70:4: C0103: Constant name "size" doesn't conform to UPPER_CASE naming style (invalid-name)
solution16.py:70:4: C0103: Constant name "table" doesn't conform to UPPER_CASE naming style (invalid-name)
solution16.py:70:4: C0103: Constant name "collision" doesn't conform to UPPER_CASE naming style (invalid-name)
solution16.py:76:0: C0116: Missing function or method docstring (missing-function-docstring)
solution16.py:82:4: W0603: Using the global statement (global-statement)
solution16.py:82:4: C0103: Constant name "collision" doesn't conform to UPPER_CASE naming style (invalid-name)
solution16.py:83:4: C0103: Variable name "x" doesn't conform to snake_case naming style (invalid-name)
solution16.py:89:0: C0116: Missing function or method docstring (missing-function-docstring)
solution16.py:99:0: C0116: Missing function or method docstring (missing-function-docstring)
solution16.py:100:4: C0103: Variable name "d" doesn't conform to snake_case naming style (invalid-name)
solution16.py:106:4: C0103: Variable name "a" doesn't conform to snake_case naming style (invalid-name)
solution16.py:109:12: C0103: Variable name "a" doesn't conform to snake_case naming style (invalid-name)
solution16.py:133:0: W0105: String statement has no effect (pointless-string-statement)
solution16.py:155:0: C0103: Argument name "li" doesn't conform to snake_case naming style (invalid-name)
solution16.py:155:0: C0116: Missing function or method docstring (missing-function-docstring)
solution16.py:165:4: R1703: The if statement can be replaced with 'return bool(test)' (simplifiable-if-statement)
solution16.py:165:4: R1705: Unnecessary "else" after "return" (no-else-return)
solution16.py:173:0: C0103: Constant name "b" doesn't conform to UPPER_CASE naming style (invalid-name)
solution16.py:175:0: C0103: Constant name "b" doesn't conform to UPPER_CASE naming style (invalid-name)
solution16.py:177:0: C0103: Constant name "b" doesn't conform to UPPER_CASE naming style (invalid-name)
solution16.py:181:0: W0105: String statement has no effect (pointless-string-statement)
solution16.py:186:0: W0105: String statement has no effect (pointless-string-statement)
solution16.py:212:0: C0103: Argument name "li" doesn't conform to snake_case naming style (invalid-name)
solution16.py:212:0: C0116: Missing function or method docstring (missing-function-docstring)
solution16.py:216:8: C0103: Variable name "x" doesn't conform to snake_case naming style (invalid-name)
solution16.py:217:12: C0103: Variable name "y" doesn't conform to snake_case naming style (invalid-name)
solution16.py:212:0: R1710: Either all return statements in a function should return an expression, or none of them should. (inconsistent-return-statements)
************* Module solution17
solution17.py:10:136: C0303: Trailing whitespace (trailing-whitespace)
solution17.py:10:0: C0301: Line too long (136/100) (line-too-long)
solution17.py:12:0: C0301: Line too long (169/100) (line-too-long)
solution17.py:16:0: C0301: Line too long (385/100) (line-too-long)
solution17.py:31:0: C0301: Line too long (115/100) (line-too-long)
solution17.py:32:0: C0301: Line too long (116/100) (line-too-long)
solution17.py:38:0: C0301: Line too long (120/100) (line-too-long)
solution17.py:39:0: C0301: Line too long (116/100) (line-too-long)
solution17.py:49:25: C0303: Trailing whitespace (trailing-whitespace)
solution17.py:53:25: C0303: Trailing whitespace (trailing-whitespace)
solution17.py:58:0: C0301: Line too long (142/100) (line-too-long)
solution17.py:59:0: C0301: Line too long (181/100) (line-too-long)
solution17.py:60:0: C0301: Line too long (168/100) (line-too-long)
solution17.py:62:0: C0301: Line too long (248/100) (line-too-long)
solution17.py:78:51: C0303: Trailing whitespace (trailing-whitespace)
solution17.py:86:0: C0303: Trailing whitespace (trailing-whitespace)
solution17.py:96:0: C0303: Trailing whitespace (trailing-whitespace)
solution17.py:98:0: C0301: Line too long (237/100) (line-too-long)
solution17.py:100:49: C0303: Trailing whitespace (trailing-whitespace)
solution17.py:131:0: C0301: Line too long (137/100) (line-too-long)
solution17.py:177:129: C0303: Trailing whitespace (trailing-whitespace)
solution17.py:181:214: C0303: Trailing whitespace (trailing-whitespace)
solution17.py:177:0: C0301: Line too long (129/100) (line-too-long)
solution17.py:179:0: C0301: Line too long (151/100) (line-too-long)
solution17.py:181:0: C0301: Line too long (214/100) (line-too-long)
solution17.py:211:0: C0303: Trailing whitespace (trailing-whitespace)
solution17.py:212:17: C0303: Trailing whitespace (trailing-whitespace)
solution17.py:7:0: W0105: String statement has no effect (pointless-string-statement)
solution17.py:20:0: C0103: Argument name "n" doesn't conform to snake_case naming style (invalid-name)
solution17.py:20:0: C0116: Missing function or method docstring (missing-function-docstring)
solution17.py:20:10: W0613: Unused argument 'val' (unused-argument)
solution17.py:20:15: W0613: Unused argument 'n' (unused-argument)
solution17.py:25:0: C0103: Argument name "n" doesn't conform to snake_case naming style (invalid-name)
solution17.py:25:0: C0116: Missing function or method docstring (missing-function-docstring)
solution17.py:25:15: W0613: Unused argument 'n' (unused-argument)
solution17.py:30:0: C0103: Argument name "n" doesn't conform to snake_case naming style (invalid-name)
solution17.py:30:0: C0116: Missing function or method docstring (missing-function-docstring)
solution17.py:31:4: C0103: Variable name "d" doesn't conform to snake_case naming style (invalid-name)
solution17.py:30:15: W0613: Unused argument 'n' (unused-argument)
solution17.py:37:0: C0103: Argument name "n" doesn't conform to snake_case naming style (invalid-name)
solution17.py:37:0: C0116: Missing function or method docstring (missing-function-docstring)
solution17.py:38:4: C0103: Variable name "d" doesn't conform to snake_case naming style (invalid-name)
solution17.py:52:0: W0105: String statement has no effect (pointless-string-statement)
solution17.py:57:0: W0105: String statement has no effect (pointless-string-statement)
solution17.py:66:0: C0103: Constant name "size" doesn't conform to UPPER_CASE naming style (invalid-name)
solution17.py:68:0: C0103: Constant name "collision" doesn't conform to UPPER_CASE naming style (invalid-name)
solution17.py:70:0: C0116: Missing function or method docstring (missing-function-docstring)
solution17.py:71:4: W0603: Using the global statement (global-statement)
solution17.py:71:4: C0103: Constant name "size" doesn't conform to UPPER_CASE naming style (invalid-name)
solution17.py:71:4: C0103: Constant name "table" doesn't conform to UPPER_CASE naming style (invalid-name)
solution17.py:71:4: C0103: Constant name "collision" doesn't conform to UPPER_CASE naming style (invalid-name)
solution17.py:76:0: C0116: Missing function or method docstring (missing-function-docstring)
solution17.py:82:4: W0603: Using the global statement (global-statement)
solution17.py:82:4: C0103: Constant name "table" doesn't conform to UPPER_CASE naming style (invalid-name)
solution17.py:82:4: C0103: Constant name "collision" doesn't conform to UPPER_CASE naming style (invalid-name)
solution17.py:87:0: C0116: Missing function or method docstring (missing-function-docstring)
solution17.py:91:4: W0603: Using the global statement (global-statement)
solution17.py:91:4: C0103: Constant name "table" doesn't conform to UPPER_CASE naming style (invalid-name)
solution17.py:92:4: R1703: The if statement can be replaced with 'return bool(test)' (simplifiable-if-statement)
solution17.py:92:4: R1705: Unnecessary "else" after "return" (no-else-return)
solution17.py:97:0: C0116: Missing function or method docstring (missing-function-docstring)
solution17.py:98:4: C0103: Variable name "d" doesn't conform to snake_case naming style (invalid-name)
solution17.py:104:4: W0603: Using the global statement (global-statement)
solution17.py:104:4: C0103: Constant name "size" doesn't conform to UPPER_CASE naming style (invalid-name)
solution17.py:128:0: W0105: String statement has no effect (pointless-string-statement)
solution17.py:150:0: C0103: Argument name "li" doesn't conform to snake_case naming style (invalid-name)
solution17.py:150:0: C0116: Missing function or method docstring (missing-function-docstring)
solution17.py:157:4: W0120: Else clause on loop without a break statement (useless-else-on-loop)
solution17.py:163:0: C0103: Constant name "b" doesn't conform to UPPER_CASE naming style (invalid-name)
solution17.py:165:0: C0103: Constant name "b" doesn't conform to UPPER_CASE naming style (invalid-name)
solution17.py:167:0: C0103: Constant name "b" doesn't conform to UPPER_CASE naming style (invalid-name)
solution17.py:171:0: W0105: String statement has no effect (pointless-string-statement)
solution17.py:176:0: W0105: String statement has no effect (pointless-string-statement)
solution17.py:207:8: W0622: Redefining built-in 'next' (redefined-builtin)
solution17.py:202:0: C0103: Argument name "li" doesn't conform to snake_case naming style (invalid-name)
solution17.py:202:0: C0116: Missing function or method docstring (missing-function-docstring)
solution17.py:205:4: C0200: Consider using enumerate instead of iterating with range and len (consider-using-enumerate)
solution17.py:202:0: R1710: Either all return statements in a function should return an expression, or none of them should. (inconsistent-return-statements)
************* Module solution18
solution18.py:10:136: C0303: Trailing whitespace (trailing-whitespace)
solution18.py:10:0: C0301: Line too long (136/100) (line-too-long)
solution18.py:12:0: C0301: Line too long (169/100) (line-too-long)
solution18.py:16:0: C0301: Line too long (385/100) (line-too-long)
solution18.py:27:0: C0301: Line too long (232/100) (line-too-long)
solution18.py:29:0: C0303: Trailing whitespace (trailing-whitespace)
solution18.py:31:237: C0303: Trailing whitespace (trailing-whitespace)
solution18.py:31:0: C0301: Line too long (237/100) (line-too-long)
solution18.py:36:0: C0303: Trailing whitespace (trailing-whitespace)
solution18.py:41:32: C0303: Trailing whitespace (trailing-whitespace)
solution18.py:45:25: C0303: Trailing whitespace (trailing-whitespace)
solution18.py:50:0: C0301: Line too long (142/100) (line-too-long)
solution18.py:51:0: C0301: Line too long (181/100) (line-too-long)
solution18.py:52:0: C0301: Line too long (168/100) (line-too-long)
solution18.py:54:0: C0301: Line too long (248/100) (line-too-long)
solution18.py:59:0: W0311: Bad indentation. Found 3 spaces, expected 4 (bad-indentation)
solution18.py:60:0: W0311: Bad indentation. Found 3 spaces, expected 4 (bad-indentation)
solution18.py:61:0: W0311: Bad indentation. Found 3 spaces, expected 4 (bad-indentation)
solution18.py:63:0: W0311: Bad indentation. Found 3 spaces, expected 4 (bad-indentation)
solution18.py:64:0: W0311: Bad indentation. Found 7 spaces, expected 8 (bad-indentation)
solution18.py:65:0: W0311: Bad indentation. Found 7 spaces, expected 8 (bad-indentation)
solution18.py:66:0: W0311: Bad indentation. Found 7 spaces, expected 8 (bad-indentation)
solution18.py:67:0: W0311: Bad indentation. Found 7 spaces, expected 8 (bad-indentation)
solution18.py:69:0: W0311: Bad indentation. Found 3 spaces, expected 4 (bad-indentation)
solution18.py:70:0: W0311: Bad indentation. Found 7 spaces, expected 8 (bad-indentation)
solution18.py:72:54: C0303: Trailing whitespace (trailing-whitespace)
solution18.py:77:26: C0303: Trailing whitespace (trailing-whitespace)
solution18.py:77:0: W0311: Bad indentation. Found 7 spaces, expected 8 (bad-indentation)
solution18.py:78:0: W0311: Bad indentation. Found 7 spaces, expected 8 (bad-indentation)
solution18.py:79:26: C0303: Trailing whitespace (trailing-whitespace)
solution18.py:79:0: W0311: Bad indentation. Found 7 spaces, expected 8 (bad-indentation)
solution18.py:80:0: W0311: Bad indentation. Found 10 spaces, expected 12 (bad-indentation)
solution18.py:81:48: C0303: Trailing whitespace (trailing-whitespace)
solution18.py:81:0: W0311: Bad indentation. Found 10 spaces, expected 12 (bad-indentation)
solution18.py:82:0: W0311: Bad indentation. Found 10 spaces, expected 12 (bad-indentation)
solution18.py:83:12: C0303: Trailing whitespace (trailing-whitespace)
solution18.py:83:0: W0311: Bad indentation. Found 7 spaces, expected 8 (bad-indentation)
solution18.py:84:0: W0311: Bad indentation. Found 10 spaces, expected 12 (bad-indentation)
solution18.py:85:0: C0303: Trailing whitespace (trailing-whitespace)
solution18.py:86:0: C0303: Trailing whitespace (trailing-whitespace)
solution18.py:87:0: C0303: Trailing whitespace (trailing-whitespace)
solution18.py:88:0: C0303: Trailing whitespace (trailing-whitespace)
solution18.py:89:0: W0311: Bad indentation. Found 3 spaces, expected 4 (bad-indentation)
solution18.py:93:0: W0311: Bad indentation. Found 7 spaces, expected 8 (bad-indentation)
solution18.py:94:0: W0311: Bad indentation. Found 10 spaces, expected 12 (bad-indentation)
solution18.py:95:0: W0311: Bad indentation. Found 7 spaces, expected 8 (bad-indentation)
solution18.py:96:0: W0311: Bad indentation. Found 10 spaces, expected 12 (bad-indentation)
solution18.py:97:0: C0303: Trailing whitespace (trailing-whitespace)
solution18.py:98:0: C0303: Trailing whitespace (trailing-whitespace)
solution18.py:99:0: C0303: Trailing whitespace (trailing-whitespace)
solution18.py:100:0: W0311: Bad indentation. Found 3 spaces, expected 4 (bad-indentation)
solution18.py:101:0: W0311: Bad indentation. Found 7 spaces, expected 8 (bad-indentation)
solution18.py:102:0: C0301: Line too long (240/100) (line-too-long)
solution18.py:102:0: W0311: Bad indentation. Found 7 spaces, expected 8 (bad-indentation)
solution18.py:104:52: C0303: Trailing whitespace (trailing-whitespace)
solution18.py:108:0: W0311: Bad indentation. Found 7 spaces, expected 8 (bad-indentation)
solution18.py:109:0: C0303: Trailing whitespace (trailing-whitespace)
solution18.py:110:0: W0311: Bad indentation. Found 7 spaces, expected 8 (bad-indentation)
solution18.py:111:0: W0311: Bad indentation. Found 10 spaces, expected 12 (bad-indentation)
solution18.py:112:0: W0311: Bad indentation. Found 13 spaces, expected 16 (bad-indentation)
solution18.py:113:0: W0311: Bad indentation. Found 10 spaces, expected 12 (bad-indentation)
solution18.py:114:0: W0311: Bad indentation. Found 13 spaces, expected 16 (bad-indentation)
solution18.py:115:0: C0303: Trailing whitespace (trailing-whitespace)
solution18.py:116:0: W0311: Bad indentation. Found 7 spaces, expected 8 (bad-indentation)
solution18.py:139:0: C0303: Trailing whitespace (trailing-whitespace)
solution18.py:146:0: C0301: Line too long (137/100) (line-too-long)
solution18.py:191:129: C0303: Trailing whitespace (trailing-whitespace)
solution18.py:195:214: C0303: Trailing whitespace (trailing-whitespace)
solution18.py:191:0: C0301: Line too long (129/100) (line-too-long)
solution18.py:193:0: C0301: Line too long (151/100) (line-too-long)
solution18.py:195:0: C0301: Line too long (214/100) (line-too-long)
solution18.py:221:13: C0303: Trailing whitespace (trailing-whitespace)
solution18.py:223:17: C0303: Trailing whitespace (trailing-whitespace)
solution18.py:7:0: W0105: String statement has no effect (pointless-string-statement)
solution18.py:20:0: C0103: Argument name "n" doesn't conform to snake_case naming style (invalid-name)
solution18.py:20:0: C0116: Missing function or method docstring (missing-function-docstring)
solution18.py:20:10: W0613: Unused argument 'val' (unused-argument)
solution18.py:20:15: W0613: Unused argument 'n' (unused-argument)
solution18.py:23:0: C0103: Argument name "n" doesn't conform to snake_case naming style (invalid-name)
solution18.py:23:0: C0116: Missing function or method docstring (missing-function-docstring)
solution18.py:23:15: W0613: Unused argument 'n' (unused-argument)
solution18.py:27:4: W0621: Redefining name 'd' from outer scope (line 102) (redefined-outer-name)
solution18.py:26:0: C0103: Argument name "n" doesn't conform to snake_case naming style (invalid-name)
solution18.py:26:0: C0116: Missing function or method docstring (missing-function-docstring)
solution18.py:27:4: C0103: Variable name "d" doesn't conform to snake_case naming style (invalid-name)
solution18.py:26:10: W0613: Unused argument 'val' (unused-argument)
solution18.py:26:15: W0613: Unused argument 'n' (unused-argument)
solution18.py:27:4: W0612: Unused variable 'd' (unused-variable)
solution18.py:31:4: W0621: Redefining name 'd' from outer scope (line 102) (redefined-outer-name)
solution18.py:30:0: C0103: Argument name "n" doesn't conform to snake_case naming style (invalid-name)
solution18.py:30:0: C0116: Missing function or method docstring (missing-function-docstring)
solution18.py:31:4: C0103: Variable name "d" doesn't conform to snake_case naming style (invalid-name)
solution18.py:32:4: C0103: Variable name "s" doesn't conform to snake_case naming style (invalid-name)
solution18.py:34:8: C0103: Variable name "s" doesn't conform to snake_case naming style (invalid-name)
solution18.py:44:0: W0105: String statement has no effect (pointless-string-statement)
solution18.py:49:0: W0105: String statement has no effect (pointless-string-statement)
solution18.py:58:0: C0115: Missing class docstring (missing-class-docstring)
solution18.py:63:3: C0116: Missing function or method docstring (missing-function-docstring)
solution18.py:64:7: W0601: Global variable 'size' undefined at the module level (global-variable-undefined)
solution18.py:64:7: W0601: Global variable 'table' undefined at the module level (global-variable-undefined)
solution18.py:64:7: W0601: Global variable 'collision' undefined at the module level (global-variable-undefined)
solution18.py:64:7: C0103: Constant name "size" doesn't conform to UPPER_CASE naming style (invalid-name)
solution18.py:64:7: C0103: Constant name "table" doesn't conform to UPPER_CASE naming style (invalid-name)
solution18.py:64:7: C0103: Constant name "collision" doesn't conform to UPPER_CASE naming style (invalid-name)
solution18.py:63:3: R0201: Method could be a function (no-self-use)
solution18.py:69:3: C0116: Missing function or method docstring (missing-function-docstring)
solution18.py:70:7: W0601: Global variable 'collision' undefined at the module level (global-variable-undefined)
solution18.py:70:7: C0103: Constant name "index" doesn't conform to UPPER_CASE naming style (invalid-name)
solution18.py:70:7: C0103: Constant name "collision" doesn't conform to UPPER_CASE naming style (invalid-name)
solution18.py:77:21: E0601: Using variable 'index' before assignment (used-before-assignment)
solution18.py:69:3: R0201: Method could be a function (no-self-use)
solution18.py:89:3: C0116: Missing function or method docstring (missing-function-docstring)
solution18.py:93:7: R1703: The if statement can be replaced with 'return bool(test)' (simplifiable-if-statement)
solution18.py:93:7: R1705: Unnecessary "else" after "return" (no-else-return)
solution18.py:89:3: R0201: Method could be a function (no-self-use)
solution18.py:100:3: C0116: Missing function or method docstring (missing-function-docstring)
solution18.py:101:7: W0601: Global variable 'd' undefined at the module level (global-variable-undefined)
solution18.py:101:7: C0103: Constant name "d" doesn't conform to UPPER_CASE naming style (invalid-name)
solution18.py:108:7: C0103: Variable name "s" doesn't conform to snake_case naming style (invalid-name)
solution18.py:112:13: C0103: Variable name "s" doesn't conform to snake_case naming style (invalid-name)
solution18.py:114:13: C0103: Variable name "s" doesn't conform to snake_case naming style (invalid-name)
solution18.py:100:3: R0201: Method could be a function (no-self-use)
solution18.py:143:0: W0105: String statement has no effect (pointless-string-statement)
solution18.py:165:0: C0103: Argument name "li" doesn't conform to snake_case naming style (invalid-name)
solution18.py:165:0: C0116: Missing function or method docstring (missing-function-docstring)
solution18.py:168:4: C0200: Consider using enumerate instead of iterating with range and len (consider-using-enumerate)
solution18.py:177:0: C0103: Constant name "b" doesn't conform to UPPER_CASE naming style (invalid-name)
solution18.py:179:0: C0103: Constant name "b" doesn't conform to UPPER_CASE naming style (invalid-name)
solution18.py:181:0: C0103: Constant name "b" doesn't conform to UPPER_CASE naming style (invalid-name)
solution18.py:185:0: W0105: String statement has no effect (pointless-string-statement)
solution18.py:190:0: W0105: String statement has no effect (pointless-string-statement)
solution18.py:217:4: W0621: Redefining name 'd' from outer scope (line 102) (redefined-outer-name)
solution18.py:216:0: C0103: Argument name "li" doesn't conform to snake_case naming style (invalid-name)
solution18.py:216:0: C0116: Missing function or method docstring (missing-function-docstring)
solution18.py:217:4: C0103: Variable name "d" doesn't conform to snake_case naming style (invalid-name)
solution18.py:216:0: R1710: Either all return statements in a function should return an expression, or none of them should. (inconsistent-return-statements)
************* Module solution19
solution19.py:10:136: C0303: Trailing whitespace (trailing-whitespace)
solution19.py:10:0: C0301: Line too long (136/100) (line-too-long)
solution19.py:12:0: C0301: Line too long (169/100) (line-too-long)
solution19.py:16:0: C0301: Line too long (385/100) (line-too-long)
solution19.py:27:0: C0301: Line too long (232/100) (line-too-long)
solution19.py:29:0: C0303: Trailing whitespace (trailing-whitespace)
solution19.py:31:237: C0303: Trailing whitespace (trailing-whitespace)
solution19.py:31:0: C0301: Line too long (237/100) (line-too-long)
solution19.py:37:0: C0303: Trailing whitespace (trailing-whitespace)
solution19.py:42:0: C0303: Trailing whitespace (trailing-whitespace)
solution19.py:47:25: C0303: Trailing whitespace (trailing-whitespace)
solution19.py:51:25: C0303: Trailing whitespace (trailing-whitespace)
solution19.py:56:0: C0301: Line too long (142/100) (line-too-long)
solution19.py:57:0: C0301: Line too long (181/100) (line-too-long)
solution19.py:58:0: C0301: Line too long (168/100) (line-too-long)
solution19.py:60:0: C0301: Line too long (248/100) (line-too-long)
solution19.py:76:51: C0303: Trailing whitespace (trailing-whitespace)
solution19.py:84:0: C0303: Trailing whitespace (trailing-whitespace)
solution19.py:89:0: W0311: Bad indentation. Found 5 spaces, expected 4 (bad-indentation)
solution19.py:91:0: W0311: Bad indentation. Found 5 spaces, expected 4 (bad-indentation)
solution19.py:94:0: C0303: Trailing whitespace (trailing-whitespace)
solution19.py:96:0: C0301: Line too long (237/100) (line-too-long)
solution19.py:98:49: C0303: Trailing whitespace (trailing-whitespace)
solution19.py:131:0: C0301: Line too long (137/100) (line-too-long)
solution19.py:175:129: C0303: Trailing whitespace (trailing-whitespace)
solution19.py:179:214: C0303: Trailing whitespace (trailing-whitespace)
solution19.py:175:0: C0301: Line too long (129/100) (line-too-long)
solution19.py:177:0: C0301: Line too long (151/100) (line-too-long)
solution19.py:179:0: C0301: Line too long (214/100) (line-too-long)
solution19.py:209:17: C0303: Trailing whitespace (trailing-whitespace)
solution19.py:7:0: W0105: String statement has no effect (pointless-string-statement)
solution19.py:20:0: C0103: Argument name "n" doesn't conform to snake_case naming style (invalid-name)
solution19.py:20:0: C0116: Missing function or method docstring (missing-function-docstring)
solution19.py:20:10: W0613: Unused argument 'val' (unused-argument)
solution19.py:20:15: W0613: Unused argument 'n' (unused-argument)
solution19.py:23:0: C0103: Argument name "n" doesn't conform to snake_case naming style (invalid-name)
solution19.py:23:0: C0116: Missing function or method docstring (missing-function-docstring)
solution19.py:23:15: W0613: Unused argument 'n' (unused-argument)
solution19.py:26:0: C0103: Argument name "n" doesn't conform to snake_case naming style (invalid-name)
solution19.py:26:0: C0116: Missing function or method docstring (missing-function-docstring)
solution19.py:27:4: C0103: Variable name "d" doesn't conform to snake_case naming style (invalid-name)
solution19.py:26:15: W0613: Unused argument 'n' (unused-argument)
solution19.py:30:0: C0103: Argument name "n" doesn't conform to snake_case naming style (invalid-name)
solution19.py:30:0: C0116: Missing function or method docstring (missing-function-docstring)
solution19.py:31:4: C0103: Variable name "d" doesn't conform to snake_case naming style (invalid-name)
solution19.py:50:0: W0105: String statement has no effect (pointless-string-statement)
solution19.py:55:0: W0105: String statement has no effect (pointless-string-statement)
solution19.py:64:0: C0103: Constant name "size" doesn't conform to UPPER_CASE naming style (invalid-name)
solution19.py:66:0: C0103: Constant name "collision" doesn't conform to UPPER_CASE naming style (invalid-name)
solution19.py:68:0: C0116: Missing function or method docstring (missing-function-docstring)
solution19.py:69:4: W0603: Using the global statement (global-statement)
solution19.py:69:4: C0103: Constant name "size" doesn't conform to UPPER_CASE naming style (invalid-name)
solution19.py:69:4: C0103: Constant name "table" doesn't conform to UPPER_CASE naming style (invalid-name)
solution19.py:69:4: C0103: Constant name "collision" doesn't conform to UPPER_CASE naming style (invalid-name)
solution19.py:74:0: C0116: Missing function or method docstring (missing-function-docstring)
solution19.py:80:4: W0603: Using the global statement (global-statement)
solution19.py:80:4: C0103: Constant name "collision" doesn't conform to UPPER_CASE naming style (invalid-name)
solution19.py:85:0: C0116: Missing function or method docstring (missing-function-docstring)
solution19.py:89:5: R1703: The if statement can be replaced with 'return bool(test)' (simplifiable-if-statement)
solution19.py:89:5: R1705: Unnecessary "else" after "return" (no-else-return)
solution19.py:95:0: C0116: Missing function or method docstring (missing-function-docstring)
solution19.py:96:4: C0103: Variable name "d" doesn't conform to snake_case naming style (invalid-name)
solution19.py:128:0: W0105: String statement has no effect (pointless-string-statement)
solution19.py:150:0: C0103: Argument name "li" doesn't conform to snake_case naming style (invalid-name)
solution19.py:150:0: C0116: Missing function or method docstring (missing-function-docstring)
solution19.py:169:0: W0105: String statement has no effect (pointless-string-statement)
solution19.py:174:0: W0105: String statement has no effect (pointless-string-statement)
solution19.py:200:0: C0103: Argument name "li" doesn't conform to snake_case naming style (invalid-name)
solution19.py:200:0: C0116: Missing function or method docstring (missing-function-docstring)
solution19.py:204:4: C0200: Consider using enumerate instead of iterating with range and len (consider-using-enumerate)
************* Module solution2
solution2.py:10:136: C0303: Trailing whitespace (trailing-whitespace)
solution2.py:10:0: C0301: Line too long (136/100) (line-too-long)
solution2.py:12:0: C0301: Line too long (169/100) (line-too-long)
solution2.py:16:0: C0301: Line too long (385/100) (line-too-long)
solution2.py:27:0: C0301: Line too long (232/100) (line-too-long)
solution2.py:29:0: C0303: Trailing whitespace (trailing-whitespace)
solution2.py:30:0: C0303: Trailing whitespace (trailing-whitespace)
solution2.py:32:237: C0303: Trailing whitespace (trailing-whitespace)
solution2.py:32:0: C0301: Line too long (237/100) (line-too-long)
solution2.py:38:0: C0303: Trailing whitespace (trailing-whitespace)
solution2.py:43:25: C0303: Trailing whitespace (trailing-whitespace)
solution2.py:47:25: C0303: Trailing whitespace (trailing-whitespace)
solution2.py:52:0: C0301: Line too long (142/100) (line-too-long)
solution2.py:53:0: C0301: Line too long (181/100) (line-too-long)
solution2.py:54:0: C0301: Line too long (168/100) (line-too-long)
solution2.py:56:0: C0301: Line too long (248/100) (line-too-long)
solution2.py:72:51: C0303: Trailing whitespace (trailing-whitespace)
solution2.py:82:0: C0303: Trailing whitespace (trailing-whitespace)
solution2.py:92:0: C0303: Trailing whitespace (trailing-whitespace)
solution2.py:94:0: C0301: Line too long (237/100) (line-too-long)
solution2.py:96:49: C0303: Trailing whitespace (trailing-whitespace)
solution2.py:131:0: C0301: Line too long (137/100) (line-too-long)
solution2.py:179:129: C0303: Trailing whitespace (trailing-whitespace)
solution2.py:183:214: C0303: Trailing whitespace (trailing-whitespace)
solution2.py:179:0: C0301: Line too long (129/100) (line-too-long)
solution2.py:181:0: C0301: Line too long (151/100) (line-too-long)
solution2.py:183:0: C0301: Line too long (214/100) (line-too-long)
solution2.py:212:17: C0303: Trailing whitespace (trailing-whitespace)
solution2.py:7:0: W0105: String statement has no effect (pointless-string-statement)
solution2.py:20:0: C0103: Argument name "n" doesn't conform to snake_case naming style (invalid-name)
solution2.py:20:0: C0116: Missing function or method docstring (missing-function-docstring)
solution2.py:20:10: W0613: Unused argument 'val' (unused-argument)
solution2.py:20:15: W0613: Unused argument 'n' (unused-argument)
solution2.py:23:0: C0103: Argument name "n" doesn't conform to snake_case naming style (invalid-name)
solution2.py:23:0: C0116: Missing function or method docstring (missing-function-docstring)
solution2.py:23:15: W0613: Unused argument 'n' (unused-argument)
solution2.py:26:0: C0103: Argument name "n" doesn't conform to snake_case naming style (invalid-name)
solution2.py:26:0: C0116: Missing function or method docstring (missing-function-docstring)
solution2.py:27:4: C0103: Variable name "d" doesn't conform to snake_case naming style (invalid-name)
solution2.py:26:15: W0613: Unused argument 'n' (unused-argument)
solution2.py:31:0: C0103: Argument name "n" doesn't conform to snake_case naming style (invalid-name)
solution2.py:31:0: C0116: Missing function or method docstring (missing-function-docstring)
solution2.py:32:4: C0103: Variable name "d" doesn't conform to snake_case naming style (invalid-name)
solution2.py:33:4: C0103: Variable name "ph" doesn't conform to snake_case naming style (invalid-name)
solution2.py:36:12: C0103: Variable name "ph" doesn't conform to snake_case naming style (invalid-name)
solution2.py:31:15: W0613: Unused argument 'n' (unused-argument)
solution2.py:46:0: W0105: String statement has no effect (pointless-string-statement)
solution2.py:51:0: W0105: String statement has no effect (pointless-string-statement)
solution2.py:60:0: C0103: Constant name "size" doesn't conform to UPPER_CASE naming style (invalid-name)
solution2.py:62:0: C0103: Constant name "collision" doesn't conform to UPPER_CASE naming style (invalid-name)
solution2.py:64:0: C0116: Missing function or method docstring (missing-function-docstring)
solution2.py:65:4: W0603: Using the global statement (global-statement)
solution2.py:65:4: C0103: Constant name "size" doesn't conform to UPPER_CASE naming style (invalid-name)
solution2.py:65:4: C0103: Constant name "table" doesn't conform to UPPER_CASE naming style (invalid-name)
solution2.py:65:4: C0103: Constant name "collision" doesn't conform to UPPER_CASE naming style (invalid-name)
solution2.py:70:0: C0116: Missing function or method docstring (missing-function-docstring)
solution2.py:77:4: W0603: Using the global statement (global-statement)
solution2.py:77:4: C0103: Constant name "collision" doesn't conform to UPPER_CASE naming style (invalid-name)
solution2.py:83:0: C0116: Missing function or method docstring (missing-function-docstring)
solution2.py:88:4: R1703: The if statement can be replaced with 'return bool(test)' (simplifiable-if-statement)
solution2.py:88:4: R1705: Unnecessary "else" after "return" (no-else-return)
solution2.py:93:0: C0116: Missing function or method docstring (missing-function-docstring)
solution2.py:94:4: C0103: Variable name "d" doesn't conform to snake_case naming style (invalid-name)
solution2.py:100:4: C0103: Variable name "ph" doesn't conform to snake_case naming style (invalid-name)
solution2.py:103:12: C0103: Variable name "ph" doesn't conform to snake_case naming style (invalid-name)
solution2.py:105:12: C0103: Variable name "ph" doesn't conform to snake_case naming style (invalid-name)
solution2.py:128:0: W0105: String statement has no effect (pointless-string-statement)
solution2.py:150:0: C0103: Argument name "li" doesn't conform to snake_case naming style (invalid-name)
solution2.py:150:0: C0116: Missing function or method docstring (missing-function-docstring)
solution2.py:153:4: C0103: Variable name "ph" doesn't conform to snake_case naming style (invalid-name)
solution2.py:157:4: R1705: Unnecessary "else" after "return" (no-else-return)
solution2.py:165:0: C0103: Constant name "b" doesn't conform to UPPER_CASE naming style (invalid-name)
solution2.py:167:0: C0103: Constant name "b" doesn't conform to UPPER_CASE naming style (invalid-name)
solution2.py:169:0: C0103: Constant name "b" doesn't conform to UPPER_CASE naming style (invalid-name)
solution2.py:173:0: W0105: String statement has no effect (pointless-string-statement)
solution2.py:178:0: W0105: String statement has no effect (pointless-string-statement)
solution2.py:204:0: C0103: Argument name "li" doesn't conform to snake_case naming style (invalid-name)
solution2.py:204:0: C0116: Missing function or method docstring (missing-function-docstring)
solution2.py:205:4: C0103: Variable name "ph" doesn't conform to snake_case naming style (invalid-name)
solution2.py:206:4: C0200: Consider using enumerate instead of iterating with range and len (consider-using-enumerate)
solution2.py:204:0: R1710: Either all return statements in a function should return an expression, or none of them should. (inconsistent-return-statements)
************* Module solution20
solution20.py:10:136: C0303: Trailing whitespace (trailing-whitespace)
solution20.py:10:0: C0301: Line too long (136/100) (line-too-long)
solution20.py:12:0: C0301: Line too long (169/100) (line-too-long)
solution20.py:16:0: C0301: Line too long (385/100) (line-too-long)
solution20.py:25:0: C0303: Trailing whitespace (trailing-whitespace)
solution20.py:28:0: C0301: Line too long (232/100) (line-too-long)
solution20.py:30:0: C0303: Trailing whitespace (trailing-whitespace)
solution20.py:32:237: C0303: Trailing whitespace (trailing-whitespace)
solution20.py:32:0: C0301: Line too long (237/100) (line-too-long)
solution20.py:43:25: C0303: Trailing whitespace (trailing-whitespace)
solution20.py:53:25: C0303: Trailing whitespace (trailing-whitespace)
solution20.py:58:0: C0301: Line too long (142/100) (line-too-long)
solution20.py:59:0: C0301: Line too long (181/100) (line-too-long)
solution20.py:60:0: C0301: Line too long (168/100) (line-too-long)
solution20.py:62:0: C0301: Line too long (248/100) (line-too-long)
solution20.py:78:51: C0303: Trailing whitespace (trailing-whitespace)
solution20.py:86:0: C0303: Trailing whitespace (trailing-whitespace)
solution20.py:87:0: C0303: Trailing whitespace (trailing-whitespace)
solution20.py:96:0: C0303: Trailing whitespace (trailing-whitespace)
solution20.py:98:0: C0301: Line too long (237/100) (line-too-long)
solution20.py:100:49: C0303: Trailing whitespace (trailing-whitespace)
solution20.py:134:0: C0301: Line too long (137/100) (line-too-long)
solution20.py:163:0: C0303: Trailing whitespace (trailing-whitespace)
solution20.py:182:129: C0303: Trailing whitespace (trailing-whitespace)
solution20.py:186:214: C0303: Trailing whitespace (trailing-whitespace)
solution20.py:182:0: C0301: Line too long (129/100) (line-too-long)
solution20.py:184:0: C0301: Line too long (151/100) (line-too-long)
solution20.py:186:0: C0301: Line too long (214/100) (line-too-long)
solution20.py:216:17: C0303: Trailing whitespace (trailing-whitespace)
solution20.py:226:0: C0304: Final newline missing (missing-final-newline)
solution20.py:7:0: W0105: String statement has no effect (pointless-string-statement)
solution20.py:20:0: C0103: Argument name "n" doesn't conform to snake_case naming style (invalid-name)
solution20.py:20:0: C0116: Missing function or method docstring (missing-function-docstring)
solution20.py:20:10: W0613: Unused argument 'val' (unused-argument)
solution20.py:20:15: W0613: Unused argument 'n' (unused-argument)
solution20.py:23:0: C0103: Argument name "n" doesn't conform to snake_case naming style (invalid-name)
solution20.py:23:0: C0116: Missing function or method docstring (missing-function-docstring)
solution20.py:27:0: C0103: Argument name "n" doesn't conform to snake_case naming style (invalid-name)
solution20.py:27:0: C0116: Missing function or method docstring (missing-function-docstring)
solution20.py:28:4: C0103: Variable name "d" doesn't conform to snake_case naming style (invalid-name)
solution20.py:27:15: W0613: Unused argument 'n' (unused-argument)
solution20.py:31:0: C0103: Argument name "n" doesn't conform to snake_case naming style (invalid-name)
solution20.py:31:0: C0116: Missing function or method docstring (missing-function-docstring)
solution20.py:32:4: C0103: Variable name "d" doesn't conform to snake_case naming style (invalid-name)
solution20.py:33:4: C0103: Variable name "s" doesn't conform to snake_case naming style (invalid-name)
solution20.py:34:8: C0103: Variable name "ch" doesn't conform to snake_case naming style (invalid-name)
solution20.py:36:12: C0103: Variable name "s" doesn't conform to snake_case naming style (invalid-name)
solution20.py:52:0: W0105: String statement has no effect (pointless-string-statement)
solution20.py:57:0: W0105: String statement has no effect (pointless-string-statement)
solution20.py:66:0: C0103: Constant name "size" doesn't conform to UPPER_CASE naming style (invalid-name)
solution20.py:68:0: C0103: Constant name "collision" doesn't conform to UPPER_CASE naming style (invalid-name)
solution20.py:70:0: C0116: Missing function or method docstring (missing-function-docstring)
solution20.py:71:4: W0603: Using the global statement (global-statement)
solution20.py:71:4: C0103: Constant name "size" doesn't conform to UPPER_CASE naming style (invalid-name)
solution20.py:71:4: C0103: Constant name "table" doesn't conform to UPPER_CASE naming style (invalid-name)
solution20.py:71:4: C0103: Constant name "collision" doesn't conform to UPPER_CASE naming style (invalid-name)
solution20.py:76:0: C0116: Missing function or method docstring (missing-function-docstring)
solution20.py:82:4: W0603: Using the global statement (global-statement)
solution20.py:82:4: C0103: Constant name "size" doesn't conform to UPPER_CASE naming style (invalid-name)
solution20.py:82:4: C0103: Constant name "table" doesn't conform to UPPER_CASE naming style (invalid-name)
solution20.py:82:4: C0103: Constant name "collision" doesn't conform to UPPER_CASE naming style (invalid-name)
solution20.py:83:4: C0103: Variable name "h" doesn't conform to snake_case naming style (invalid-name)
solution20.py:88:0: C0116: Missing function or method docstring (missing-function-docstring)
solution20.py:92:4: C0103: Variable name "h" doesn't conform to snake_case naming style (invalid-name)
solution20.py:97:0: C0116: Missing function or method docstring (missing-function-docstring)
solution20.py:98:4: C0103: Variable name "d" doesn't conform to snake_case naming style (invalid-name)
solution20.py:104:4: C0103: Variable name "s" doesn't conform to snake_case naming style (invalid-name)
solution20.py:105:8: C0103: Variable name "ch" doesn't conform to snake_case naming style (invalid-name)
solution20.py:107:12: C0103: Variable name "s" doesn't conform to snake_case naming style (invalid-name)
solution20.py:131:0: W0105: String statement has no effect (pointless-string-statement)
solution20.py:153:0: C0103: Argument name "li" doesn't conform to snake_case naming style (invalid-name)
solution20.py:153:0: C0116: Missing function or method docstring (missing-function-docstring)
solution20.py:156:4: C0103: Variable name "s" doesn't conform to snake_case naming style (invalid-name)
solution20.py:158:8: R1705: Unnecessary "else" after "return" (no-else-return)
solution20.py:168:0: C0103: Constant name "b" doesn't conform to UPPER_CASE naming style (invalid-name)
solution20.py:170:0: C0103: Constant name "b" doesn't conform to UPPER_CASE naming style (invalid-name)
solution20.py:172:0: C0103: Constant name "b" doesn't conform to UPPER_CASE naming style (invalid-name)
solution20.py:176:0: W0105: String statement has no effect (pointless-string-statement)
solution20.py:181:0: W0105: String statement has no effect (pointless-string-statement)
solution20.py:207:0: C0103: Argument name "li" doesn't conform to snake_case naming style (invalid-name)
solution20.py:207:0: C0116: Missing function or method docstring (missing-function-docstring)
solution20.py:210:4: C0200: Consider using enumerate instead of iterating with range and len (consider-using-enumerate)
************* Module solution21
solution21.py:10:136: C0303: Trailing whitespace (trailing-whitespace)
solution21.py:10:0: C0301: Line too long (136/100) (line-too-long)
solution21.py:12:0: C0301: Line too long (169/100) (line-too-long)
solution21.py:16:0: C0301: Line too long (385/100) (line-too-long)
solution21.py:26:12: C0303: Trailing whitespace (trailing-whitespace)
solution21.py:29:0: C0301: Line too long (232/100) (line-too-long)
solution21.py:35:0: C0303: Trailing whitespace (trailing-whitespace)
solution21.py:37:237: C0303: Trailing whitespace (trailing-whitespace)
solution21.py:37:0: C0301: Line too long (237/100) (line-too-long)
solution21.py:44:0: C0303: Trailing whitespace (trailing-whitespace)
solution21.py:49:25: C0303: Trailing whitespace (trailing-whitespace)
solution21.py:53:25: C0303: Trailing whitespace (trailing-whitespace)
solution21.py:58:0: C0301: Line too long (142/100) (line-too-long)
solution21.py:59:0: C0301: Line too long (181/100) (line-too-long)
solution21.py:60:0: C0301: Line too long (168/100) (line-too-long)
solution21.py:62:0: C0301: Line too long (248/100) (line-too-long)
solution21.py:78:51: C0303: Trailing whitespace (trailing-whitespace)
solution21.py:83:0: C0303: Trailing whitespace (trailing-whitespace)
solution21.py:89:0: C0303: Trailing whitespace (trailing-whitespace)
solution21.py:91:0: C0301: Line too long (237/100) (line-too-long)
solution21.py:93:49: C0303: Trailing whitespace (trailing-whitespace)
solution21.py:122:0: C0301: Line too long (137/100) (line-too-long)
solution21.py:152:13: C0303: Trailing whitespace (trailing-whitespace)
solution21.py:173:129: C0303: Trailing whitespace (trailing-whitespace)
solution21.py:177:214: C0303: Trailing whitespace (trailing-whitespace)
solution21.py:173:0: C0301: Line too long (129/100) (line-too-long)
solution21.py:175:0: C0301: Line too long (151/100) (line-too-long)
solution21.py:177:0: C0301: Line too long (214/100) (line-too-long)
solution21.py:202:17: C0303: Trailing whitespace (trailing-whitespace)
solution21.py:209:0: C0304: Final newline missing (missing-final-newline)
solution21.py:7:0: W0105: String statement has no effect (pointless-string-statement)
solution21.py:20:0: C0103: Argument name "n" doesn't conform to snake_case naming style (invalid-name)
solution21.py:20:0: C0116: Missing function or method docstring (missing-function-docstring)
solution21.py:20:10: W0613: Unused argument 'val' (unused-argument)
solution21.py:24:0: C0103: Argument name "n" doesn't conform to snake_case naming style (invalid-name)
solution21.py:24:0: C0116: Missing function or method docstring (missing-function-docstring)
solution21.py:28:0: C0103: Argument name "n" doesn't conform to snake_case naming style (invalid-name)
solution21.py:28:0: C0116: Missing function or method docstring (missing-function-docstring)
solution21.py:29:4: C0103: Variable name "d" doesn't conform to snake_case naming style (invalid-name)
solution21.py:28:0: R1710: Either all return statements in a function should return an expression, or none of them should. (inconsistent-return-statements)
solution21.py:36:0: C0103: Argument name "n" doesn't conform to snake_case naming style (invalid-name)
solution21.py:36:0: C0116: Missing function or method docstring (missing-function-docstring)
solution21.py:37:4: C0103: Variable name "d" doesn't conform to snake_case naming style (invalid-name)
solution21.py:40:12: C0103: Variable name "v" doesn't conform to snake_case naming style (invalid-name)
solution21.py:52:0: W0105: String statement has no effect (pointless-string-statement)
solution21.py:57:0: W0105: String statement has no effect (pointless-string-statement)
solution21.py:66:0: C0103: Constant name "size" doesn't conform to UPPER_CASE naming style (invalid-name)
solution21.py:68:0: C0103: Constant name "collision" doesn't conform to UPPER_CASE naming style (invalid-name)
solution21.py:70:0: C0116: Missing function or method docstring (missing-function-docstring)
solution21.py:71:4: W0603: Using the global statement (global-statement)
solution21.py:71:4: C0103: Constant name "size" doesn't conform to UPPER_CASE naming style (invalid-name)
solution21.py:71:4: C0103: Constant name "table" doesn't conform to UPPER_CASE naming style (invalid-name)
solution21.py:71:4: C0103: Constant name "collision" doesn't conform to UPPER_CASE naming style (invalid-name)
solution21.py:76:0: C0116: Missing function or method docstring (missing-function-docstring)
solution21.py:76:16: W0613: Unused argument 'val' (unused-argument)
solution21.py:84:0: C0116: Missing function or method docstring (missing-function-docstring)
solution21.py:84:11: W0613: Unused argument 'val' (unused-argument)
solution21.py:90:0: C0116: Missing function or method docstring (missing-function-docstring)
solution21.py:91:4: C0103: Variable name "d" doesn't conform to snake_case naming style (invalid-name)
solution21.py:90:12: W0613: Unused argument 'val' (unused-argument)
solution21.py:91:4: W0612: Unused variable 'd' (unused-variable)
solution21.py:119:0: W0105: String statement has no effect (pointless-string-statement)
solution21.py:141:0: C0413: Import "import turtle" should be placed at the top of the module (wrong-import-position)
solution21.py:147:4: W0621: Redefining name 'collision' from outer scope (line 68) (redefined-outer-name)
solution21.py:144:0: C0103: Argument name "li" doesn't conform to snake_case naming style (invalid-name)
solution21.py:144:0: C0116: Missing function or method docstring (missing-function-docstring)
solution21.py:149:8: R1705: Unnecessary "else" after "return" (no-else-return)
solution21.py:159:0: C0103: Constant name "b" doesn't conform to UPPER_CASE naming style (invalid-name)
solution21.py:161:0: C0103: Constant name "b" doesn't conform to UPPER_CASE naming style (invalid-name)
solution21.py:163:0: C0103: Constant name "b" doesn't conform to UPPER_CASE naming style (invalid-name)
solution21.py:167:0: W0105: String statement has no effect (pointless-string-statement)
solution21.py:172:0: W0105: String statement has no effect (pointless-string-statement)
solution21.py:198:0: C0103: Argument name "li" doesn't conform to snake_case naming style (invalid-name)
solution21.py:198:0: C0116: Missing function or method docstring (missing-function-docstring)
solution21.py:198:12: W0613: Unused argument 'li' (unused-argument)
solution21.py:198:16: W0613: Unused argument 'target' (unused-argument)
solution21.py:204:0: E1111: Assigning result of a function call, where the function has no return (assignment-from-no-return)
solution21.py:204:0: C0103: Constant name "ans" doesn't conform to UPPER_CASE naming style (invalid-name)
solution21.py:206:0: E1111: Assigning result of a function call, where the function has no return (assignment-from-no-return)
solution21.py:206:0: C0103: Constant name "ans" doesn't conform to UPPER_CASE naming style (invalid-name)
solution21.py:208:0: E1111: Assigning result of a function call, where the function has no return (assignment-from-no-return)
solution21.py:208:0: C0103: Constant name "ans" doesn't conform to UPPER_CASE naming style (invalid-name)
solution21.py:141:0: W0611: Unused import turtle (unused-import)
************* Module solution22
solution22.py:16:0: C0301: Line too long (115/100) (line-too-long)
solution22.py:40:0: C0303: Trailing whitespace (trailing-whitespace)
solution22.py:45:0: C0303: Trailing whitespace (trailing-whitespace)
solution22.py:49:0: C0303: Trailing whitespace (trailing-whitespace)
solution22.py:54:0: C0303: Trailing whitespace (trailing-whitespace)
solution22.py:58:0: C0303: Trailing whitespace (trailing-whitespace)
solution22.py:61:0: C0303: Trailing whitespace (trailing-whitespace)
solution22.py:64:0: C0303: Trailing whitespace (trailing-whitespace)
solution22.py:77:0: C0303: Trailing whitespace (trailing-whitespace)
solution22.py:95:0: C0303: Trailing whitespace (trailing-whitespace)
solution22.py:96:0: C0303: Trailing whitespace (trailing-whitespace)
solution22.py:97:0: C0303: Trailing whitespace (trailing-whitespace)
solution22.py:101:86: C0303: Trailing whitespace (trailing-whitespace)
solution22.py:102:74: C0303: Trailing whitespace (trailing-whitespace)
solution22.py:120:0: C0301: Line too long (157/100) (line-too-long)
solution22.py:205:23: C0303: Trailing whitespace (trailing-whitespace)
solution22.py:205:0: C0325: Unnecessary parens after 'if' keyword (superfluous-parens)
solution22.py:208:24: C0303: Trailing whitespace (trailing-whitespace)
solution22.py:217:0: C0303: Trailing whitespace (trailing-whitespace)
solution22.py:222:22: C0303: Trailing whitespace (trailing-whitespace)
solution22.py:8:0: W0105: String statement has no effect (pointless-string-statement)
solution22.py:15:0: W0105: String statement has no effect (pointless-string-statement)
solution22.py:31:0: C0413: Import "import copy" should be placed at the top of the module (wrong-import-position)
solution22.py:35:0: C0116: Missing function or method docstring (missing-function-docstring)
solution22.py:41:0: C0116: Missing function or method docstring (missing-function-docstring)
solution22.py:55:0: C0116: Missing function or method docstring (missing-function-docstring)
solution22.py:55:0: R1710: Either all return statements in a function should return an expression, or none of them should. (inconsistent-return-statements)
solution22.py:62:0: C0116: Missing function or method docstring (missing-function-docstring)
solution22.py:65:0: C0116: Missing function or method docstring (missing-function-docstring)
solution22.py:78:0: C0116: Missing function or method docstring (missing-function-docstring)
solution22.py:89:16: C0103: Variable name "n" doesn't conform to snake_case naming style (invalid-name)
solution22.py:91:4: R1703: The if statement can be replaced with 'return bool(test)' (simplifiable-if-statement)
solution22.py:91:4: R1705: Unnecessary "else" after "return" (no-else-return)
solution22.py:106:0: C0103: Constant name "f" doesn't conform to UPPER_CASE naming style (invalid-name)
solution22.py:108:0: C0103: Constant name "f" doesn't conform to UPPER_CASE naming style (invalid-name)
solution22.py:112:0: W0105: String statement has no effect (pointless-string-statement)
solution22.py:119:0: W0105: String statement has no effect (pointless-string-statement)
solution22.py:134:0: W0404: Reimport 'copy' (imported line 31) (reimported)
solution22.py:134:0: C0413: Import "import copy" should be placed at the top of the module (wrong-import-position)
solution22.py:138:0: C0116: Missing function or method docstring (missing-function-docstring)
solution22.py:149:0: C0116: Missing function or method docstring (missing-function-docstring)
solution22.py:149:0: R1710: Either all return statements in a function should return an expression, or none of them should. (inconsistent-return-statements)
solution22.py:155:0: C0116: Missing function or method docstring (missing-function-docstring)
solution22.py:158:0: C0116: Missing function or method docstring (missing-function-docstring)
solution22.py:171:0: C0116: Missing function or method docstring (missing-function-docstring)
solution22.py:186:8: C0103: Variable name "n" doesn't conform to snake_case naming style (invalid-name)
solution22.py:198:12: C0103: Variable name "n" doesn't conform to snake_case naming style (invalid-name)
solution22.py:213:8: W0612: Unused variable 'neighbors' (unused-variable)
************* Module solution23
solution23.py:16:0: C0301: Line too long (115/100) (line-too-long)
solution23.py:40:0: C0303: Trailing whitespace (trailing-whitespace)
solution23.py:45:0: C0303: Trailing whitespace (trailing-whitespace)
solution23.py:49:0: C0303: Trailing whitespace (trailing-whitespace)
solution23.py:54:0: C0303: Trailing whitespace (trailing-whitespace)
solution23.py:58:0: C0303: Trailing whitespace (trailing-whitespace)
solution23.py:61:0: C0303: Trailing whitespace (trailing-whitespace)
solution23.py:64:0: C0303: Trailing whitespace (trailing-whitespace)
solution23.py:77:0: C0303: Trailing whitespace (trailing-whitespace)
solution23.py:82:0: C0303: Trailing whitespace (trailing-whitespace)
solution23.py:100:0: C0303: Trailing whitespace (trailing-whitespace)
solution23.py:101:0: C0303: Trailing whitespace (trailing-whitespace)
solution23.py:105:86: C0303: Trailing whitespace (trailing-whitespace)
solution23.py:106:74: C0303: Trailing whitespace (trailing-whitespace)
solution23.py:124:0: C0301: Line too long (157/100) (line-too-long)
solution23.py:210:23: C0303: Trailing whitespace (trailing-whitespace)
solution23.py:210:0: C0325: Unnecessary parens after 'if' keyword (superfluous-parens)
solution23.py:213:24: C0303: Trailing whitespace (trailing-whitespace)
solution23.py:226:0: C0303: Trailing whitespace (trailing-whitespace)
solution23.py:227:0: C0303: Trailing whitespace (trailing-whitespace)
solution23.py:228:0: C0303: Trailing whitespace (trailing-whitespace)
solution23.py:233:0: C0304: Final newline missing (missing-final-newline)
solution23.py:8:0: W0105: String statement has no effect (pointless-string-statement)
solution23.py:15:0: W0105: String statement has no effect (pointless-string-statement)
solution23.py:31:0: C0413: Import "import copy" should be placed at the top of the module (wrong-import-position)
solution23.py:35:0: C0116: Missing function or method docstring (missing-function-docstring)
solution23.py:41:0: C0116: Missing function or method docstring (missing-function-docstring)
solution23.py:55:0: C0116: Missing function or method docstring (missing-function-docstring)
solution23.py:55:0: R1710: Either all return statements in a function should return an expression, or none of them should. (inconsistent-return-statements)
solution23.py:62:0: C0116: Missing function or method docstring (missing-function-docstring)
solution23.py:65:0: C0116: Missing function or method docstring (missing-function-docstring)
solution23.py:78:0: C0116: Missing function or method docstring (missing-function-docstring)
solution23.py:89:8: R1724: Unnecessary "else" after "continue" (no-else-continue)
solution23.py:110:0: C0103: Constant name "f" doesn't conform to UPPER_CASE naming style (invalid-name)
solution23.py:112:0: C0103: Constant name "f" doesn't conform to UPPER_CASE naming style (invalid-name)
solution23.py:116:0: W0105: String statement has no effect (pointless-string-statement)
solution23.py:123:0: W0105: String statement has no effect (pointless-string-statement)
solution23.py:138:0: W0404: Reimport 'copy' (imported line 31) (reimported)
solution23.py:138:0: C0413: Import "import copy" should be placed at the top of the module (wrong-import-position)
solution23.py:142:0: C0116: Missing function or method docstring (missing-function-docstring)
solution23.py:153:0: C0116: Missing function or method docstring (missing-function-docstring)
solution23.py:153:0: R1710: Either all return statements in a function should return an expression, or none of them should. (inconsistent-return-statements)
solution23.py:159:0: C0116: Missing function or method docstring (missing-function-docstring)
solution23.py:162:0: C0116: Missing function or method docstring (missing-function-docstring)
solution23.py:176:0: C0116: Missing function or method docstring (missing-function-docstring)
solution23.py:193:8: C0103: Variable name "n" doesn't conform to snake_case naming style (invalid-name)
solution23.py:204:12: C0103: Variable name "n" doesn't conform to snake_case naming style (invalid-name)
************* Module solution24
solution24.py:9:187: C0303: Trailing whitespace (trailing-whitespace)
solution24.py:9:0: C0301: Line too long (187/100) (line-too-long)
solution24.py:13:0: C0301: Line too long (140/100) (line-too-long)
solution24.py:26:38: C0303: Trailing whitespace (trailing-whitespace)
solution24.py:28:0: C0301: Line too long (216/100) (line-too-long)
solution24.py:45:0: C0301: Line too long (115/100) (line-too-long)
solution24.py:47:0: C0303: Trailing whitespace (trailing-whitespace)
solution24.py:69:0: C0303: Trailing whitespace (trailing-whitespace)
solution24.py:83:0: C0301: Line too long (178/100) (line-too-long)
solution24.py:92:0: C0303: Trailing whitespace (trailing-whitespace)
solution24.py:107:0: C0301: Line too long (108/100) (line-too-long)
solution24.py:110:60: C0303: Trailing whitespace (trailing-whitespace)
solution24.py:112:33: C0303: Trailing whitespace (trailing-whitespace)
solution24.py:119:0: C0303: Trailing whitespace (trailing-whitespace)
solution24.py:156:0: C0301: Line too long (214/100) (line-too-long)
solution24.py:180:22: C0303: Trailing whitespace (trailing-whitespace)
solution24.py:181:75: C0303: Trailing whitespace (trailing-whitespace)
solution24.py:183:0: C0303: Trailing whitespace (trailing-whitespace)
solution24.py:197:0: C0301: Line too long (178/100) (line-too-long)
solution24.py:198:0: C0301: Line too long (165/100) (line-too-long)
solution24.py:218:27: C0303: Trailing whitespace (trailing-whitespace)
solution24.py:219:27: C0303: Trailing whitespace (trailing-whitespace)
solution24.py:220:27: C0303: Trailing whitespace (trailing-whitespace)
solution24.py:222:42: C0303: Trailing whitespace (trailing-whitespace)
solution24.py:223:42: C0303: Trailing whitespace (trailing-whitespace)
solution24.py:224:42: C0303: Trailing whitespace (trailing-whitespace)
solution24.py:225:42: C0303: Trailing whitespace (trailing-whitespace)
solution24.py:226:42: C0303: Trailing whitespace (trailing-whitespace)
solution24.py:227:42: C0303: Trailing whitespace (trailing-whitespace)
solution24.py:228:42: C0303: Trailing whitespace (trailing-whitespace)
solution24.py:7:0: W0105: String statement has no effect (pointless-string-statement)
solution24.py:25:0: W0105: String statement has no effect (pointless-string-statement)
solution24.py:35:0: C0413: Import "import itertools" should be placed at the top of the module (wrong-import-position)
solution24.py:37:0: C0103: Argument name "li" doesn't conform to snake_case naming style (invalid-name)
solution24.py:37:0: C0116: Missing function or method docstring (missing-function-docstring)
solution24.py:37:0: R1710: Either all return statements in a function should return an expression, or none of them should. (inconsistent-return-statements)
solution24.py:78:0: W0105: String statement has no effect (pointless-string-statement)
solution24.py:87:0: C0413: Import "import copy" should be placed at the top of the module (wrong-import-position)
solution24.py:88:0: C0116: Missing function or method docstring (missing-function-docstring)
solution24.py:98:4: C0103: Variable name "kk" doesn't conform to snake_case naming style (invalid-name)
solution24.py:105:12: C0103: Variable name "n" doesn't conform to snake_case naming style (invalid-name)
solution24.py:106:12: C0103: Variable name "x" doesn't conform to snake_case naming style (invalid-name)
solution24.py:108:12: R1723: Unnecessary "else" after "break" (no-else-break)
solution24.py:121:8: C0103: Variable name "kk" doesn't conform to snake_case naming style (invalid-name)
solution24.py:105:12: W0612: Unused variable 'n' (unused-variable)
solution24.py:153:0: W0105: String statement has no effect (pointless-string-statement)
solution24.py:160:0: C0103: Constant name "bag1" doesn't conform to UPPER_CASE naming style (invalid-name)
solution24.py:167:0: C0103: Constant name "bag2" doesn't conform to UPPER_CASE naming style (invalid-name)
solution24.py:178:0: C0116: Missing function or method docstring (missing-function-docstring)
solution24.py:187:4: R1702: Too many nested blocks (6/5) (too-many-nested-blocks)
solution24.py:182:4: W0612: Unused variable 'prev_max' (unused-variable)
solution24.py:205:8: W0621: Redefining name 's' from outer scope (line 146) (redefined-outer-name)
solution24.py:203:0: C0116: Missing function or method docstring (missing-function-docstring)
solution24.py:204:8: C0103: Variable name "r" doesn't conform to snake_case naming style (invalid-name)
solution24.py:205:8: C0103: Variable name "s" doesn't conform to snake_case naming style (invalid-name)
solution24.py:206:12: C0103: Variable name "c" doesn't conform to snake_case naming style (invalid-name)
solution24.py:207:12: C0103: Variable name "s" doesn't conform to snake_case naming style (invalid-name)
solution24.py:87:0: W0611: Unused import copy (unused-import)
************* Module solution25
solution25.py:9:187: C0303: Trailing whitespace (trailing-whitespace)
solution25.py:9:0: C0301: Line too long (187/100) (line-too-long)
solution25.py:13:0: C0301: Line too long (140/100) (line-too-long)
solution25.py:26:38: C0303: Trailing whitespace (trailing-whitespace)
solution25.py:28:0: C0301: Line too long (216/100) (line-too-long)
solution25.py:41:0: C0303: Trailing whitespace (trailing-whitespace)
solution25.py:43:0: C0301: Line too long (104/100) (line-too-long)
solution25.py:73:0: C0303: Trailing whitespace (trailing-whitespace)
solution25.py:86:0: C0301: Line too long (178/100) (line-too-long)
solution25.py:117:0: C0303: Trailing whitespace (trailing-whitespace)
solution25.py:154:0: C0301: Line too long (214/100) (line-too-long)
solution25.py:178:22: C0303: Trailing whitespace (trailing-whitespace)
solution25.py:179:75: C0303: Trailing whitespace (trailing-whitespace)
solution25.py:181:0: C0303: Trailing whitespace (trailing-whitespace)
solution25.py:187:38: C0303: Trailing whitespace (trailing-whitespace)
solution25.py:219:27: C0303: Trailing whitespace (trailing-whitespace)
solution25.py:220:27: C0303: Trailing whitespace (trailing-whitespace)
solution25.py:221:27: C0303: Trailing whitespace (trailing-whitespace)
solution25.py:223:42: C0303: Trailing whitespace (trailing-whitespace)
solution25.py:224:42: C0303: Trailing whitespace (trailing-whitespace)
solution25.py:225:42: C0303: Trailing whitespace (trailing-whitespace)
solution25.py:226:42: C0303: Trailing whitespace (trailing-whitespace)
solution25.py:227:42: C0303: Trailing whitespace (trailing-whitespace)
solution25.py:228:42: C0303: Trailing whitespace (trailing-whitespace)
solution25.py:229:42: C0303: Trailing whitespace (trailing-whitespace)
solution25.py:7:0: W0105: String statement has no effect (pointless-string-statement)
solution25.py:25:0: W0105: String statement has no effect (pointless-string-statement)
solution25.py:35:0: C0413: Import "import itertools" should be placed at the top of the module (wrong-import-position)
solution25.py:37:0: C0103: Argument name "li" doesn't conform to snake_case naming style (invalid-name)
solution25.py:37:0: C0116: Missing function or method docstring (missing-function-docstring)
solution25.py:43:8: C0103: Variable name "r" doesn't conform to snake_case naming style (invalid-name)
solution25.py:45:12: C0103: Variable name "tu" doesn't conform to snake_case naming style (invalid-name)
solution25.py:47:16: C0103: Variable name "l" doesn't conform to snake_case naming style (invalid-name)
solution25.py:37:0: R1710: Either all return statements in a function should return an expression, or none of them should. (inconsistent-return-statements)
solution25.py:81:0: W0105: String statement has no effect (pointless-string-statement)
solution25.py:90:0: C0413: Import "import copy" should be placed at the top of the module (wrong-import-position)
solution25.py:91:0: C0116: Missing function or method docstring (missing-function-docstring)
solution25.py:96:4: C0103: Variable name "kk" doesn't conform to snake_case naming style (invalid-name)
solution25.py:104:8: C0200: Consider using enumerate instead of iterating with range and len (consider-using-enumerate)
solution25.py:119:8: C0103: Variable name "kk" doesn't conform to snake_case naming style (invalid-name)
solution25.py:151:0: W0105: String statement has no effect (pointless-string-statement)
solution25.py:158:0: C0103: Constant name "bag1" doesn't conform to UPPER_CASE naming style (invalid-name)
solution25.py:165:0: C0103: Constant name "bag2" doesn't conform to UPPER_CASE naming style (invalid-name)
solution25.py:176:0: C0116: Missing function or method docstring (missing-function-docstring)
solution25.py:206:8: W0621: Redefining name 's' from outer scope (line 144) (redefined-outer-name)
solution25.py:204:0: C0116: Missing function or method docstring (missing-function-docstring)
solution25.py:205:8: C0103: Variable name "r" doesn't conform to snake_case naming style (invalid-name)
solution25.py:206:8: C0103: Variable name "s" doesn't conform to snake_case naming style (invalid-name)
solution25.py:207:12: C0103: Variable name "c" doesn't conform to snake_case naming style (invalid-name)
solution25.py:208:12: C0103: Variable name "s" doesn't conform to snake_case naming style (invalid-name)
solution25.py:90:0: W0611: Unused import copy (unused-import)
************* Module solution26
solution26.py:16:0: C0301: Line too long (115/100) (line-too-long)
solution26.py:40:0: C0303: Trailing whitespace (trailing-whitespace)
solution26.py:45:0: C0303: Trailing whitespace (trailing-whitespace)
solution26.py:49:0: C0303: Trailing whitespace (trailing-whitespace)
solution26.py:54:0: C0303: Trailing whitespace (trailing-whitespace)
solution26.py:58:0: C0303: Trailing whitespace (trailing-whitespace)
solution26.py:61:0: C0303: Trailing whitespace (trailing-whitespace)
solution26.py:64:0: C0303: Trailing whitespace (trailing-whitespace)
solution26.py:78:0: C0303: Trailing whitespace (trailing-whitespace)
solution26.py:89:0: C0301: Line too long (136/100) (line-too-long)
solution26.py:94:0: C0301: Line too long (166/100) (line-too-long)
solution26.py:97:16: C0303: Trailing whitespace (trailing-whitespace)
solution26.py:101:86: C0303: Trailing whitespace (trailing-whitespace)
solution26.py:102:74: C0303: Trailing whitespace (trailing-whitespace)
solution26.py:120:0: C0301: Line too long (157/100) (line-too-long)
solution26.py:205:23: C0303: Trailing whitespace (trailing-whitespace)
solution26.py:205:0: C0325: Unnecessary parens after 'if' keyword (superfluous-parens)
solution26.py:208:24: C0303: Trailing whitespace (trailing-whitespace)
solution26.py:215:0: C0301: Line too long (101/100) (line-too-long)
solution26.py:217:0: C0301: Line too long (107/100) (line-too-long)
solution26.py:8:0: W0105: String statement has no effect (pointless-string-statement)
solution26.py:15:0: W0105: String statement has no effect (pointless-string-statement)
solution26.py:31:0: C0413: Import "import copy" should be placed at the top of the module (wrong-import-position)
solution26.py:35:0: C0116: Missing function or method docstring (missing-function-docstring)
solution26.py:41:0: C0116: Missing function or method docstring (missing-function-docstring)
solution26.py:55:0: C0116: Missing function or method docstring (missing-function-docstring)
solution26.py:55:0: R1710: Either all return statements in a function should return an expression, or none of them should. (inconsistent-return-statements)
solution26.py:62:0: C0116: Missing function or method docstring (missing-function-docstring)
solution26.py:65:0: C0116: Missing function or method docstring (missing-function-docstring)
solution26.py:79:0: C0116: Missing function or method docstring (missing-function-docstring)
solution26.py:106:0: C0103: Constant name "f" doesn't conform to UPPER_CASE naming style (invalid-name)
solution26.py:108:0: C0103: Constant name "f" doesn't conform to UPPER_CASE naming style (invalid-name)
solution26.py:112:0: W0105: String statement has no effect (pointless-string-statement)
solution26.py:119:0: W0105: String statement has no effect (pointless-string-statement)
solution26.py:134:0: W0404: Reimport 'copy' (imported line 31) (reimported)
solution26.py:134:0: C0413: Import "import copy" should be placed at the top of the module (wrong-import-position)
solution26.py:138:0: C0116: Missing function or method docstring (missing-function-docstring)
solution26.py:149:0: C0116: Missing function or method docstring (missing-function-docstring)
solution26.py:149:0: R1710: Either all return statements in a function should return an expression, or none of them should. (inconsistent-return-statements)
solution26.py:155:0: C0116: Missing function or method docstring (missing-function-docstring)
solution26.py:158:0: C0116: Missing function or method docstring (missing-function-docstring)
solution26.py:171:0: C0116: Missing function or method docstring (missing-function-docstring)
solution26.py:186:8: C0103: Variable name "n" doesn't conform to snake_case naming style (invalid-name)
solution26.py:197:12: C0103: Variable name "n" doesn't conform to snake_case naming style (invalid-name)
************* Module solution27
solution27.py:10:136: C0303: Trailing whitespace (trailing-whitespace)
solution27.py:10:0: C0301: Line too long (136/100) (line-too-long)
solution27.py:12:0: C0301: Line too long (169/100) (line-too-long)
solution27.py:16:0: C0301: Line too long (385/100) (line-too-long)
solution27.py:26:0: C0325: Unnecessary parens after 'return' keyword (superfluous-parens)
solution27.py:29:0: C0301: Line too long (232/100) (line-too-long)
solution27.py:35:237: C0303: Trailing whitespace (trailing-whitespace)
solution27.py:35:0: C0301: Line too long (237/100) (line-too-long)
solution27.py:37:0: C0303: Trailing whitespace (trailing-whitespace)
solution27.py:42:25: C0303: Trailing whitespace (trailing-whitespace)
solution27.py:46:25: C0303: Trailing whitespace (trailing-whitespace)
solution27.py:51:0: C0301: Line too long (142/100) (line-too-long)
solution27.py:52:0: C0301: Line too long (181/100) (line-too-long)
solution27.py:53:0: C0301: Line too long (168/100) (line-too-long)
solution27.py:55:0: C0301: Line too long (248/100) (line-too-long)
solution27.py:71:51: C0303: Trailing whitespace (trailing-whitespace)
solution27.py:76:0: C0303: Trailing whitespace (trailing-whitespace)
solution27.py:82:0: C0303: Trailing whitespace (trailing-whitespace)
solution27.py:84:0: C0301: Line too long (237/100) (line-too-long)
solution27.py:86:49: C0303: Trailing whitespace (trailing-whitespace)
solution27.py:115:0: C0301: Line too long (137/100) (line-too-long)
solution27.py:160:129: C0303: Trailing whitespace (trailing-whitespace)
solution27.py:164:214: C0303: Trailing whitespace (trailing-whitespace)
solution27.py:160:0: C0301: Line too long (129/100) (line-too-long)
solution27.py:162:0: C0301: Line too long (151/100) (line-too-long)
solution27.py:164:0: C0301: Line too long (214/100) (line-too-long)
solution27.py:189:17: C0303: Trailing whitespace (trailing-whitespace)
solution27.py:196:0: C0304: Final newline missing (missing-final-newline)
solution27.py:7:0: W0105: String statement has no effect (pointless-string-statement)
solution27.py:20:0: C0103: Argument name "n" doesn't conform to snake_case naming style (invalid-name)
solution27.py:20:0: C0116: Missing function or method docstring (missing-function-docstring)
solution27.py:20:10: W0613: Unused argument 'val' (unused-argument)
solution27.py:20:15: W0613: Unused argument 'n' (unused-argument)
solution27.py:24:0: C0103: Argument name "n" doesn't conform to snake_case naming style (invalid-name)
solution27.py:24:0: C0116: Missing function or method docstring (missing-function-docstring)
solution27.py:24:15: W0613: Unused argument 'n' (unused-argument)
solution27.py:30:4: W0622: Redefining built-in 'list' (redefined-builtin)
solution27.py:28:0: C0103: Argument name "n" doesn't conform to snake_case naming style (invalid-name)
solution27.py:28:0: C0116: Missing function or method docstring (missing-function-docstring)
solution27.py:29:4: C0103: Variable name "d" doesn't conform to snake_case naming style (invalid-name)
solution27.py:28:15: W0613: Unused argument 'n' (unused-argument)
solution27.py:34:0: C0103: Argument name "n" doesn't conform to snake_case naming style (invalid-name)
solution27.py:34:0: C0116: Missing function or method docstring (missing-function-docstring)
solution27.py:35:4: C0103: Variable name "d" doesn't conform to snake_case naming style (invalid-name)
solution27.py:34:10: W0613: Unused argument 'val' (unused-argument)
solution27.py:34:15: W0613: Unused argument 'n' (unused-argument)
solution27.py:35:4: W0612: Unused variable 'd' (unused-variable)
solution27.py:45:0: W0105: String statement has no effect (pointless-string-statement)
solution27.py:50:0: W0105: String statement has no effect (pointless-string-statement)
solution27.py:59:0: C0103: Constant name "size" doesn't conform to UPPER_CASE naming style (invalid-name)
solution27.py:61:0: C0103: Constant name "collision" doesn't conform to UPPER_CASE naming style (invalid-name)
solution27.py:63:0: C0116: Missing function or method docstring (missing-function-docstring)
solution27.py:64:4: W0603: Using the global statement (global-statement)
solution27.py:64:4: C0103: Constant name "size" doesn't conform to UPPER_CASE naming style (invalid-name)
solution27.py:64:4: C0103: Constant name "table" doesn't conform to UPPER_CASE naming style (invalid-name)
solution27.py:64:4: C0103: Constant name "collision" doesn't conform to UPPER_CASE naming style (invalid-name)
solution27.py:69:0: C0116: Missing function or method docstring (missing-function-docstring)
solution27.py:69:16: W0613: Unused argument 'val' (unused-argument)
solution27.py:77:0: C0116: Missing function or method docstring (missing-function-docstring)
solution27.py:77:11: W0613: Unused argument 'val' (unused-argument)
solution27.py:83:0: C0116: Missing function or method docstring (missing-function-docstring)
solution27.py:84:4: C0103: Variable name "d" doesn't conform to snake_case naming style (invalid-name)
solution27.py:83:12: W0613: Unused argument 'val' (unused-argument)
solution27.py:84:4: W0612: Unused variable 'd' (unused-variable)
solution27.py:112:0: W0105: String statement has no effect (pointless-string-statement)
solution27.py:134:0: C0103: Argument name "li" doesn't conform to snake_case naming style (invalid-name)
solution27.py:134:0: C0116: Missing function or method docstring (missing-function-docstring)
solution27.py:138:4: R1705: Unnecessary "else" after "return" (no-else-return)
solution27.py:146:0: C0103: Constant name "b" doesn't conform to UPPER_CASE naming style (invalid-name)
solution27.py:148:0: C0103: Constant name "b" doesn't conform to UPPER_CASE naming style (invalid-name)
solution27.py:150:0: C0103: Constant name "b" doesn't conform to UPPER_CASE naming style (invalid-name)
solution27.py:154:0: W0105: String statement has no effect (pointless-string-statement)
solution27.py:159:0: W0105: String statement has no effect (pointless-string-statement)
solution27.py:185:0: C0103: Argument name "li" doesn't conform to snake_case naming style (invalid-name)
solution27.py:185:0: C0116: Missing function or method docstring (missing-function-docstring)
solution27.py:185:12: W0613: Unused argument 'li' (unused-argument)
solution27.py:185:16: W0613: Unused argument 'target' (unused-argument)
solution27.py:191:0: E1111: Assigning result of a function call, where the function has no return (assignment-from-no-return)
solution27.py:191:0: C0103: Constant name "ans" doesn't conform to UPPER_CASE naming style (invalid-name)
solution27.py:193:0: E1111: Assigning result of a function call, where the function has no return (assignment-from-no-return)
solution27.py:193:0: C0103: Constant name "ans" doesn't conform to UPPER_CASE naming style (invalid-name)
solution27.py:195:0: E1111: Assigning result of a function call, where the function has no return (assignment-from-no-return)
solution27.py:195:0: C0103: Constant name "ans" doesn't conform to UPPER_CASE naming style (invalid-name)
************* Module solution28
solution28.py:16:0: C0301: Line too long (115/100) (line-too-long)
solution28.py:40:0: C0303: Trailing whitespace (trailing-whitespace)
solution28.py:45:0: C0303: Trailing whitespace (trailing-whitespace)
solution28.py:49:0: C0303: Trailing whitespace (trailing-whitespace)
solution28.py:54:0: C0303: Trailing whitespace (trailing-whitespace)
solution28.py:58:0: C0303: Trailing whitespace (trailing-whitespace)
solution28.py:61:0: C0303: Trailing whitespace (trailing-whitespace)
solution28.py:64:0: C0303: Trailing whitespace (trailing-whitespace)
solution28.py:78:0: C0303: Trailing whitespace (trailing-whitespace)
solution28.py:92:0: C0303: Trailing whitespace (trailing-whitespace)
solution28.py:93:0: C0325: Unnecessary parens after 'while' keyword (superfluous-parens)
solution28.py:101:0: C0303: Trailing whitespace (trailing-whitespace)
solution28.py:106:86: C0303: Trailing whitespace (trailing-whitespace)
solution28.py:107:74: C0303: Trailing whitespace (trailing-whitespace)
solution28.py:125:0: C0301: Line too long (157/100) (line-too-long)
solution28.py:175:0: C0303: Trailing whitespace (trailing-whitespace)
solution28.py:208:0: C0303: Trailing whitespace (trailing-whitespace)
solution28.py:211:23: C0303: Trailing whitespace (trailing-whitespace)
solution28.py:211:0: C0325: Unnecessary parens after 'if' keyword (superfluous-parens)
solution28.py:214:24: C0303: Trailing whitespace (trailing-whitespace)
solution28.py:225:0: C0303: Trailing whitespace (trailing-whitespace)
solution28.py:229:22: C0303: Trailing whitespace (trailing-whitespace)
solution28.py:8:0: W0105: String statement has no effect (pointless-string-statement)
solution28.py:15:0: W0105: String statement has no effect (pointless-string-statement)
solution28.py:31:0: C0413: Import "import copy" should be placed at the top of the module (wrong-import-position)
solution28.py:35:0: C0116: Missing function or method docstring (missing-function-docstring)
solution28.py:41:0: C0116: Missing function or method docstring (missing-function-docstring)
solution28.py:55:0: C0116: Missing function or method docstring (missing-function-docstring)
solution28.py:55:0: R1710: Either all return statements in a function should return an expression, or none of them should. (inconsistent-return-statements)
solution28.py:62:0: C0116: Missing function or method docstring (missing-function-docstring)
solution28.py:65:0: C0116: Missing function or method docstring (missing-function-docstring)
solution28.py:86:4: W0622: Redefining built-in 'dict' (redefined-builtin)
solution28.py:79:0: C0116: Missing function or method docstring (missing-function-docstring)
solution28.py:94:8: C0103: Variable name "a" doesn't conform to snake_case naming style (invalid-name)
solution28.py:95:8: C0103: Variable name "n" doesn't conform to snake_case naming style (invalid-name)
solution28.py:97:15: C0121: Comparison 'dict[i] == False' should be 'dict[i] is False' if checking for the singleton value False, or 'not dict[i]' if testing for falsiness (singleton-comparison)
solution28.py:102:4: W0101: Unreachable code (unreachable)
solution28.py:117:0: W0105: String statement has no effect (pointless-string-statement)
solution28.py:124:0: W0105: String statement has no effect (pointless-string-statement)
solution28.py:139:0: W0404: Reimport 'copy' (imported line 31) (reimported)
solution28.py:139:0: C0413: Import "import copy" should be placed at the top of the module (wrong-import-position)
solution28.py:143:0: C0116: Missing function or method docstring (missing-function-docstring)
solution28.py:154:0: C0116: Missing function or method docstring (missing-function-docstring)
solution28.py:154:0: R1710: Either all return statements in a function should return an expression, or none of them should. (inconsistent-return-statements)
solution28.py:160:0: C0116: Missing function or method docstring (missing-function-docstring)
solution28.py:163:0: C0116: Missing function or method docstring (missing-function-docstring)
solution28.py:177:0: C0116: Missing function or method docstring (missing-function-docstring)
solution28.py:192:8: C0103: Variable name "n" doesn't conform to snake_case naming style (invalid-name)
solution28.py:203:12: C0103: Variable name "n" doesn't conform to snake_case naming style (invalid-name)
************* Module solution29
solution29.py:16:0: C0301: Line too long (115/100) (line-too-long)
solution29.py:40:0: C0303: Trailing whitespace (trailing-whitespace)
solution29.py:45:0: C0303: Trailing whitespace (trailing-whitespace)
solution29.py:49:0: C0303: Trailing whitespace (trailing-whitespace)
solution29.py:54:0: C0303: Trailing whitespace (trailing-whitespace)
solution29.py:58:0: C0303: Trailing whitespace (trailing-whitespace)
solution29.py:61:0: C0303: Trailing whitespace (trailing-whitespace)
solution29.py:64:0: C0303: Trailing whitespace (trailing-whitespace)
solution29.py:74:0: C0303: Trailing whitespace (trailing-whitespace)
solution29.py:75:0: C0303: Trailing whitespace (trailing-whitespace)
solution29.py:78:0: C0303: Trailing whitespace (trailing-whitespace)
solution29.py:80:0: C0303: Trailing whitespace (trailing-whitespace)
solution29.py:83:0: C0303: Trailing whitespace (trailing-whitespace)
solution29.py:99:0: C0303: Trailing whitespace (trailing-whitespace)
solution29.py:103:86: C0303: Trailing whitespace (trailing-whitespace)
solution29.py:104:74: C0303: Trailing whitespace (trailing-whitespace)
solution29.py:122:0: C0301: Line too long (157/100) (line-too-long)
solution29.py:196:0: C0303: Trailing whitespace (trailing-whitespace)
solution29.py:206:28: C0303: Trailing whitespace (trailing-whitespace)
solution29.py:209:23: C0303: Trailing whitespace (trailing-whitespace)
solution29.py:209:0: C0325: Unnecessary parens after 'if' keyword (superfluous-parens)
solution29.py:212:24: C0303: Trailing whitespace (trailing-whitespace)
solution29.py:223:0: C0303: Trailing whitespace (trailing-whitespace)
solution29.py:227:22: C0303: Trailing whitespace (trailing-whitespace)
solution29.py:8:0: W0105: String statement has no effect (pointless-string-statement)
solution29.py:15:0: W0105: String statement has no effect (pointless-string-statement)
solution29.py:31:0: C0413: Import "import copy" should be placed at the top of the module (wrong-import-position)
solution29.py:35:0: C0116: Missing function or method docstring (missing-function-docstring)
solution29.py:41:0: C0116: Missing function or method docstring (missing-function-docstring)
solution29.py:55:0: C0116: Missing function or method docstring (missing-function-docstring)
solution29.py:55:0: R1710: Either all return statements in a function should return an expression, or none of them should. (inconsistent-return-statements)
solution29.py:62:0: C0116: Missing function or method docstring (missing-function-docstring)
solution29.py:65:0: C0116: Missing function or method docstring (missing-function-docstring)
solution29.py:84:0: C0116: Missing function or method docstring (missing-function-docstring)
solution29.py:91:4: C0103: Variable name "li" doesn't conform to snake_case naming style (invalid-name)
solution29.py:108:0: C0103: Constant name "f" doesn't conform to UPPER_CASE naming style (invalid-name)
solution29.py:110:0: C0103: Constant name "f" doesn't conform to UPPER_CASE naming style (invalid-name)
solution29.py:114:0: W0105: String statement has no effect (pointless-string-statement)
solution29.py:121:0: W0105: String statement has no effect (pointless-string-statement)
solution29.py:136:0: W0404: Reimport 'copy' (imported line 31) (reimported)
solution29.py:136:0: C0413: Import "import copy" should be placed at the top of the module (wrong-import-position)
solution29.py:140:0: C0116: Missing function or method docstring (missing-function-docstring)
solution29.py:151:0: C0116: Missing function or method docstring (missing-function-docstring)
solution29.py:151:0: R1710: Either all return statements in a function should return an expression, or none of them should. (inconsistent-return-statements)
solution29.py:157:0: C0116: Missing function or method docstring (missing-function-docstring)
solution29.py:160:0: C0116: Missing function or method docstring (missing-function-docstring)
solution29.py:174:0: C0116: Missing function or method docstring (missing-function-docstring)
solution29.py:189:8: C0103: Variable name "n" doesn't conform to snake_case naming style (invalid-name)
solution29.py:202:12: C0103: Variable name "n" doesn't conform to snake_case naming style (invalid-name)
solution29.py:218:12: C0103: Variable name "n" doesn't conform to snake_case naming style (invalid-name)
************* Module solution3
solution3.py:10:136: C0303: Trailing whitespace (trailing-whitespace)
solution3.py:10:0: C0301: Line too long (136/100) (line-too-long)
solution3.py:12:0: C0301: Line too long (169/100) (line-too-long)
solution3.py:16:0: C0301: Line too long (385/100) (line-too-long)
solution3.py:29:0: C0301: Line too long (232/100) (line-too-long)
solution3.py:35:0: C0303: Trailing whitespace (trailing-whitespace)
solution3.py:37:237: C0303: Trailing whitespace (trailing-whitespace)
solution3.py:37:0: C0301: Line too long (237/100) (line-too-long)
solution3.py:46:0: C0303: Trailing whitespace (trailing-whitespace)
solution3.py:51:25: C0303: Trailing whitespace (trailing-whitespace)
solution3.py:55:25: C0303: Trailing whitespace (trailing-whitespace)
solution3.py:60:0: C0301: Line too long (142/100) (line-too-long)
solution3.py:61:0: C0301: Line too long (181/100) (line-too-long)
solution3.py:62:0: C0301: Line too long (168/100) (line-too-long)
solution3.py:64:0: C0301: Line too long (248/100) (line-too-long)
solution3.py:80:51: C0303: Trailing whitespace (trailing-whitespace)
solution3.py:90:0: C0303: Trailing whitespace (trailing-whitespace)
solution3.py:101:0: C0303: Trailing whitespace (trailing-whitespace)
solution3.py:103:0: C0301: Line too long (237/100) (line-too-long)
solution3.py:105:49: C0303: Trailing whitespace (trailing-whitespace)
solution3.py:145:0: C0301: Line too long (137/100) (line-too-long)
solution3.py:192:129: C0303: Trailing whitespace (trailing-whitespace)
solution3.py:196:214: C0303: Trailing whitespace (trailing-whitespace)
solution3.py:192:0: C0301: Line too long (129/100) (line-too-long)
solution3.py:194:0: C0301: Line too long (151/100) (line-too-long)
solution3.py:196:0: C0301: Line too long (214/100) (line-too-long)
solution3.py:231:17: C0303: Trailing whitespace (trailing-whitespace)
solution3.py:238:0: C0304: Final newline missing (missing-final-newline)
solution3.py:7:0: W0105: String statement has no effect (pointless-string-statement)
solution3.py:20:0: C0103: Argument name "n" doesn't conform to snake_case naming style (invalid-name)
solution3.py:20:0: C0116: Missing function or method docstring (missing-function-docstring)
solution3.py:20:10: W0613: Unused argument 'val' (unused-argument)
solution3.py:24:0: C0103: Argument name "n" doesn't conform to snake_case naming style (invalid-name)
solution3.py:24:0: C0116: Missing function or method docstring (missing-function-docstring)
solution3.py:28:0: C0103: Argument name "n" doesn't conform to snake_case naming style (invalid-name)
solution3.py:28:0: C0116: Missing function or method docstring (missing-function-docstring)
solution3.py:29:4: C0103: Variable name "d" doesn't conform to snake_case naming style (invalid-name)
solution3.py:28:0: R1710: Either all return statements in a function should return an expression, or none of them should. (inconsistent-return-statements)
solution3.py:36:0: C0103: Argument name "n" doesn't conform to snake_case naming style (invalid-name)
solution3.py:36:0: C0116: Missing function or method docstring (missing-function-docstring)
solution3.py:37:4: C0103: Variable name "d" doesn't conform to snake_case naming style (invalid-name)
solution3.py:40:12: C0103: Variable name "v" doesn't conform to snake_case naming style (invalid-name)
solution3.py:54:0: W0105: String statement has no effect (pointless-string-statement)
solution3.py:59:0: W0105: String statement has no effect (pointless-string-statement)
solution3.py:68:0: C0103: Constant name "size" doesn't conform to UPPER_CASE naming style (invalid-name)
solution3.py:70:0: C0103: Constant name "collision" doesn't conform to UPPER_CASE naming style (invalid-name)
solution3.py:72:0: C0116: Missing function or method docstring (missing-function-docstring)
solution3.py:73:4: W0603: Using the global statement (global-statement)
solution3.py:73:4: C0103: Constant name "size" doesn't conform to UPPER_CASE naming style (invalid-name)
solution3.py:73:4: C0103: Constant name "table" doesn't conform to UPPER_CASE naming style (invalid-name)
solution3.py:73:4: C0103: Constant name "collision" doesn't conform to UPPER_CASE naming style (invalid-name)
solution3.py:78:0: C0116: Missing function or method docstring (missing-function-docstring)
solution3.py:84:4: W0603: Using the global statement (global-statement)
solution3.py:84:4: C0103: Constant name "collision" doesn't conform to UPPER_CASE naming style (invalid-name)
solution3.py:84:4: C0103: Constant name "table" doesn't conform to UPPER_CASE naming style (invalid-name)
solution3.py:85:4: C0103: Variable name "v" doesn't conform to snake_case naming style (invalid-name)
solution3.py:91:0: C0116: Missing function or method docstring (missing-function-docstring)
solution3.py:95:4: C0103: Variable name "v" doesn't conform to snake_case naming style (invalid-name)
solution3.py:97:8: R1703: The if statement can be replaced with 'return bool(test)' (simplifiable-if-statement)
solution3.py:97:8: R1705: Unnecessary "else" after "return" (no-else-return)
solution3.py:102:0: C0116: Missing function or method docstring (missing-function-docstring)
solution3.py:103:4: C0103: Variable name "d" doesn't conform to snake_case naming style (invalid-name)
solution3.py:109:4: C0103: Variable name "n" doesn't conform to snake_case naming style (invalid-name)
solution3.py:111:12: C0103: Variable name "v" doesn't conform to snake_case naming style (invalid-name)
solution3.py:113:16: C0103: Variable name "n" doesn't conform to snake_case naming style (invalid-name)
solution3.py:115:16: C0103: Variable name "n" doesn't conform to snake_case naming style (invalid-name)
solution3.py:116:4: C0103: Variable name "n" doesn't conform to snake_case naming style (invalid-name)
solution3.py:142:0: W0105: String statement has no effect (pointless-string-statement)
solution3.py:167:4: W0621: Redefining name 'collision' from outer scope (line 70) (redefined-outer-name)
solution3.py:164:0: C0103: Argument name "li" doesn't conform to snake_case naming style (invalid-name)
solution3.py:164:0: C0116: Missing function or method docstring (missing-function-docstring)
solution3.py:178:0: C0103: Constant name "b" doesn't conform to UPPER_CASE naming style (invalid-name)
solution3.py:180:0: C0103: Constant name "b" doesn't conform to UPPER_CASE naming style (invalid-name)
solution3.py:182:0: C0103: Constant name "b" doesn't conform to UPPER_CASE naming style (invalid-name)
solution3.py:186:0: W0105: String statement has no effect (pointless-string-statement)
solution3.py:191:0: W0105: String statement has no effect (pointless-string-statement)
solution3.py:217:0: C0103: Argument name "li" doesn't conform to snake_case naming style (invalid-name)
solution3.py:217:0: C0116: Missing function or method docstring (missing-function-docstring)
************* Module solution30
solution30.py:16:0: C0301: Line too long (115/100) (line-too-long)
solution30.py:40:0: C0303: Trailing whitespace (trailing-whitespace)
solution30.py:45:0: C0303: Trailing whitespace (trailing-whitespace)
solution30.py:49:0: C0303: Trailing whitespace (trailing-whitespace)
solution30.py:54:0: C0303: Trailing whitespace (trailing-whitespace)
solution30.py:58:0: C0303: Trailing whitespace (trailing-whitespace)
solution30.py:61:0: C0303: Trailing whitespace (trailing-whitespace)
solution30.py:64:0: C0303: Trailing whitespace (trailing-whitespace)
solution30.py:76:0: C0303: Trailing whitespace (trailing-whitespace)
solution30.py:77:0: C0303: Trailing whitespace (trailing-whitespace)
solution30.py:78:0: C0303: Trailing whitespace (trailing-whitespace)
solution30.py:79:0: C0303: Trailing whitespace (trailing-whitespace)
solution30.py:80:0: C0303: Trailing whitespace (trailing-whitespace)
solution30.py:81:0: C0303: Trailing whitespace (trailing-whitespace)
solution30.py:82:0: C0303: Trailing whitespace (trailing-whitespace)
solution30.py:83:0: C0303: Trailing whitespace (trailing-whitespace)
solution30.py:85:0: C0303: Trailing whitespace (trailing-whitespace)
solution30.py:90:41: C0303: Trailing whitespace (trailing-whitespace)
solution30.py:96:0: C0303: Trailing whitespace (trailing-whitespace)
solution30.py:101:0: C0303: Trailing whitespace (trailing-whitespace)
solution30.py:103:0: C0303: Trailing whitespace (trailing-whitespace)
solution30.py:104:0: C0303: Trailing whitespace (trailing-whitespace)
solution30.py:108:86: C0303: Trailing whitespace (trailing-whitespace)
solution30.py:109:74: C0303: Trailing whitespace (trailing-whitespace)
solution30.py:127:0: C0301: Line too long (157/100) (line-too-long)
solution30.py:175:0: C0303: Trailing whitespace (trailing-whitespace)
solution30.py:178:0: C0303: Trailing whitespace (trailing-whitespace)
solution30.py:213:0: W0311: Bad indentation. Found 24 spaces, expected 20 (bad-indentation)
solution30.py:214:0: W0311: Bad indentation. Found 24 spaces, expected 20 (bad-indentation)
solution30.py:215:0: C0303: Trailing whitespace (trailing-whitespace)
solution30.py:218:23: C0303: Trailing whitespace (trailing-whitespace)
solution30.py:218:0: C0325: Unnecessary parens after 'if' keyword (superfluous-parens)
solution30.py:221:24: C0303: Trailing whitespace (trailing-whitespace)
solution30.py:230:0: C0303: Trailing whitespace (trailing-whitespace)
solution30.py:232:0: C0303: Trailing whitespace (trailing-whitespace)
solution30.py:234:0: C0303: Trailing whitespace (trailing-whitespace)
solution30.py:236:0: C0303: Trailing whitespace (trailing-whitespace)
solution30.py:241:22: C0303: Trailing whitespace (trailing-whitespace)
solution30.py:8:0: W0105: String statement has no effect (pointless-string-statement)
solution30.py:15:0: W0105: String statement has no effect (pointless-string-statement)
solution30.py:31:0: C0413: Import "import copy" should be placed at the top of the module (wrong-import-position)
solution30.py:35:0: C0116: Missing function or method docstring (missing-function-docstring)
solution30.py:41:0: C0116: Missing function or method docstring (missing-function-docstring)
solution30.py:55:0: C0116: Missing function or method docstring (missing-function-docstring)
solution30.py:55:0: R1710: Either all return statements in a function should return an expression, or none of them should. (inconsistent-return-statements)
solution30.py:62:0: C0116: Missing function or method docstring (missing-function-docstring)
solution30.py:65:0: C0116: Missing function or method docstring (missing-function-docstring)
solution30.py:86:0: C0116: Missing function or method docstring (missing-function-docstring)
solution30.py:97:8: R1705: Unnecessary "else" after "return" (no-else-return)
solution30.py:113:0: C0103: Constant name "f" doesn't conform to UPPER_CASE naming style (invalid-name)
solution30.py:115:0: C0103: Constant name "f" doesn't conform to UPPER_CASE naming style (invalid-name)
solution30.py:119:0: W0105: String statement has no effect (pointless-string-statement)
solution30.py:126:0: W0105: String statement has no effect (pointless-string-statement)
solution30.py:141:0: W0404: Reimport 'copy' (imported line 31) (reimported)
solution30.py:141:0: C0413: Import "import copy" should be placed at the top of the module (wrong-import-position)
solution30.py:145:0: C0116: Missing function or method docstring (missing-function-docstring)
solution30.py:156:0: C0116: Missing function or method docstring (missing-function-docstring)
solution30.py:156:0: R1710: Either all return statements in a function should return an expression, or none of them should. (inconsistent-return-statements)
solution30.py:162:0: C0116: Missing function or method docstring (missing-function-docstring)
solution30.py:165:0: C0116: Missing function or method docstring (missing-function-docstring)
solution30.py:182:0: C0116: Missing function or method docstring (missing-function-docstring)
solution30.py:197:8: C0103: Variable name "n" doesn't conform to snake_case naming style (invalid-name)
solution30.py:208:12: C0103: Variable name "n" doesn't conform to snake_case naming style (invalid-name)
solution30.py:210:12: C0103: Variable name "n" doesn't conform to snake_case naming style (invalid-name)
solution30.py:228:12: C0103: Variable name "n" doesn't conform to snake_case naming style (invalid-name)
************* Module solution31
solution31.py:16:0: C0301: Line too long (115/100) (line-too-long)
solution31.py:40:0: C0303: Trailing whitespace (trailing-whitespace)
solution31.py:45:0: C0303: Trailing whitespace (trailing-whitespace)
solution31.py:49:0: C0303: Trailing whitespace (trailing-whitespace)
solution31.py:54:0: C0303: Trailing whitespace (trailing-whitespace)
solution31.py:58:0: C0303: Trailing whitespace (trailing-whitespace)
solution31.py:61:0: C0303: Trailing whitespace (trailing-whitespace)
solution31.py:64:0: C0303: Trailing whitespace (trailing-whitespace)
solution31.py:75:0: C0303: Trailing whitespace (trailing-whitespace)
solution31.py:76:0: C0303: Trailing whitespace (trailing-whitespace)
solution31.py:77:0: C0303: Trailing whitespace (trailing-whitespace)
solution31.py:79:0: C0303: Trailing whitespace (trailing-whitespace)
solution31.py:98:86: C0303: Trailing whitespace (trailing-whitespace)
solution31.py:99:74: C0303: Trailing whitespace (trailing-whitespace)
solution31.py:117:0: C0301: Line too long (157/100) (line-too-long)
solution31.py:167:0: C0303: Trailing whitespace (trailing-whitespace)
solution31.py:203:23: C0303: Trailing whitespace (trailing-whitespace)
solution31.py:203:0: C0325: Unnecessary parens after 'if' keyword (superfluous-parens)
solution31.py:206:24: C0303: Trailing whitespace (trailing-whitespace)
solution31.py:220:22: C0303: Trailing whitespace (trailing-whitespace)
solution31.py:222:0: C0304: Final newline missing (missing-final-newline)
solution31.py:8:0: W0105: String statement has no effect (pointless-string-statement)
solution31.py:15:0: W0105: String statement has no effect (pointless-string-statement)
solution31.py:31:0: C0413: Import "import copy" should be placed at the top of the module (wrong-import-position)
solution31.py:35:0: C0116: Missing function or method docstring (missing-function-docstring)
solution31.py:41:0: C0116: Missing function or method docstring (missing-function-docstring)
solution31.py:55:0: C0116: Missing function or method docstring (missing-function-docstring)
solution31.py:55:0: R1710: Either all return statements in a function should return an expression, or none of them should. (inconsistent-return-statements)
solution31.py:62:0: C0116: Missing function or method docstring (missing-function-docstring)
solution31.py:65:0: C0116: Missing function or method docstring (missing-function-docstring)
solution31.py:80:0: C0116: Missing function or method docstring (missing-function-docstring)
solution31.py:86:4: C0103: Variable name "q" doesn't conform to snake_case naming style (invalid-name)
solution31.py:90:12: R1705: Unnecessary "else" after "return" (no-else-return)
solution31.py:103:0: C0103: Constant name "f" doesn't conform to UPPER_CASE naming style (invalid-name)
solution31.py:105:0: C0103: Constant name "f" doesn't conform to UPPER_CASE naming style (invalid-name)
solution31.py:109:0: W0105: String statement has no effect (pointless-string-statement)
solution31.py:116:0: W0105: String statement has no effect (pointless-string-statement)
solution31.py:131:0: W0404: Reimport 'copy' (imported line 31) (reimported)
solution31.py:131:0: C0413: Import "import copy" should be placed at the top of the module (wrong-import-position)
solution31.py:135:0: C0116: Missing function or method docstring (missing-function-docstring)
solution31.py:146:0: C0116: Missing function or method docstring (missing-function-docstring)
solution31.py:146:0: R1710: Either all return statements in a function should return an expression, or none of them should. (inconsistent-return-statements)
solution31.py:152:0: C0116: Missing function or method docstring (missing-function-docstring)
solution31.py:155:0: C0116: Missing function or method docstring (missing-function-docstring)
solution31.py:170:0: C0116: Missing function or method docstring (missing-function-docstring)
solution31.py:185:8: C0103: Variable name "n" doesn't conform to snake_case naming style (invalid-name)
solution31.py:197:12: C0103: Variable name "n" doesn't conform to snake_case naming style (invalid-name)
************* Module solution32
solution32.py:16:0: C0301: Line too long (115/100) (line-too-long)
solution32.py:40:0: C0303: Trailing whitespace (trailing-whitespace)
solution32.py:45:0: C0303: Trailing whitespace (trailing-whitespace)
solution32.py:49:0: C0303: Trailing whitespace (trailing-whitespace)
solution32.py:54:0: C0303: Trailing whitespace (trailing-whitespace)
solution32.py:58:0: C0303: Trailing whitespace (trailing-whitespace)
solution32.py:61:0: C0303: Trailing whitespace (trailing-whitespace)
solution32.py:64:0: C0303: Trailing whitespace (trailing-whitespace)
solution32.py:78:0: C0303: Trailing whitespace (trailing-whitespace)
solution32.py:84:0: C0303: Trailing whitespace (trailing-whitespace)
solution32.py:93:16: C0303: Trailing whitespace (trailing-whitespace)
solution32.py:94:0: C0303: Trailing whitespace (trailing-whitespace)
solution32.py:102:86: C0303: Trailing whitespace (trailing-whitespace)
solution32.py:103:74: C0303: Trailing whitespace (trailing-whitespace)
solution32.py:121:0: C0301: Line too long (157/100) (line-too-long)
solution32.py:171:0: C0303: Trailing whitespace (trailing-whitespace)
solution32.py:206:28: C0303: Trailing whitespace (trailing-whitespace)
solution32.py:207:0: C0303: Trailing whitespace (trailing-whitespace)
solution32.py:209:23: C0303: Trailing whitespace (trailing-whitespace)
solution32.py:209:0: C0325: Unnecessary parens after 'if' keyword (superfluous-parens)
solution32.py:212:24: C0303: Trailing whitespace (trailing-whitespace)
solution32.py:226:22: C0303: Trailing whitespace (trailing-whitespace)
solution32.py:8:0: W0105: String statement has no effect (pointless-string-statement)
solution32.py:15:0: W0105: String statement has no effect (pointless-string-statement)
solution32.py:31:0: C0413: Import "import copy" should be placed at the top of the module (wrong-import-position)
solution32.py:35:0: C0116: Missing function or method docstring (missing-function-docstring)
solution32.py:41:0: C0116: Missing function or method docstring (missing-function-docstring)
solution32.py:55:0: C0116: Missing function or method docstring (missing-function-docstring)
solution32.py:55:0: R1710: Either all return statements in a function should return an expression, or none of them should. (inconsistent-return-statements)
solution32.py:62:0: C0116: Missing function or method docstring (missing-function-docstring)
solution32.py:65:0: C0116: Missing function or method docstring (missing-function-docstring)
solution32.py:79:0: C0116: Missing function or method docstring (missing-function-docstring)
solution32.py:86:8: C0103: Variable name "n" doesn't conform to snake_case naming style (invalid-name)
solution32.py:88:8: R1705: Unnecessary "else" after "return" (no-else-return)
solution32.py:107:0: C0103: Constant name "f" doesn't conform to UPPER_CASE naming style (invalid-name)
solution32.py:109:0: C0103: Constant name "f" doesn't conform to UPPER_CASE naming style (invalid-name)
solution32.py:113:0: W0105: String statement has no effect (pointless-string-statement)
solution32.py:120:0: W0105: String statement has no effect (pointless-string-statement)
solution32.py:135:0: W0404: Reimport 'copy' (imported line 31) (reimported)
solution32.py:135:0: C0413: Import "import copy" should be placed at the top of the module (wrong-import-position)
solution32.py:139:0: C0116: Missing function or method docstring (missing-function-docstring)
solution32.py:150:0: C0116: Missing function or method docstring (missing-function-docstring)
solution32.py:150:0: R1710: Either all return statements in a function should return an expression, or none of them should. (inconsistent-return-statements)
solution32.py:156:0: C0116: Missing function or method docstring (missing-function-docstring)
solution32.py:159:0: C0116: Missing function or method docstring (missing-function-docstring)
solution32.py:174:0: C0116: Missing function or method docstring (missing-function-docstring)
solution32.py:189:8: C0103: Variable name "n" doesn't conform to snake_case naming style (invalid-name)
solution32.py:202:12: C0103: Variable name "n" doesn't conform to snake_case naming style (invalid-name)
************* Module solution33
solution33.py:187:9: E0001: expected an indented block (<unknown>, line 187) (syntax-error)
************* Module solution34
solution34.py:16:0: C0301: Line too long (115/100) (line-too-long)
solution34.py:40:0: C0303: Trailing whitespace (trailing-whitespace)
solution34.py:45:0: C0303: Trailing whitespace (trailing-whitespace)
solution34.py:49:0: C0303: Trailing whitespace (trailing-whitespace)
solution34.py:54:0: C0303: Trailing whitespace (trailing-whitespace)
solution34.py:58:0: C0303: Trailing whitespace (trailing-whitespace)
solution34.py:61:0: C0303: Trailing whitespace (trailing-whitespace)
solution34.py:64:0: C0303: Trailing whitespace (trailing-whitespace)
solution34.py:78:0: C0303: Trailing whitespace (trailing-whitespace)
solution34.py:86:0: C0303: Trailing whitespace (trailing-whitespace)
solution34.py:91:0: C0303: Trailing whitespace (trailing-whitespace)
solution34.py:97:86: C0303: Trailing whitespace (trailing-whitespace)
solution34.py:98:74: C0303: Trailing whitespace (trailing-whitespace)
solution34.py:116:0: C0301: Line too long (157/100) (line-too-long)
solution34.py:158:0: C0303: Trailing whitespace (trailing-whitespace)
solution34.py:167:0: C0303: Trailing whitespace (trailing-whitespace)
solution34.py:201:23: C0303: Trailing whitespace (trailing-whitespace)
solution34.py:201:0: C0325: Unnecessary parens after 'if' keyword (superfluous-parens)
solution34.py:204:24: C0303: Trailing whitespace (trailing-whitespace)
solution34.py:214:22: C0303: Trailing whitespace (trailing-whitespace)
solution34.py:215:0: C0304: Final newline missing (missing-final-newline)
solution34.py:8:0: W0105: String statement has no effect (pointless-string-statement)
solution34.py:15:0: W0105: String statement has no effect (pointless-string-statement)
solution34.py:31:0: C0413: Import "import copy" should be placed at the top of the module (wrong-import-position)
solution34.py:35:0: C0116: Missing function or method docstring (missing-function-docstring)
solution34.py:41:0: C0116: Missing function or method docstring (missing-function-docstring)
solution34.py:55:0: C0116: Missing function or method docstring (missing-function-docstring)
solution34.py:55:0: R1710: Either all return statements in a function should return an expression, or none of them should. (inconsistent-return-statements)
solution34.py:62:0: C0116: Missing function or method docstring (missing-function-docstring)
solution34.py:65:0: C0116: Missing function or method docstring (missing-function-docstring)
solution34.py:79:0: C0116: Missing function or method docstring (missing-function-docstring)
solution34.py:90:12: W0101: Unreachable code (unreachable)
solution34.py:93:4: W0101: Unreachable code (unreachable)
solution34.py:87:8: W0612: Unused variable 'path' (unused-variable)
solution34.py:102:0: C0103: Constant name "f" doesn't conform to UPPER_CASE naming style (invalid-name)
solution34.py:104:0: C0103: Constant name "f" doesn't conform to UPPER_CASE naming style (invalid-name)
solution34.py:108:0: W0105: String statement has no effect (pointless-string-statement)
solution34.py:115:0: W0105: String statement has no effect (pointless-string-statement)
solution34.py:130:0: W0404: Reimport 'copy' (imported line 31) (reimported)
solution34.py:130:0: C0413: Import "import copy" should be placed at the top of the module (wrong-import-position)
solution34.py:134:0: C0116: Missing function or method docstring (missing-function-docstring)
solution34.py:145:0: C0116: Missing function or method docstring (missing-function-docstring)
solution34.py:145:0: R1710: Either all return statements in a function should return an expression, or none of them should. (inconsistent-return-statements)
solution34.py:151:0: C0116: Missing function or method docstring (missing-function-docstring)
solution34.py:154:0: C0116: Missing function or method docstring (missing-function-docstring)
solution34.py:159:4: E1121: Too many positional arguments for function call (too-many-function-args)
solution34.py:160:4: E1121: Too many positional arguments for function call (too-many-function-args)
solution34.py:161:4: E1121: Too many positional arguments for function call (too-many-function-args)
solution34.py:162:4: E1121: Too many positional arguments for function call (too-many-function-args)
solution34.py:163:4: E1121: Too many positional arguments for function call (too-many-function-args)
solution34.py:164:4: E1121: Too many positional arguments for function call (too-many-function-args)
solution34.py:165:4: E1121: Too many positional arguments for function call (too-many-function-args)
solution34.py:166:4: E1121: Too many positional arguments for function call (too-many-function-args)
solution34.py:170:0: C0116: Missing function or method docstring (missing-function-docstring)
solution34.py:185:8: C0103: Variable name "n" doesn't conform to snake_case naming style (invalid-name)
solution34.py:196:12: C0103: Variable name "n" doesn't conform to snake_case naming style (invalid-name)
solution34.py:176:4: W0612: Unused variable 'visited' (unused-variable)
solution34.py:209:8: W0612: Unused variable 'neighbors' (unused-variable)
************* Module solution35
solution35.py:16:0: C0301: Line too long (115/100) (line-too-long)
solution35.py:40:0: C0303: Trailing whitespace (trailing-whitespace)
solution35.py:45:0: C0303: Trailing whitespace (trailing-whitespace)
solution35.py:49:0: C0303: Trailing whitespace (trailing-whitespace)
solution35.py:54:0: C0303: Trailing whitespace (trailing-whitespace)
solution35.py:58:0: C0303: Trailing whitespace (trailing-whitespace)
solution35.py:61:0: C0303: Trailing whitespace (trailing-whitespace)
solution35.py:64:0: C0303: Trailing whitespace (trailing-whitespace)
solution35.py:76:0: C0303: Trailing whitespace (trailing-whitespace)
solution35.py:97:0: W0311: Bad indentation. Found 9 spaces, expected 8 (bad-indentation)
solution35.py:103:86: C0303: Trailing whitespace (trailing-whitespace)
solution35.py:104:74: C0303: Trailing whitespace (trailing-whitespace)
solution35.py:122:0: C0301: Line too long (157/100) (line-too-long)
solution35.py:204:0: W0311: Bad indentation. Found 24 spaces, expected 20 (bad-indentation)
solution35.py:205:0: W0311: Bad indentation. Found 24 spaces, expected 20 (bad-indentation)
solution35.py:208:23: C0303: Trailing whitespace (trailing-whitespace)
solution35.py:208:0: C0325: Unnecessary parens after 'if' keyword (superfluous-parens)
solution35.py:211:24: C0303: Trailing whitespace (trailing-whitespace)
solution35.py:226:22: C0303: Trailing whitespace (trailing-whitespace)
solution35.py:8:0: W0105: String statement has no effect (pointless-string-statement)
solution35.py:15:0: W0105: String statement has no effect (pointless-string-statement)
solution35.py:31:0: C0413: Import "import copy" should be placed at the top of the module (wrong-import-position)
solution35.py:35:0: C0116: Missing function or method docstring (missing-function-docstring)
solution35.py:41:0: C0116: Missing function or method docstring (missing-function-docstring)
solution35.py:55:0: C0116: Missing function or method docstring (missing-function-docstring)
solution35.py:55:0: R1710: Either all return statements in a function should return an expression, or none of them should. (inconsistent-return-statements)
solution35.py:62:0: C0116: Missing function or method docstring (missing-function-docstring)
solution35.py:65:0: C0116: Missing function or method docstring (missing-function-docstring)
solution35.py:77:0: C0116: Missing function or method docstring (missing-function-docstring)
solution35.py:96:4: R1703: The if statement can be replaced with 'return bool(test)' (simplifiable-if-statement)
solution35.py:96:4: R1705: Unnecessary "else" after "return" (no-else-return)
solution35.py:108:0: C0103: Constant name "f" doesn't conform to UPPER_CASE naming style (invalid-name)
solution35.py:110:0: C0103: Constant name "f" doesn't conform to UPPER_CASE naming style (invalid-name)
solution35.py:114:0: W0105: String statement has no effect (pointless-string-statement)
solution35.py:121:0: W0105: String statement has no effect (pointless-string-statement)
solution35.py:136:0: W0404: Reimport 'copy' (imported line 31) (reimported)
solution35.py:136:0: C0413: Import "import copy" should be placed at the top of the module (wrong-import-position)
solution35.py:140:0: C0116: Missing function or method docstring (missing-function-docstring)
solution35.py:151:0: C0116: Missing function or method docstring (missing-function-docstring)
solution35.py:151:0: R1710: Either all return statements in a function should return an expression, or none of them should. (inconsistent-return-statements)
solution35.py:157:0: C0116: Missing function or method docstring (missing-function-docstring)
solution35.py:160:0: C0116: Missing function or method docstring (missing-function-docstring)
solution35.py:174:0: C0116: Missing function or method docstring (missing-function-docstring)
solution35.py:189:8: C0103: Variable name "n" doesn't conform to snake_case naming style (invalid-name)
solution35.py:200:12: C0103: Variable name "n" doesn't conform to snake_case naming style (invalid-name)
solution35.py:217:12: C0103: Variable name "n" doesn't conform to snake_case naming style (invalid-name)
solution35.py:201:12: W0612: Unused variable 'cost' (unused-variable)
************* Module solution36
solution36.py:16:0: C0301: Line too long (115/100) (line-too-long)
solution36.py:40:0: C0303: Trailing whitespace (trailing-whitespace)
solution36.py:45:0: C0303: Trailing whitespace (trailing-whitespace)
solution36.py:49:0: C0303: Trailing whitespace (trailing-whitespace)
solution36.py:54:0: C0303: Trailing whitespace (trailing-whitespace)
solution36.py:58:0: C0303: Trailing whitespace (trailing-whitespace)
solution36.py:61:0: C0303: Trailing whitespace (trailing-whitespace)
solution36.py:64:0: C0303: Trailing whitespace (trailing-whitespace)
solution36.py:77:0: C0303: Trailing whitespace (trailing-whitespace)
solution36.py:100:86: C0303: Trailing whitespace (trailing-whitespace)
solution36.py:101:74: C0303: Trailing whitespace (trailing-whitespace)
solution36.py:119:0: C0301: Line too long (157/100) (line-too-long)
solution36.py:202:0: C0303: Trailing whitespace (trailing-whitespace)
solution36.py:205:23: C0303: Trailing whitespace (trailing-whitespace)
solution36.py:205:0: C0325: Unnecessary parens after 'if' keyword (superfluous-parens)
solution36.py:208:24: C0303: Trailing whitespace (trailing-whitespace)
solution36.py:222:22: C0303: Trailing whitespace (trailing-whitespace)
solution36.py:8:0: W0105: String statement has no effect (pointless-string-statement)
solution36.py:15:0: W0105: String statement has no effect (pointless-string-statement)
solution36.py:31:0: C0413: Import "import copy" should be placed at the top of the module (wrong-import-position)
solution36.py:35:0: C0116: Missing function or method docstring (missing-function-docstring)
solution36.py:41:0: C0116: Missing function or method docstring (missing-function-docstring)
solution36.py:55:0: C0116: Missing function or method docstring (missing-function-docstring)
solution36.py:55:0: R1710: Either all return statements in a function should return an expression, or none of them should. (inconsistent-return-statements)
solution36.py:62:0: C0116: Missing function or method docstring (missing-function-docstring)
solution36.py:65:0: C0116: Missing function or method docstring (missing-function-docstring)
solution36.py:78:0: C0116: Missing function or method docstring (missing-function-docstring)
solution36.py:105:0: C0103: Constant name "f" doesn't conform to UPPER_CASE naming style (invalid-name)
solution36.py:107:0: C0103: Constant name "f" doesn't conform to UPPER_CASE naming style (invalid-name)
solution36.py:111:0: W0105: String statement has no effect (pointless-string-statement)
solution36.py:118:0: W0105: String statement has no effect (pointless-string-statement)
solution36.py:133:0: W0404: Reimport 'copy' (imported line 31) (reimported)
solution36.py:133:0: C0413: Import "import copy" should be placed at the top of the module (wrong-import-position)
solution36.py:137:0: C0116: Missing function or method docstring (missing-function-docstring)
solution36.py:148:0: C0116: Missing function or method docstring (missing-function-docstring)
solution36.py:148:0: R1710: Either all return statements in a function should return an expression, or none of them should. (inconsistent-return-statements)
solution36.py:154:0: C0116: Missing function or method docstring (missing-function-docstring)
solution36.py:157:0: C0116: Missing function or method docstring (missing-function-docstring)
solution36.py:170:0: C0116: Missing function or method docstring (missing-function-docstring)
solution36.py:185:8: C0103: Variable name "n" doesn't conform to snake_case naming style (invalid-name)
solution36.py:196:12: C0103: Variable name "n" doesn't conform to snake_case naming style (invalid-name)
solution36.py:214:12: C0103: Variable name "n" doesn't conform to snake_case naming style (invalid-name)
************* Module solution37
solution37.py:16:0: C0301: Line too long (115/100) (line-too-long)
solution37.py:40:0: C0303: Trailing whitespace (trailing-whitespace)
solution37.py:45:0: C0303: Trailing whitespace (trailing-whitespace)
solution37.py:49:0: C0303: Trailing whitespace (trailing-whitespace)
solution37.py:54:0: C0303: Trailing whitespace (trailing-whitespace)
solution37.py:58:0: C0303: Trailing whitespace (trailing-whitespace)
solution37.py:61:0: C0303: Trailing whitespace (trailing-whitespace)
solution37.py:64:0: C0303: Trailing whitespace (trailing-whitespace)
solution37.py:69:36: C0303: Trailing whitespace (trailing-whitespace)
solution37.py:70:39: C0303: Trailing whitespace (trailing-whitespace)
solution37.py:71:40: C0303: Trailing whitespace (trailing-whitespace)
solution37.py:74:41: C0303: Trailing whitespace (trailing-whitespace)
solution37.py:75:42: C0303: Trailing whitespace (trailing-whitespace)
solution37.py:76:0: C0303: Trailing whitespace (trailing-whitespace)
solution37.py:78:0: C0303: Trailing whitespace (trailing-whitespace)
solution37.py:88:0: C0303: Trailing whitespace (trailing-whitespace)
solution37.py:102:86: C0303: Trailing whitespace (trailing-whitespace)
solution37.py:103:74: C0303: Trailing whitespace (trailing-whitespace)
solution37.py:121:0: C0301: Line too long (157/100) (line-too-long)
solution37.py:206:23: C0303: Trailing whitespace (trailing-whitespace)
solution37.py:206:0: C0325: Unnecessary parens after 'if' keyword (superfluous-parens)
solution37.py:209:24: C0303: Trailing whitespace (trailing-whitespace)
solution37.py:215:0: C0303: Trailing whitespace (trailing-whitespace)
solution37.py:221:0: C0303: Trailing whitespace (trailing-whitespace)
solution37.py:225:22: C0303: Trailing whitespace (trailing-whitespace)
solution37.py:226:0: C0304: Final newline missing (missing-final-newline)
solution37.py:8:0: W0105: String statement has no effect (pointless-string-statement)
solution37.py:15:0: W0105: String statement has no effect (pointless-string-statement)
solution37.py:31:0: C0413: Import "import copy" should be placed at the top of the module (wrong-import-position)
solution37.py:35:0: C0116: Missing function or method docstring (missing-function-docstring)
solution37.py:41:0: C0116: Missing function or method docstring (missing-function-docstring)
solution37.py:55:0: C0116: Missing function or method docstring (missing-function-docstring)
solution37.py:55:0: R1710: Either all return statements in a function should return an expression, or none of them should. (inconsistent-return-statements)
solution37.py:62:0: C0116: Missing function or method docstring (missing-function-docstring)
solution37.py:65:0: C0116: Missing function or method docstring (missing-function-docstring)
solution37.py:79:0: C0116: Missing function or method docstring (missing-function-docstring)
solution37.py:92:8: C0103: Variable name "v" doesn't conform to snake_case naming style (invalid-name)
solution37.py:94:12: C0103: Variable name "w" doesn't conform to snake_case naming style (invalid-name)
solution37.py:113:0: W0105: String statement has no effect (pointless-string-statement)
solution37.py:120:0: W0105: String statement has no effect (pointless-string-statement)
solution37.py:135:0: W0404: Reimport 'copy' (imported line 31) (reimported)
solution37.py:135:0: C0413: Import "import copy" should be placed at the top of the module (wrong-import-position)
solution37.py:139:0: C0116: Missing function or method docstring (missing-function-docstring)
solution37.py:150:0: C0116: Missing function or method docstring (missing-function-docstring)
solution37.py:150:0: R1710: Either all return statements in a function should return an expression, or none of them should. (inconsistent-return-statements)
solution37.py:156:0: C0116: Missing function or method docstring (missing-function-docstring)
solution37.py:159:0: C0116: Missing function or method docstring (missing-function-docstring)
solution37.py:173:0: C0116: Missing function or method docstring (missing-function-docstring)
solution37.py:188:8: C0103: Variable name "n" doesn't conform to snake_case naming style (invalid-name)
solution37.py:199:12: C0103: Variable name "n" doesn't conform to snake_case naming style (invalid-name)
solution37.py:216:12: C0103: Variable name "n" doesn't conform to snake_case naming style (invalid-name)
************* Module solution38
solution38.py:180:9: E0001: expected an indented block (<unknown>, line 180) (syntax-error)
************* Module solution39
solution39.py:16:0: C0301: Line too long (115/100) (line-too-long)
solution39.py:40:0: C0303: Trailing whitespace (trailing-whitespace)
solution39.py:45:0: C0303: Trailing whitespace (trailing-whitespace)
solution39.py:49:0: C0303: Trailing whitespace (trailing-whitespace)
solution39.py:54:0: C0303: Trailing whitespace (trailing-whitespace)
solution39.py:58:0: C0303: Trailing whitespace (trailing-whitespace)
solution39.py:61:0: C0303: Trailing whitespace (trailing-whitespace)
solution39.py:64:0: C0303: Trailing whitespace (trailing-whitespace)
solution39.py:76:0: C0303: Trailing whitespace (trailing-whitespace)
solution39.py:78:0: C0303: Trailing whitespace (trailing-whitespace)
solution39.py:85:0: C0303: Trailing whitespace (trailing-whitespace)
solution39.py:94:16: C0303: Trailing whitespace (trailing-whitespace)
solution39.py:95:0: C0303: Trailing whitespace (trailing-whitespace)
solution39.py:96:0: C0303: Trailing whitespace (trailing-whitespace)
solution39.py:98:0: C0303: Trailing whitespace (trailing-whitespace)
solution39.py:99:0: C0303: Trailing whitespace (trailing-whitespace)
solution39.py:100:0: C0303: Trailing whitespace (trailing-whitespace)
solution39.py:103:0: C0303: Trailing whitespace (trailing-whitespace)
solution39.py:104:0: C0303: Trailing whitespace (trailing-whitespace)
solution39.py:105:0: C0303: Trailing whitespace (trailing-whitespace)
solution39.py:109:86: C0303: Trailing whitespace (trailing-whitespace)
solution39.py:110:74: C0303: Trailing whitespace (trailing-whitespace)
solution39.py:128:0: C0301: Line too long (157/100) (line-too-long)
solution39.py:212:0: C0303: Trailing whitespace (trailing-whitespace)
solution39.py:213:0: C0303: Trailing whitespace (trailing-whitespace)
solution39.py:214:0: C0303: Trailing whitespace (trailing-whitespace)
solution39.py:215:0: C0303: Trailing whitespace (trailing-whitespace)
solution39.py:217:23: C0303: Trailing whitespace (trailing-whitespace)
solution39.py:217:0: C0325: Unnecessary parens after 'if' keyword (superfluous-parens)
solution39.py:220:24: C0303: Trailing whitespace (trailing-whitespace)
solution39.py:231:0: C0303: Trailing whitespace (trailing-whitespace)
solution39.py:232:0: C0303: Trailing whitespace (trailing-whitespace)
solution39.py:236:22: C0303: Trailing whitespace (trailing-whitespace)
solution39.py:237:0: C0304: Final newline missing (missing-final-newline)
solution39.py:8:0: W0105: String statement has no effect (pointless-string-statement)
solution39.py:15:0: W0105: String statement has no effect (pointless-string-statement)
solution39.py:31:0: C0413: Import "import copy" should be placed at the top of the module (wrong-import-position)
solution39.py:35:0: C0116: Missing function or method docstring (missing-function-docstring)
solution39.py:41:0: C0116: Missing function or method docstring (missing-function-docstring)
solution39.py:55:0: C0116: Missing function or method docstring (missing-function-docstring)
solution39.py:55:0: R1710: Either all return statements in a function should return an expression, or none of them should. (inconsistent-return-statements)
solution39.py:62:0: C0116: Missing function or method docstring (missing-function-docstring)
solution39.py:65:0: C0116: Missing function or method docstring (missing-function-docstring)
solution39.py:79:0: C0116: Missing function or method docstring (missing-function-docstring)
solution39.py:86:4: C0103: Variable name "a" doesn't conform to snake_case naming style (invalid-name)
solution39.py:89:8: C0103: Variable name "x" doesn't conform to snake_case naming style (invalid-name)
solution39.py:90:8: R1705: Unnecessary "else" after "return" (no-else-return)
solution39.py:93:12: C0103: Variable name "a" doesn't conform to snake_case naming style (invalid-name)
solution39.py:114:0: C0103: Constant name "f" doesn't conform to UPPER_CASE naming style (invalid-name)
solution39.py:116:0: C0103: Constant name "f" doesn't conform to UPPER_CASE naming style (invalid-name)
solution39.py:120:0: W0105: String statement has no effect (pointless-string-statement)
solution39.py:127:0: W0105: String statement has no effect (pointless-string-statement)
solution39.py:142:0: W0404: Reimport 'copy' (imported line 31) (reimported)
solution39.py:142:0: C0413: Import "import copy" should be placed at the top of the module (wrong-import-position)
solution39.py:146:0: C0116: Missing function or method docstring (missing-function-docstring)
solution39.py:157:0: C0116: Missing function or method docstring (missing-function-docstring)
solution39.py:157:0: R1710: Either all return statements in a function should return an expression, or none of them should. (inconsistent-return-statements)
solution39.py:163:0: C0116: Missing function or method docstring (missing-function-docstring)
solution39.py:166:0: C0116: Missing function or method docstring (missing-function-docstring)
solution39.py:180:0: C0116: Missing function or method docstring (missing-function-docstring)
solution39.py:195:8: C0103: Variable name "n" doesn't conform to snake_case naming style (invalid-name)
solution39.py:206:12: C0103: Variable name "n" doesn't conform to snake_case naming style (invalid-name)
************* Module solution4
solution4.py:16:0: C0301: Line too long (115/100) (line-too-long)
solution4.py:40:0: C0303: Trailing whitespace (trailing-whitespace)
solution4.py:45:0: C0303: Trailing whitespace (trailing-whitespace)
solution4.py:49:0: C0303: Trailing whitespace (trailing-whitespace)
solution4.py:54:0: C0303: Trailing whitespace (trailing-whitespace)
solution4.py:58:0: C0303: Trailing whitespace (trailing-whitespace)
solution4.py:61:0: C0303: Trailing whitespace (trailing-whitespace)
solution4.py:64:0: C0303: Trailing whitespace (trailing-whitespace)
solution4.py:79:0: C0303: Trailing whitespace (trailing-whitespace)
solution4.py:100:86: C0303: Trailing whitespace (trailing-whitespace)
solution4.py:101:74: C0303: Trailing whitespace (trailing-whitespace)
solution4.py:119:0: C0301: Line too long (157/100) (line-too-long)
solution4.py:204:28: C0303: Trailing whitespace (trailing-whitespace)
solution4.py:206:22: C0303: Trailing whitespace (trailing-whitespace)
solution4.py:209:23: C0303: Trailing whitespace (trailing-whitespace)
solution4.py:209:0: C0325: Unnecessary parens after 'if' keyword (superfluous-parens)
solution4.py:212:24: C0303: Trailing whitespace (trailing-whitespace)
solution4.py:228:30: C0303: Trailing whitespace (trailing-whitespace)
solution4.py:229:0: C0304: Final newline missing (missing-final-newline)
solution4.py:8:0: W0105: String statement has no effect (pointless-string-statement)
solution4.py:15:0: W0105: String statement has no effect (pointless-string-statement)
solution4.py:31:0: C0413: Import "import copy" should be placed at the top of the module (wrong-import-position)
solution4.py:35:0: C0116: Missing function or method docstring (missing-function-docstring)
solution4.py:41:0: C0116: Missing function or method docstring (missing-function-docstring)
solution4.py:55:0: C0116: Missing function or method docstring (missing-function-docstring)
solution4.py:55:0: R1710: Either all return statements in a function should return an expression, or none of them should. (inconsistent-return-statements)
solution4.py:62:0: C0116: Missing function or method docstring (missing-function-docstring)
solution4.py:65:0: C0116: Missing function or method docstring (missing-function-docstring)
solution4.py:80:0: C0116: Missing function or method docstring (missing-function-docstring)
solution4.py:91:8: R1705: Unnecessary "else" after "return" (no-else-return)
solution4.py:105:0: C0103: Constant name "f" doesn't conform to UPPER_CASE naming style (invalid-name)
solution4.py:107:0: C0103: Constant name "f" doesn't conform to UPPER_CASE naming style (invalid-name)
solution4.py:111:0: W0105: String statement has no effect (pointless-string-statement)
solution4.py:118:0: W0105: String statement has no effect (pointless-string-statement)
solution4.py:133:0: W0404: Reimport 'copy' (imported line 31) (reimported)
solution4.py:133:0: C0413: Import "import copy" should be placed at the top of the module (wrong-import-position)
solution4.py:137:0: C0116: Missing function or method docstring (missing-function-docstring)
solution4.py:148:0: C0116: Missing function or method docstring (missing-function-docstring)
solution4.py:148:0: R1710: Either all return statements in a function should return an expression, or none of them should. (inconsistent-return-statements)
solution4.py:154:0: C0116: Missing function or method docstring (missing-function-docstring)
solution4.py:157:0: C0116: Missing function or method docstring (missing-function-docstring)
solution4.py:173:0: C0116: Missing function or method docstring (missing-function-docstring)
solution4.py:188:8: C0103: Variable name "n" doesn't conform to snake_case naming style (invalid-name)
solution4.py:199:12: C0103: Variable name "n" doesn't conform to snake_case naming style (invalid-name)
solution4.py:201:12: C0103: Variable name "c" doesn't conform to snake_case naming style (invalid-name)
solution4.py:219:12: C0103: Variable name "n" doesn't conform to snake_case naming style (invalid-name)
************* Module solution40
solution40.py:196:9: E0001: expected an indented block (<unknown>, line 196) (syntax-error)
************* Module solution41
solution41.py:9:187: C0303: Trailing whitespace (trailing-whitespace)
solution41.py:9:0: C0301: Line too long (187/100) (line-too-long)
solution41.py:13:0: C0301: Line too long (140/100) (line-too-long)
solution41.py:26:38: C0303: Trailing whitespace (trailing-whitespace)
solution41.py:28:0: C0301: Line too long (216/100) (line-too-long)
solution41.py:53:0: C0303: Trailing whitespace (trailing-whitespace)
solution41.py:75:0: C0303: Trailing whitespace (trailing-whitespace)
solution41.py:91:0: C0301: Line too long (178/100) (line-too-long)
solution41.py:110:0: C0303: Trailing whitespace (trailing-whitespace)
solution41.py:116:14: C0303: Trailing whitespace (trailing-whitespace)
solution41.py:117:0: C0303: Trailing whitespace (trailing-whitespace)
solution41.py:133:0: C0303: Trailing whitespace (trailing-whitespace)
solution41.py:170:0: C0301: Line too long (214/100) (line-too-long)
solution41.py:194:22: C0303: Trailing whitespace (trailing-whitespace)
solution41.py:195:75: C0303: Trailing whitespace (trailing-whitespace)
solution41.py:197:0: C0303: Trailing whitespace (trailing-whitespace)
solution41.py:224:27: C0303: Trailing whitespace (trailing-whitespace)
solution41.py:225:27: C0303: Trailing whitespace (trailing-whitespace)
solution41.py:226:27: C0303: Trailing whitespace (trailing-whitespace)
solution41.py:228:42: C0303: Trailing whitespace (trailing-whitespace)
solution41.py:229:42: C0303: Trailing whitespace (trailing-whitespace)
solution41.py:230:42: C0303: Trailing whitespace (trailing-whitespace)
solution41.py:231:42: C0303: Trailing whitespace (trailing-whitespace)
solution41.py:232:42: C0303: Trailing whitespace (trailing-whitespace)
solution41.py:233:42: C0303: Trailing whitespace (trailing-whitespace)
solution41.py:234:42: C0303: Trailing whitespace (trailing-whitespace)
solution41.py:7:0: W0105: String statement has no effect (pointless-string-statement)
solution41.py:25:0: W0105: String statement has no effect (pointless-string-statement)
solution41.py:35:0: C0413: Import "import itertools" should be placed at the top of the module (wrong-import-position)
solution41.py:36:0: C0413: Import "from itertools import combinations" should be placed at the top of the module (wrong-import-position)
solution41.py:38:0: C0103: Argument name "li" doesn't conform to snake_case naming style (invalid-name)
solution41.py:38:0: C0116: Missing function or method docstring (missing-function-docstring)
solution41.py:44:12: C0103: Variable name "n" doesn't conform to snake_case naming style (invalid-name)
solution41.py:86:0: W0105: String statement has no effect (pointless-string-statement)
solution41.py:95:0: C0413: Import "import copy" should be placed at the top of the module (wrong-import-position)
solution41.py:96:0: C0116: Missing function or method docstring (missing-function-docstring)
solution41.py:101:4: C0103: Variable name "kk" doesn't conform to snake_case naming style (invalid-name)
solution41.py:113:12: C0103: Variable name "n" doesn't conform to snake_case naming style (invalid-name)
solution41.py:123:16: C0103: Variable name "a" doesn't conform to snake_case naming style (invalid-name)
solution41.py:127:8: C0103: Variable name "c" doesn't conform to snake_case naming style (invalid-name)
solution41.py:135:8: W0101: Unreachable code (unreachable)
solution41.py:135:8: C0103: Variable name "kk" doesn't conform to snake_case naming style (invalid-name)
solution41.py:112:8: W0612: Unused variable 'answer_list' (unused-variable)
solution41.py:167:0: W0105: String statement has no effect (pointless-string-statement)
solution41.py:174:0: C0103: Constant name "bag1" doesn't conform to UPPER_CASE naming style (invalid-name)
solution41.py:181:0: C0103: Constant name "bag2" doesn't conform to UPPER_CASE naming style (invalid-name)
solution41.py:192:0: C0116: Missing function or method docstring (missing-function-docstring)
solution41.py:201:4: C0200: Consider using enumerate instead of iterating with range and len (consider-using-enumerate)
solution41.py:196:4: W0612: Unused variable 'prev_max' (unused-variable)
solution41.py:211:8: W0621: Redefining name 's' from outer scope (line 160) (redefined-outer-name)
solution41.py:209:0: C0116: Missing function or method docstring (missing-function-docstring)
solution41.py:210:8: C0103: Variable name "r" doesn't conform to snake_case naming style (invalid-name)
solution41.py:211:8: C0103: Variable name "s" doesn't conform to snake_case naming style (invalid-name)
solution41.py:212:12: C0103: Variable name "c" doesn't conform to snake_case naming style (invalid-name)
solution41.py:213:12: C0103: Variable name "s" doesn't conform to snake_case naming style (invalid-name)
solution41.py:35:0: W0611: Unused import itertools (unused-import)
solution41.py:95:0: W0611: Unused import copy (unused-import)
************* Module solution42
solution42.py:10:134: C0303: Trailing whitespace (trailing-whitespace)
solution42.py:10:0: C0301: Line too long (134/100) (line-too-long)
solution42.py:12:0: C0301: Line too long (169/100) (line-too-long)
solution42.py:16:0: C0301: Line too long (379/100) (line-too-long)
solution42.py:28:0: C0301: Line too long (232/100) (line-too-long)
solution42.py:31:0: C0303: Trailing whitespace (trailing-whitespace)
solution42.py:33:237: C0303: Trailing whitespace (trailing-whitespace)
solution42.py:33:0: C0301: Line too long (237/100) (line-too-long)
solution42.py:39:0: C0303: Trailing whitespace (trailing-whitespace)
solution42.py:44:32: C0303: Trailing whitespace (trailing-whitespace)
solution42.py:49:25: C0303: Trailing whitespace (trailing-whitespace)
solution42.py:54:0: C0301: Line too long (136/100) (line-too-long)
solution42.py:55:0: C0301: Line too long (175/100) (line-too-long)
solution42.py:56:0: C0301: Line too long (162/100) (line-too-long)
solution42.py:58:0: C0301: Line too long (248/100) (line-too-long)
solution42.py:75:51: C0303: Trailing whitespace (trailing-whitespace)
solution42.py:83:0: C0303: Trailing whitespace (trailing-whitespace)
solution42.py:93:0: C0303: Trailing whitespace (trailing-whitespace)
solution42.py:95:0: C0301: Line too long (237/100) (line-too-long)
solution42.py:97:49: C0303: Trailing whitespace (trailing-whitespace)
solution42.py:178:129: C0303: Trailing whitespace (trailing-whitespace)
solution42.py:182:214: C0303: Trailing whitespace (trailing-whitespace)
solution42.py:178:0: C0301: Line too long (129/100) (line-too-long)
solution42.py:180:0: C0301: Line too long (151/100) (line-too-long)
solution42.py:182:0: C0301: Line too long (214/100) (line-too-long)
solution42.py:210:0: C0325: Unnecessary parens after 'if' keyword (superfluous-parens)
solution42.py:215:17: C0303: Trailing whitespace (trailing-whitespace)
solution42.py:222:0: C0304: Final newline missing (missing-final-newline)
solution42.py:7:0: W0105: String statement has no effect (pointless-string-statement)
solution42.py:20:0: C0103: Argument name "n" doesn't conform to snake_case naming style (invalid-name)
solution42.py:20:0: C0116: Missing function or method docstring (missing-function-docstring)
solution42.py:20:10: W0613: Unused argument 'val' (unused-argument)
solution42.py:20:15: W0613: Unused argument 'n' (unused-argument)
solution42.py:24:4: W0622: Redefining built-in 'hash' (redefined-builtin)
solution42.py:23:0: C0103: Argument name "n" doesn't conform to snake_case naming style (invalid-name)
solution42.py:23:0: C0116: Missing function or method docstring (missing-function-docstring)
solution42.py:23:15: W0613: Unused argument 'n' (unused-argument)
solution42.py:29:4: W0622: Redefining built-in 'hash' (redefined-builtin)
solution42.py:27:0: C0103: Argument name "n" doesn't conform to snake_case naming style (invalid-name)
solution42.py:27:0: C0116: Missing function or method docstring (missing-function-docstring)
solution42.py:28:4: C0103: Variable name "d" doesn't conform to snake_case naming style (invalid-name)
solution42.py:27:15: W0613: Unused argument 'n' (unused-argument)
solution42.py:34:4: W0622: Redefining built-in 'hash' (redefined-builtin)
solution42.py:32:0: C0103: Argument name "n" doesn't conform to snake_case naming style (invalid-name)
solution42.py:32:0: C0116: Missing function or method docstring (missing-function-docstring)
solution42.py:33:4: C0103: Variable name "d" doesn't conform to snake_case naming style (invalid-name)
solution42.py:32:15: W0613: Unused argument 'n' (unused-argument)
solution42.py:48:0: W0105: String statement has no effect (pointless-string-statement)
solution42.py:53:0: W0105: String statement has no effect (pointless-string-statement)
solution42.py:62:0: C0103: Constant name "size" doesn't conform to UPPER_CASE naming style (invalid-name)
solution42.py:63:0: C0103: Constant name "table" doesn't conform to UPPER_CASE naming style (invalid-name)
solution42.py:64:0: C0103: Constant name "collision" doesn't conform to UPPER_CASE naming style (invalid-name)
solution42.py:68:4: W0621: Redefining name 'size' from outer scope (line 62) (redefined-outer-name)
solution42.py:66:0: C0116: Missing function or method docstring (missing-function-docstring)
solution42.py:67:4: W0603: Using the global statement (global-statement)
solution42.py:67:4: C0103: Constant name "table" doesn't conform to UPPER_CASE naming style (invalid-name)
solution42.py:67:4: C0103: Constant name "collision" doesn't conform to UPPER_CASE naming style (invalid-name)
solution42.py:68:4: W0612: Unused variable 'size' (unused-variable)
solution42.py:72:0: C0116: Missing function or method docstring (missing-function-docstring)
solution42.py:73:4: W0603: Using the global statement (global-statement)
solution42.py:73:4: C0103: Constant name "table" doesn't conform to UPPER_CASE naming style (invalid-name)
solution42.py:73:4: C0103: Constant name "collision" doesn't conform to UPPER_CASE naming style (invalid-name)
solution42.py:79:4: C0103: Variable name "x" doesn't conform to snake_case naming style (invalid-name)
solution42.py:84:0: C0116: Missing function or method docstring (missing-function-docstring)
solution42.py:85:4: W0603: Using the global statement (global-statement)
solution42.py:85:4: C0103: Constant name "table" doesn't conform to UPPER_CASE naming style (invalid-name)
solution42.py:89:4: R1703: The if statement can be replaced with 'return bool(test)' (simplifiable-if-statement)
solution42.py:89:4: R1705: Unnecessary "else" after "return" (no-else-return)
solution42.py:101:4: W0622: Redefining built-in 'hash' (redefined-builtin)
solution42.py:94:0: C0116: Missing function or method docstring (missing-function-docstring)
solution42.py:95:4: C0103: Variable name "d" doesn't conform to snake_case naming style (invalid-name)
solution42.py:128:0: W0105: String statement has no effect (pointless-string-statement)
solution42.py:150:0: C0103: Argument name "li" doesn't conform to snake_case naming style (invalid-name)
solution42.py:150:0: C0116: Missing function or method docstring (missing-function-docstring)
solution42.py:155:8: R1705: Unnecessary "else" after "return" (no-else-return)
solution42.py:164:0: C0103: Constant name "b" doesn't conform to UPPER_CASE naming style (invalid-name)
solution42.py:166:0: C0103: Constant name "b" doesn't conform to UPPER_CASE naming style (invalid-name)
solution42.py:168:0: C0103: Constant name "b" doesn't conform to UPPER_CASE naming style (invalid-name)
solution42.py:172:0: W0105: String statement has no effect (pointless-string-statement)
solution42.py:177:0: W0105: String statement has no effect (pointless-string-statement)
solution42.py:203:0: C0103: Argument name "li" doesn't conform to snake_case naming style (invalid-name)
solution42.py:203:0: C0116: Missing function or method docstring (missing-function-docstring)
solution42.py:206:4: R1705: Unnecessary "else" after "return" (no-else-return)
solution42.py:203:0: R1710: Either all return statements in a function should return an expression, or none of them should. (inconsistent-return-statements)
************* Module solution43
solution43.py:9:187: C0303: Trailing whitespace (trailing-whitespace)
solution43.py:9:0: C0301: Line too long (187/100) (line-too-long)
solution43.py:13:0: C0301: Line too long (140/100) (line-too-long)
solution43.py:26:38: C0303: Trailing whitespace (trailing-whitespace)
solution43.py:28:0: C0301: Line too long (216/100) (line-too-long)
solution43.py:48:20: C0303: Trailing whitespace (trailing-whitespace)
solution43.py:51:0: C0303: Trailing whitespace (trailing-whitespace)
solution43.py:73:0: C0303: Trailing whitespace (trailing-whitespace)
solution43.py:86:0: C0301: Line too long (178/100) (line-too-long)
solution43.py:96:0: C0303: Trailing whitespace (trailing-whitespace)
solution43.py:101:15: C0303: Trailing whitespace (trailing-whitespace)
solution43.py:102:0: C0303: Trailing whitespace (trailing-whitespace)
solution43.py:103:0: C0303: Trailing whitespace (trailing-whitespace)
solution43.py:107:0: C0303: Trailing whitespace (trailing-whitespace)
solution43.py:109:24: C0303: Trailing whitespace (trailing-whitespace)
solution43.py:111:0: C0303: Trailing whitespace (trailing-whitespace)
solution43.py:116:24: C0303: Trailing whitespace (trailing-whitespace)
solution43.py:118:0: C0303: Trailing whitespace (trailing-whitespace)
solution43.py:123:0: C0303: Trailing whitespace (trailing-whitespace)
solution43.py:124:0: C0303: Trailing whitespace (trailing-whitespace)
solution43.py:126:0: C0303: Trailing whitespace (trailing-whitespace)
solution43.py:163:0: C0301: Line too long (214/100) (line-too-long)
solution43.py:187:22: C0303: Trailing whitespace (trailing-whitespace)
solution43.py:188:75: C0303: Trailing whitespace (trailing-whitespace)
solution43.py:190:0: C0303: Trailing whitespace (trailing-whitespace)
solution43.py:199:0: W0311: Bad indentation. Found 17 spaces, expected 16 (bad-indentation)
solution43.py:205:52: C0303: Trailing whitespace (trailing-whitespace)
solution43.py:207:0: C0303: Trailing whitespace (trailing-whitespace)
solution43.py:208:0: C0303: Trailing whitespace (trailing-whitespace)
solution43.py:226:27: C0303: Trailing whitespace (trailing-whitespace)
solution43.py:227:27: C0303: Trailing whitespace (trailing-whitespace)
solution43.py:228:27: C0303: Trailing whitespace (trailing-whitespace)
solution43.py:230:42: C0303: Trailing whitespace (trailing-whitespace)
solution43.py:231:42: C0303: Trailing whitespace (trailing-whitespace)
solution43.py:232:42: C0303: Trailing whitespace (trailing-whitespace)
solution43.py:233:42: C0303: Trailing whitespace (trailing-whitespace)
solution43.py:234:42: C0303: Trailing whitespace (trailing-whitespace)
solution43.py:235:42: C0303: Trailing whitespace (trailing-whitespace)
solution43.py:236:42: C0303: Trailing whitespace (trailing-whitespace)
solution43.py:7:0: W0105: String statement has no effect (pointless-string-statement)
solution43.py:25:0: W0105: String statement has no effect (pointless-string-statement)
solution43.py:35:0: C0413: Import "import itertools" should be placed at the top of the module (wrong-import-position)
solution43.py:37:0: C0103: Argument name "li" doesn't conform to snake_case naming style (invalid-name)
solution43.py:37:0: C0116: Missing function or method docstring (missing-function-docstring)
solution43.py:44:12: W0621: Redefining name 'i' from outer scope (line 41) (redefined-outer-name)
solution43.py:37:0: R1710: Either all return statements in a function should return an expression, or none of them should. (inconsistent-return-statements)
solution43.py:81:0: W0105: String statement has no effect (pointless-string-statement)
solution43.py:90:0: C0413: Import "import copy" should be placed at the top of the module (wrong-import-position)
solution43.py:91:0: C0116: Missing function or method docstring (missing-function-docstring)
solution43.py:98:4: C0103: Variable name "kk" doesn't conform to snake_case naming style (invalid-name)
solution43.py:128:8: C0103: Variable name "kk" doesn't conform to snake_case naming style (invalid-name)
solution43.py:95:4: W0612: Unused variable 'covered_set' (unused-variable)
solution43.py:160:0: W0105: String statement has no effect (pointless-string-statement)
solution43.py:167:0: C0103: Constant name "bag1" doesn't conform to UPPER_CASE naming style (invalid-name)
solution43.py:174:0: C0103: Constant name "bag2" doesn't conform to UPPER_CASE naming style (invalid-name)
solution43.py:185:0: C0116: Missing function or method docstring (missing-function-docstring)
solution43.py:213:8: W0621: Redefining name 's' from outer scope (line 153) (redefined-outer-name)
solution43.py:211:0: C0116: Missing function or method docstring (missing-function-docstring)
solution43.py:212:8: C0103: Variable name "r" doesn't conform to snake_case naming style (invalid-name)
solution43.py:213:8: C0103: Variable name "s" doesn't conform to snake_case naming style (invalid-name)
solution43.py:214:12: C0103: Variable name "c" doesn't conform to snake_case naming style (invalid-name)
solution43.py:215:12: C0103: Variable name "s" doesn't conform to snake_case naming style (invalid-name)
solution43.py:90:0: W0611: Unused import copy (unused-import)
************* Module solution44
solution44.py:9:187: C0303: Trailing whitespace (trailing-whitespace)
solution44.py:9:0: C0301: Line too long (187/100) (line-too-long)
solution44.py:13:0: C0301: Line too long (140/100) (line-too-long)
solution44.py:26:38: C0303: Trailing whitespace (trailing-whitespace)
solution44.py:28:0: C0301: Line too long (216/100) (line-too-long)
solution44.py:63:0: C0303: Trailing whitespace (trailing-whitespace)
solution44.py:76:0: C0301: Line too long (178/100) (line-too-long)
solution44.py:93:0: C0303: Trailing whitespace (trailing-whitespace)
solution44.py:94:0: C0303: Trailing whitespace (trailing-whitespace)
solution44.py:97:0: C0303: Trailing whitespace (trailing-whitespace)
solution44.py:134:0: C0301: Line too long (214/100) (line-too-long)
solution44.py:158:22: C0303: Trailing whitespace (trailing-whitespace)
solution44.py:159:75: C0303: Trailing whitespace (trailing-whitespace)
solution44.py:161:0: C0303: Trailing whitespace (trailing-whitespace)
solution44.py:196:27: C0303: Trailing whitespace (trailing-whitespace)
solution44.py:197:27: C0303: Trailing whitespace (trailing-whitespace)
solution44.py:198:27: C0303: Trailing whitespace (trailing-whitespace)
solution44.py:200:42: C0303: Trailing whitespace (trailing-whitespace)
solution44.py:201:42: C0303: Trailing whitespace (trailing-whitespace)
solution44.py:202:42: C0303: Trailing whitespace (trailing-whitespace)
solution44.py:203:42: C0303: Trailing whitespace (trailing-whitespace)
solution44.py:204:42: C0303: Trailing whitespace (trailing-whitespace)
solution44.py:205:42: C0303: Trailing whitespace (trailing-whitespace)
solution44.py:206:42: C0303: Trailing whitespace (trailing-whitespace)
solution44.py:7:0: W0105: String statement has no effect (pointless-string-statement)
solution44.py:25:0: W0105: String statement has no effect (pointless-string-statement)
solution44.py:35:0: C0413: Import "import itertools" should be placed at the top of the module (wrong-import-position)
solution44.py:37:0: C0103: Argument name "li" doesn't conform to snake_case naming style (invalid-name)
solution44.py:37:0: C0116: Missing function or method docstring (missing-function-docstring)
solution44.py:37:20: W0613: Unused argument 'li' (unused-argument)
solution44.py:64:0: E1111: Assigning result of a function call, where the function has no return (assignment-from-no-return)
solution44.py:64:0: C0103: Constant name "ss" doesn't conform to UPPER_CASE naming style (invalid-name)
solution44.py:67:0: E1111: Assigning result of a function call, where the function has no return (assignment-from-no-return)
solution44.py:67:0: C0103: Constant name "ss" doesn't conform to UPPER_CASE naming style (invalid-name)
solution44.py:71:0: W0105: String statement has no effect (pointless-string-statement)
solution44.py:80:0: C0413: Import "import copy" should be placed at the top of the module (wrong-import-position)
solution44.py:81:0: C0116: Missing function or method docstring (missing-function-docstring)
solution44.py:86:4: C0103: Variable name "kk" doesn't conform to snake_case naming style (invalid-name)
solution44.py:99:8: C0103: Variable name "kk" doesn't conform to snake_case naming style (invalid-name)
solution44.py:82:4: W0612: Unused variable 'sets' (unused-variable)
solution44.py:83:4: W0612: Unused variable 'ans' (unused-variable)
solution44.py:84:4: W0612: Unused variable 'covered' (unused-variable)
solution44.py:124:0: E1111: Assigning result of a function call, where the function has no return (assignment-from-no-return)
solution44.py:124:0: C0103: Constant name "s" doesn't conform to UPPER_CASE naming style (invalid-name)
solution44.py:127:0: E1111: Assigning result of a function call, where the function has no return (assignment-from-no-return)
solution44.py:127:0: C0103: Constant name "s" doesn't conform to UPPER_CASE naming style (invalid-name)
solution44.py:131:0: W0105: String statement has no effect (pointless-string-statement)
solution44.py:138:0: C0103: Constant name "bag1" doesn't conform to UPPER_CASE naming style (invalid-name)
solution44.py:145:0: C0103: Constant name "bag2" doesn't conform to UPPER_CASE naming style (invalid-name)
solution44.py:156:0: C0116: Missing function or method docstring (missing-function-docstring)
solution44.py:183:8: W0621: Redefining name 's' from outer scope (line 124) (redefined-outer-name)
solution44.py:181:0: C0116: Missing function or method docstring (missing-function-docstring)
solution44.py:182:8: C0103: Variable name "r" doesn't conform to snake_case naming style (invalid-name)
solution44.py:183:8: C0103: Variable name "s" doesn't conform to snake_case naming style (invalid-name)
solution44.py:184:12: C0103: Variable name "c" doesn't conform to snake_case naming style (invalid-name)
solution44.py:185:12: C0103: Variable name "s" doesn't conform to snake_case naming style (invalid-name)
solution44.py:35:0: W0611: Unused import itertools (unused-import)
solution44.py:80:0: W0611: Unused import copy (unused-import)
************* Module solution45
solution45.py:9:187: C0303: Trailing whitespace (trailing-whitespace)
solution45.py:9:0: C0301: Line too long (187/100) (line-too-long)
solution45.py:13:0: C0301: Line too long (140/100) (line-too-long)
solution45.py:26:38: C0303: Trailing whitespace (trailing-whitespace)
solution45.py:28:0: C0301: Line too long (216/100) (line-too-long)
solution45.py:70:0: C0303: Trailing whitespace (trailing-whitespace)
solution45.py:83:0: C0301: Line too long (178/100) (line-too-long)
solution45.py:110:0: C0303: Trailing whitespace (trailing-whitespace)
solution45.py:147:0: C0301: Line too long (214/100) (line-too-long)
solution45.py:171:22: C0303: Trailing whitespace (trailing-whitespace)
solution45.py:172:75: C0303: Trailing whitespace (trailing-whitespace)
solution45.py:174:0: C0303: Trailing whitespace (trailing-whitespace)
solution45.py:201:27: C0303: Trailing whitespace (trailing-whitespace)
solution45.py:202:27: C0303: Trailing whitespace (trailing-whitespace)
solution45.py:203:27: C0303: Trailing whitespace (trailing-whitespace)
solution45.py:205:42: C0303: Trailing whitespace (trailing-whitespace)
solution45.py:206:42: C0303: Trailing whitespace (trailing-whitespace)
solution45.py:207:42: C0303: Trailing whitespace (trailing-whitespace)
solution45.py:208:42: C0303: Trailing whitespace (trailing-whitespace)
solution45.py:209:42: C0303: Trailing whitespace (trailing-whitespace)
solution45.py:210:42: C0303: Trailing whitespace (trailing-whitespace)
solution45.py:211:42: C0303: Trailing whitespace (trailing-whitespace)
solution45.py:7:0: W0105: String statement has no effect (pointless-string-statement)
solution45.py:25:0: W0105: String statement has no effect (pointless-string-statement)
solution45.py:35:0: C0413: Import "import itertools" should be placed at the top of the module (wrong-import-position)
solution45.py:37:0: C0103: Argument name "li" doesn't conform to snake_case naming style (invalid-name)
solution45.py:37:0: C0116: Missing function or method docstring (missing-function-docstring)
solution45.py:37:0: R1710: Either all return statements in a function should return an expression, or none of them should. (inconsistent-return-statements)
solution45.py:41:4: W0612: Unused variable 'ans' (unused-variable)
solution45.py:78:0: W0105: String statement has no effect (pointless-string-statement)
solution45.py:87:0: C0413: Import "import copy" should be placed at the top of the module (wrong-import-position)
solution45.py:88:0: C0116: Missing function or method docstring (missing-function-docstring)
solution45.py:93:4: C0103: Variable name "kk" doesn't conform to snake_case naming style (invalid-name)
solution45.py:112:8: C0103: Variable name "kk" doesn't conform to snake_case naming style (invalid-name)
solution45.py:144:0: W0105: String statement has no effect (pointless-string-statement)
solution45.py:151:0: C0103: Constant name "bag1" doesn't conform to UPPER_CASE naming style (invalid-name)
solution45.py:158:0: C0103: Constant name "bag2" doesn't conform to UPPER_CASE naming style (invalid-name)
solution45.py:169:0: C0116: Missing function or method docstring (missing-function-docstring)
solution45.py:173:4: W0612: Unused variable 'prev_max' (unused-variable)
solution45.py:188:8: W0621: Redefining name 's' from outer scope (line 137) (redefined-outer-name)
solution45.py:186:0: C0116: Missing function or method docstring (missing-function-docstring)
solution45.py:187:8: C0103: Variable name "r" doesn't conform to snake_case naming style (invalid-name)
solution45.py:188:8: C0103: Variable name "s" doesn't conform to snake_case naming style (invalid-name)
solution45.py:189:12: C0103: Variable name "c" doesn't conform to snake_case naming style (invalid-name)
solution45.py:190:12: C0103: Variable name "s" doesn't conform to snake_case naming style (invalid-name)
solution45.py:87:0: W0611: Unused import copy (unused-import)
************* Module solution46
solution46.py:9:187: C0303: Trailing whitespace (trailing-whitespace)
solution46.py:9:0: C0301: Line too long (187/100) (line-too-long)
solution46.py:13:0: C0301: Line too long (140/100) (line-too-long)
solution46.py:26:38: C0303: Trailing whitespace (trailing-whitespace)
solution46.py:28:0: C0301: Line too long (216/100) (line-too-long)
solution46.py:70:0: C0303: Trailing whitespace (trailing-whitespace)
solution46.py:83:0: C0301: Line too long (178/100) (line-too-long)
solution46.py:100:0: C0303: Trailing whitespace (trailing-whitespace)
solution46.py:108:0: C0303: Trailing whitespace (trailing-whitespace)
solution46.py:112:0: C0303: Trailing whitespace (trailing-whitespace)
solution46.py:117:0: C0303: Trailing whitespace (trailing-whitespace)
solution46.py:154:0: C0301: Line too long (214/100) (line-too-long)
solution46.py:178:22: C0303: Trailing whitespace (trailing-whitespace)
solution46.py:179:75: C0303: Trailing whitespace (trailing-whitespace)
solution46.py:181:0: C0303: Trailing whitespace (trailing-whitespace)
solution46.py:208:27: C0303: Trailing whitespace (trailing-whitespace)
solution46.py:209:27: C0303: Trailing whitespace (trailing-whitespace)
solution46.py:210:27: C0303: Trailing whitespace (trailing-whitespace)
solution46.py:212:42: C0303: Trailing whitespace (trailing-whitespace)
solution46.py:213:42: C0303: Trailing whitespace (trailing-whitespace)
solution46.py:214:42: C0303: Trailing whitespace (trailing-whitespace)
solution46.py:215:42: C0303: Trailing whitespace (trailing-whitespace)
solution46.py:216:42: C0303: Trailing whitespace (trailing-whitespace)
solution46.py:217:42: C0303: Trailing whitespace (trailing-whitespace)
solution46.py:218:42: C0303: Trailing whitespace (trailing-whitespace)
solution46.py:7:0: W0105: String statement has no effect (pointless-string-statement)
solution46.py:25:0: W0105: String statement has no effect (pointless-string-statement)
solution46.py:35:0: C0413: Import "import itertools" should be placed at the top of the module (wrong-import-position)
solution46.py:37:0: C0103: Argument name "li" doesn't conform to snake_case naming style (invalid-name)
solution46.py:37:0: C0116: Missing function or method docstring (missing-function-docstring)
solution46.py:42:8: C0103: Variable name "r" doesn't conform to snake_case naming style (invalid-name)
solution46.py:37:0: R1710: Either all return statements in a function should return an expression, or none of them should. (inconsistent-return-statements)
solution46.py:78:0: W0105: String statement has no effect (pointless-string-statement)
solution46.py:87:0: C0413: Import "import copy" should be placed at the top of the module (wrong-import-position)
solution46.py:103:12: W0621: Redefining name 's' from outer scope (line 144) (redefined-outer-name)
solution46.py:88:0: C0116: Missing function or method docstring (missing-function-docstring)
solution46.py:93:4: C0103: Variable name "kk" doesn't conform to snake_case naming style (invalid-name)
solution46.py:103:12: C0103: Variable name "s" doesn't conform to snake_case naming style (invalid-name)
solution46.py:119:8: C0103: Variable name "kk" doesn't conform to snake_case naming style (invalid-name)
solution46.py:151:0: W0105: String statement has no effect (pointless-string-statement)
solution46.py:158:0: C0103: Constant name "bag1" doesn't conform to UPPER_CASE naming style (invalid-name)
solution46.py:165:0: C0103: Constant name "bag2" doesn't conform to UPPER_CASE naming style (invalid-name)
solution46.py:176:0: C0116: Missing function or method docstring (missing-function-docstring)
solution46.py:180:4: W0612: Unused variable 'prev_max' (unused-variable)
solution46.py:195:8: W0621: Redefining name 's' from outer scope (line 144) (redefined-outer-name)
solution46.py:193:0: C0116: Missing function or method docstring (missing-function-docstring)
solution46.py:194:8: C0103: Variable name "r" doesn't conform to snake_case naming style (invalid-name)
solution46.py:195:8: C0103: Variable name "s" doesn't conform to snake_case naming style (invalid-name)
solution46.py:196:12: C0103: Variable name "c" doesn't conform to snake_case naming style (invalid-name)
solution46.py:197:12: C0103: Variable name "s" doesn't conform to snake_case naming style (invalid-name)
solution46.py:87:0: W0611: Unused import copy (unused-import)
************* Module solution47
solution47.py:191:0: E0001: expected an indented block (<unknown>, line 191) (syntax-error)
************* Module solution48
solution48.py:9:187: C0303: Trailing whitespace (trailing-whitespace)
solution48.py:9:0: C0301: Line too long (187/100) (line-too-long)
solution48.py:13:0: C0301: Line too long (140/100) (line-too-long)
solution48.py:26:38: C0303: Trailing whitespace (trailing-whitespace)
solution48.py:28:0: C0301: Line too long (216/100) (line-too-long)
solution48.py:45:0: W0301: Unnecessary semicolon (unnecessary-semicolon)
solution48.py:51:52: C0303: Trailing whitespace (trailing-whitespace)
solution48.py:59:0: C0325: Unnecessary parens after 'if' keyword (superfluous-parens)
solution48.py:67:0: C0303: Trailing whitespace (trailing-whitespace)
solution48.py:68:0: C0303: Trailing whitespace (trailing-whitespace)
solution48.py:91:0: C0303: Trailing whitespace (trailing-whitespace)
solution48.py:104:0: C0301: Line too long (178/100) (line-too-long)
solution48.py:121:0: C0303: Trailing whitespace (trailing-whitespace)
solution48.py:124:0: C0303: Trailing whitespace (trailing-whitespace)
solution48.py:161:0: C0301: Line too long (214/100) (line-too-long)
solution48.py:185:22: C0303: Trailing whitespace (trailing-whitespace)
solution48.py:186:75: C0303: Trailing whitespace (trailing-whitespace)
solution48.py:188:0: C0303: Trailing whitespace (trailing-whitespace)
solution48.py:210:27: C0303: Trailing whitespace (trailing-whitespace)
solution48.py:211:27: C0303: Trailing whitespace (trailing-whitespace)
solution48.py:212:27: C0303: Trailing whitespace (trailing-whitespace)
solution48.py:214:42: C0303: Trailing whitespace (trailing-whitespace)
solution48.py:215:42: C0303: Trailing whitespace (trailing-whitespace)
solution48.py:216:42: C0303: Trailing whitespace (trailing-whitespace)
solution48.py:217:42: C0303: Trailing whitespace (trailing-whitespace)
solution48.py:218:42: C0303: Trailing whitespace (trailing-whitespace)
solution48.py:219:42: C0303: Trailing whitespace (trailing-whitespace)
solution48.py:220:42: C0303: Trailing whitespace (trailing-whitespace)
solution48.py:7:0: W0105: String statement has no effect (pointless-string-statement)
solution48.py:25:0: W0105: String statement has no effect (pointless-string-statement)
solution48.py:35:0: C0413: Import "import itertools" should be placed at the top of the module (wrong-import-position)
solution48.py:37:0: C0103: Argument name "li" doesn't conform to snake_case naming style (invalid-name)
solution48.py:37:0: C0116: Missing function or method docstring (missing-function-docstring)
solution48.py:46:8: C0200: Consider using enumerate instead of iterating with range and len (consider-using-enumerate)
solution48.py:51:20: C0103: Variable name "l" doesn't conform to snake_case naming style (invalid-name)
solution48.py:42:4: W0612: Unused variable 'maximum' (unused-variable)
solution48.py:99:0: W0105: String statement has no effect (pointless-string-statement)
solution48.py:108:0: C0413: Import "import copy" should be placed at the top of the module (wrong-import-position)
solution48.py:109:0: C0116: Missing function or method docstring (missing-function-docstring)
solution48.py:114:4: C0103: Variable name "kk" doesn't conform to snake_case naming style (invalid-name)
solution48.py:126:8: C0103: Variable name "kk" doesn't conform to snake_case naming style (invalid-name)
solution48.py:110:4: W0612: Unused variable 'sets' (unused-variable)
solution48.py:111:4: W0612: Unused variable 'ans' (unused-variable)
solution48.py:112:4: W0612: Unused variable 'covered' (unused-variable)
solution48.py:151:0: E1111: Assigning result of a function call, where the function has no return (assignment-from-no-return)
solution48.py:151:0: C0103: Constant name "s" doesn't conform to UPPER_CASE naming style (invalid-name)
solution48.py:154:0: E1111: Assigning result of a function call, where the function has no return (assignment-from-no-return)
solution48.py:154:0: C0103: Constant name "s" doesn't conform to UPPER_CASE naming style (invalid-name)
solution48.py:158:0: W0105: String statement has no effect (pointless-string-statement)
solution48.py:165:0: C0103: Constant name "bag1" doesn't conform to UPPER_CASE naming style (invalid-name)
solution48.py:172:0: C0103: Constant name "bag2" doesn't conform to UPPER_CASE naming style (invalid-name)
solution48.py:183:0: C0116: Missing function or method docstring (missing-function-docstring)
solution48.py:187:4: W0612: Unused variable 'prev_max' (unused-variable)
solution48.py:197:8: W0621: Redefining name 's' from outer scope (line 151) (redefined-outer-name)
solution48.py:195:0: C0116: Missing function or method docstring (missing-function-docstring)
solution48.py:196:8: C0103: Variable name "r" doesn't conform to snake_case naming style (invalid-name)
solution48.py:197:8: C0103: Variable name "s" doesn't conform to snake_case naming style (invalid-name)
solution48.py:198:12: C0103: Variable name "c" doesn't conform to snake_case naming style (invalid-name)
solution48.py:199:12: C0103: Variable name "s" doesn't conform to snake_case naming style (invalid-name)
solution48.py:108:0: W0611: Unused import copy (unused-import)
************* Module solution49
solution49.py:9:187: C0303: Trailing whitespace (trailing-whitespace)
solution49.py:9:0: C0301: Line too long (187/100) (line-too-long)
solution49.py:13:0: C0301: Line too long (140/100) (line-too-long)
solution49.py:26:38: C0303: Trailing whitespace (trailing-whitespace)
solution49.py:28:0: C0301: Line too long (216/100) (line-too-long)
solution49.py:68:0: C0303: Trailing whitespace (trailing-whitespace)
solution49.py:81:0: C0301: Line too long (178/100) (line-too-long)
solution49.py:156:0: C0301: Line too long (214/100) (line-too-long)
solution49.py:180:22: C0303: Trailing whitespace (trailing-whitespace)
solution49.py:181:75: C0303: Trailing whitespace (trailing-whitespace)
solution49.py:220:0: C0301: Line too long (101/100) (line-too-long)
solution49.py:226:0: C0303: Trailing whitespace (trailing-whitespace)
solution49.py:245:27: C0303: Trailing whitespace (trailing-whitespace)
solution49.py:246:27: C0303: Trailing whitespace (trailing-whitespace)
solution49.py:247:27: C0303: Trailing whitespace (trailing-whitespace)
solution49.py:249:42: C0303: Trailing whitespace (trailing-whitespace)
solution49.py:250:42: C0303: Trailing whitespace (trailing-whitespace)
solution49.py:251:42: C0303: Trailing whitespace (trailing-whitespace)
solution49.py:252:42: C0303: Trailing whitespace (trailing-whitespace)
solution49.py:253:42: C0303: Trailing whitespace (trailing-whitespace)
solution49.py:254:42: C0303: Trailing whitespace (trailing-whitespace)
solution49.py:255:42: C0303: Trailing whitespace (trailing-whitespace)
solution49.py:7:0: W0105: String statement has no effect (pointless-string-statement)
solution49.py:25:0: W0105: String statement has no effect (pointless-string-statement)
solution49.py:35:0: C0413: Import "from itertools import combinations" should be placed at the top of the module (wrong-import-position)
solution49.py:37:0: C0103: Argument name "li" doesn't conform to snake_case naming style (invalid-name)
solution49.py:37:0: C0116: Missing function or method docstring (missing-function-docstring)
solution49.py:41:0: R1721: Unnecessary use of a comprehension (unnecessary-comprehension)
solution49.py:37:0: R1710: Either all return statements in a function should return an expression, or none of them should. (inconsistent-return-statements)
solution49.py:76:0: W0105: String statement has no effect (pointless-string-statement)
solution49.py:85:0: C0413: Import "import copy" should be placed at the top of the module (wrong-import-position)
solution49.py:86:0: C0116: Missing function or method docstring (missing-function-docstring)
solution49.py:91:4: C0103: Variable name "kk" doesn't conform to snake_case naming style (invalid-name)
solution49.py:101:8: C0200: Consider using enumerate instead of iterating with range and len (consider-using-enumerate)
solution49.py:120:8: C0103: Variable name "kk" doesn't conform to snake_case naming style (invalid-name)
solution49.py:153:0: W0105: String statement has no effect (pointless-string-statement)
solution49.py:160:0: C0103: Constant name "bag1" doesn't conform to UPPER_CASE naming style (invalid-name)
solution49.py:167:0: C0103: Constant name "bag2" doesn't conform to UPPER_CASE naming style (invalid-name)
solution49.py:178:0: C0116: Missing function or method docstring (missing-function-docstring)
solution49.py:178:0: R0914: Too many local variables (21/15) (too-many-locals)
solution49.py:202:20: C0103: Variable name "c" doesn't conform to snake_case naming style (invalid-name)
solution49.py:203:0: R1721: Unnecessary use of a comprehension (unnecessary-comprehension)
solution49.py:207:20: C0200: Consider using enumerate instead of iterating with range and len (consider-using-enumerate)
solution49.py:207:24: C0103: Variable name "a" doesn't conform to snake_case naming style (invalid-name)
solution49.py:212:20: C0200: Consider using enumerate instead of iterating with range and len (consider-using-enumerate)
solution49.py:212:24: C0103: Variable name "a" doesn't conform to snake_case naming style (invalid-name)
solution49.py:232:8: W0621: Redefining name 's' from outer scope (line 146) (redefined-outer-name)
solution49.py:230:0: C0116: Missing function or method docstring (missing-function-docstring)
solution49.py:231:8: C0103: Variable name "r" doesn't conform to snake_case naming style (invalid-name)
solution49.py:232:8: C0103: Variable name "s" doesn't conform to snake_case naming style (invalid-name)
solution49.py:233:12: C0103: Variable name "c" doesn't conform to snake_case naming style (invalid-name)
solution49.py:234:12: C0103: Variable name "s" doesn't conform to snake_case naming style (invalid-name)
solution49.py:85:0: W0611: Unused import copy (unused-import)
************* Module solution5
solution5.py:10:133: C0303: Trailing whitespace (trailing-whitespace)
solution5.py:10:0: C0301: Line too long (133/100) (line-too-long)
solution5.py:12:0: C0301: Line too long (169/100) (line-too-long)
solution5.py:16:0: C0301: Line too long (376/100) (line-too-long)
solution5.py:29:0: C0301: Line too long (115/100) (line-too-long)
solution5.py:30:0: C0301: Line too long (116/100) (line-too-long)
solution5.py:36:0: C0301: Line too long (120/100) (line-too-long)
solution5.py:37:0: C0301: Line too long (116/100) (line-too-long)
solution5.py:53:25: C0303: Trailing whitespace (trailing-whitespace)
solution5.py:58:0: C0301: Line too long (142/100) (line-too-long)
solution5.py:59:0: C0301: Line too long (181/100) (line-too-long)
solution5.py:60:0: C0301: Line too long (168/100) (line-too-long)
solution5.py:62:0: C0301: Line too long (248/100) (line-too-long)
solution5.py:80:51: C0303: Trailing whitespace (trailing-whitespace)
solution5.py:104:0: C0301: Line too long (120/100) (line-too-long)
solution5.py:105:0: C0301: Line too long (116/100) (line-too-long)
solution5.py:108:49: C0303: Trailing whitespace (trailing-whitespace)
solution5.py:143:0: C0301: Line too long (137/100) (line-too-long)
solution5.py:185:129: C0303: Trailing whitespace (trailing-whitespace)
solution5.py:189:214: C0303: Trailing whitespace (trailing-whitespace)
solution5.py:185:0: C0301: Line too long (129/100) (line-too-long)
solution5.py:187:0: C0301: Line too long (151/100) (line-too-long)
solution5.py:189:0: C0301: Line too long (214/100) (line-too-long)
solution5.py:7:0: W0105: String statement has no effect (pointless-string-statement)
solution5.py:20:0: C0103: Argument name "n" doesn't conform to snake_case naming style (invalid-name)
solution5.py:20:0: C0116: Missing function or method docstring (missing-function-docstring)
solution5.py:20:10: W0613: Unused argument 'val' (unused-argument)
solution5.py:20:15: W0613: Unused argument 'n' (unused-argument)
solution5.py:24:0: C0103: Argument name "n" doesn't conform to snake_case naming style (invalid-name)
solution5.py:24:0: C0116: Missing function or method docstring (missing-function-docstring)
solution5.py:24:15: W0613: Unused argument 'n' (unused-argument)
solution5.py:28:0: C0103: Argument name "n" doesn't conform to snake_case naming style (invalid-name)
solution5.py:28:0: C0116: Missing function or method docstring (missing-function-docstring)
solution5.py:29:4: C0103: Variable name "d" doesn't conform to snake_case naming style (invalid-name)
solution5.py:28:15: W0613: Unused argument 'n' (unused-argument)
solution5.py:35:0: C0103: Argument name "n" doesn't conform to snake_case naming style (invalid-name)
solution5.py:35:0: C0116: Missing function or method docstring (missing-function-docstring)
solution5.py:36:4: C0103: Variable name "d" doesn't conform to snake_case naming style (invalid-name)
solution5.py:40:8: C0103: Variable name "s" doesn't conform to snake_case naming style (invalid-name)
solution5.py:52:0: W0105: String statement has no effect (pointless-string-statement)
solution5.py:57:0: W0105: String statement has no effect (pointless-string-statement)
solution5.py:66:0: C0103: Constant name "size" doesn't conform to UPPER_CASE naming style (invalid-name)
solution5.py:68:0: C0103: Constant name "collision" doesn't conform to UPPER_CASE naming style (invalid-name)
solution5.py:71:0: C0116: Missing function or method docstring (missing-function-docstring)
solution5.py:72:4: W0603: Using the global statement (global-statement)
solution5.py:72:4: C0103: Constant name "size" doesn't conform to UPPER_CASE naming style (invalid-name)
solution5.py:72:4: C0103: Constant name "table" doesn't conform to UPPER_CASE naming style (invalid-name)
solution5.py:72:4: C0103: Constant name "collision" doesn't conform to UPPER_CASE naming style (invalid-name)
solution5.py:78:0: C0116: Missing function or method docstring (missing-function-docstring)
solution5.py:84:4: W0603: Using the global statement (global-statement)
solution5.py:84:4: C0103: Constant name "collision" doesn't conform to UPPER_CASE naming style (invalid-name)
solution5.py:94:0: C0116: Missing function or method docstring (missing-function-docstring)
solution5.py:103:0: C0116: Missing function or method docstring (missing-function-docstring)
solution5.py:104:4: C0103: Variable name "d" doesn't conform to snake_case naming style (invalid-name)
solution5.py:114:12: C0103: Variable name "s" doesn't conform to snake_case naming style (invalid-name)
solution5.py:140:0: W0105: String statement has no effect (pointless-string-statement)
solution5.py:162:0: C0103: Argument name "li" doesn't conform to snake_case naming style (invalid-name)
solution5.py:162:0: C0116: Missing function or method docstring (missing-function-docstring)
solution5.py:179:0: W0105: String statement has no effect (pointless-string-statement)
solution5.py:184:0: W0105: String statement has no effect (pointless-string-statement)
solution5.py:210:0: C0103: Argument name "li" doesn't conform to snake_case naming style (invalid-name)
solution5.py:210:0: C0116: Missing function or method docstring (missing-function-docstring)
solution5.py:213:4: C0103: Variable name "d" doesn't conform to snake_case naming style (invalid-name)
solution5.py:214:10: C0103: Variable name "n" doesn't conform to snake_case naming style (invalid-name)
solution5.py:215:8: C0103: Variable name "v" doesn't conform to snake_case naming style (invalid-name)
solution5.py:216:8: R1705: Unnecessary "else" after "return" (no-else-return)
solution5.py:210:0: R1710: Either all return statements in a function should return an expression, or none of them should. (inconsistent-return-statements)
************* Module solution50
solution50.py:9:187: C0303: Trailing whitespace (trailing-whitespace)
solution50.py:9:0: C0301: Line too long (187/100) (line-too-long)
solution50.py:13:0: C0301: Line too long (140/100) (line-too-long)
solution50.py:26:38: C0303: Trailing whitespace (trailing-whitespace)
solution50.py:28:0: C0301: Line too long (216/100) (line-too-long)
solution50.py:68:0: C0303: Trailing whitespace (trailing-whitespace)
solution50.py:81:0: C0301: Line too long (178/100) (line-too-long)
solution50.py:104:0: C0303: Trailing whitespace (trailing-whitespace)
solution50.py:107:0: C0303: Trailing whitespace (trailing-whitespace)
solution50.py:114:0: C0303: Trailing whitespace (trailing-whitespace)
solution50.py:116:0: C0303: Trailing whitespace (trailing-whitespace)
solution50.py:153:0: C0301: Line too long (214/100) (line-too-long)
solution50.py:177:22: C0303: Trailing whitespace (trailing-whitespace)
solution50.py:178:75: C0303: Trailing whitespace (trailing-whitespace)
solution50.py:180:0: C0303: Trailing whitespace (trailing-whitespace)
solution50.py:209:27: C0303: Trailing whitespace (trailing-whitespace)
solution50.py:210:27: C0303: Trailing whitespace (trailing-whitespace)
solution50.py:211:27: C0303: Trailing whitespace (trailing-whitespace)
solution50.py:213:42: C0303: Trailing whitespace (trailing-whitespace)
solution50.py:214:42: C0303: Trailing whitespace (trailing-whitespace)
solution50.py:215:42: C0303: Trailing whitespace (trailing-whitespace)
solution50.py:216:42: C0303: Trailing whitespace (trailing-whitespace)
solution50.py:217:42: C0303: Trailing whitespace (trailing-whitespace)
solution50.py:218:42: C0303: Trailing whitespace (trailing-whitespace)
solution50.py:219:42: C0303: Trailing whitespace (trailing-whitespace)
solution50.py:7:0: W0105: String statement has no effect (pointless-string-statement)
solution50.py:25:0: W0105: String statement has no effect (pointless-string-statement)
solution50.py:35:0: C0413: Import "import itertools" should be placed at the top of the module (wrong-import-position)
solution50.py:37:0: C0103: Argument name "li" doesn't conform to snake_case naming style (invalid-name)
solution50.py:37:0: C0116: Missing function or method docstring (missing-function-docstring)
solution50.py:76:0: W0105: String statement has no effect (pointless-string-statement)
solution50.py:85:0: C0413: Import "import copy" should be placed at the top of the module (wrong-import-position)
solution50.py:86:0: C0116: Missing function or method docstring (missing-function-docstring)
solution50.py:91:4: C0103: Variable name "kk" doesn't conform to snake_case naming style (invalid-name)
solution50.py:100:8: C0200: Consider using enumerate instead of iterating with range and len (consider-using-enumerate)
solution50.py:108:8: C0200: Consider using enumerate instead of iterating with range and len (consider-using-enumerate)
solution50.py:118:8: C0103: Variable name "kk" doesn't conform to snake_case naming style (invalid-name)
solution50.py:150:0: W0105: String statement has no effect (pointless-string-statement)
solution50.py:157:0: C0103: Constant name "bag1" doesn't conform to UPPER_CASE naming style (invalid-name)
solution50.py:164:0: C0103: Constant name "bag2" doesn't conform to UPPER_CASE naming style (invalid-name)
solution50.py:175:0: C0116: Missing function or method docstring (missing-function-docstring)
solution50.py:179:4: W0612: Unused variable 'prev_max' (unused-variable)
solution50.py:196:8: W0621: Redefining name 's' from outer scope (line 143) (redefined-outer-name)
solution50.py:194:0: C0116: Missing function or method docstring (missing-function-docstring)
solution50.py:195:8: C0103: Variable name "r" doesn't conform to snake_case naming style (invalid-name)
solution50.py:196:8: C0103: Variable name "s" doesn't conform to snake_case naming style (invalid-name)
solution50.py:197:12: C0103: Variable name "c" doesn't conform to snake_case naming style (invalid-name)
solution50.py:198:12: C0103: Variable name "s" doesn't conform to snake_case naming style (invalid-name)
solution50.py:85:0: W0611: Unused import copy (unused-import)
************* Module solution51
solution51.py:9:187: C0303: Trailing whitespace (trailing-whitespace)
solution51.py:9:0: C0301: Line too long (187/100) (line-too-long)
solution51.py:13:0: C0301: Line too long (140/100) (line-too-long)
solution51.py:26:38: C0303: Trailing whitespace (trailing-whitespace)
solution51.py:28:0: C0301: Line too long (216/100) (line-too-long)
solution51.py:42:0: C0301: Line too long (118/100) (line-too-long)
solution51.py:69:0: C0303: Trailing whitespace (trailing-whitespace)
solution51.py:82:0: C0301: Line too long (178/100) (line-too-long)
solution51.py:87:0: C0303: Trailing whitespace (trailing-whitespace)
solution51.py:93:0: C0301: Line too long (101/100) (line-too-long)
solution51.py:98:0: C0301: Line too long (149/100) (line-too-long)
solution51.py:136:0: C0301: Line too long (214/100) (line-too-long)
solution51.py:160:22: C0303: Trailing whitespace (trailing-whitespace)
solution51.py:161:75: C0303: Trailing whitespace (trailing-whitespace)
solution51.py:163:0: C0303: Trailing whitespace (trailing-whitespace)
solution51.py:168:0: C0301: Line too long (120/100) (line-too-long)
solution51.py:174:0: C0301: Line too long (151/100) (line-too-long)
solution51.py:197:27: C0303: Trailing whitespace (trailing-whitespace)
solution51.py:198:27: C0303: Trailing whitespace (trailing-whitespace)
solution51.py:199:27: C0303: Trailing whitespace (trailing-whitespace)
solution51.py:201:42: C0303: Trailing whitespace (trailing-whitespace)
solution51.py:202:42: C0303: Trailing whitespace (trailing-whitespace)
solution51.py:203:42: C0303: Trailing whitespace (trailing-whitespace)
solution51.py:204:42: C0303: Trailing whitespace (trailing-whitespace)
solution51.py:205:42: C0303: Trailing whitespace (trailing-whitespace)
solution51.py:206:42: C0303: Trailing whitespace (trailing-whitespace)
solution51.py:207:42: C0303: Trailing whitespace (trailing-whitespace)
solution51.py:7:0: W0105: String statement has no effect (pointless-string-statement)
solution51.py:25:0: W0105: String statement has no effect (pointless-string-statement)
solution51.py:35:0: C0413: Import "import itertools" should be placed at the top of the module (wrong-import-position)
solution51.py:37:0: C0116: Missing function or method docstring (missing-function-docstring)
solution51.py:37:0: R1710: Either all return statements in a function should return an expression, or none of them should. (inconsistent-return-statements)
solution51.py:77:0: W0105: String statement has no effect (pointless-string-statement)
solution51.py:86:0: C0116: Missing function or method docstring (missing-function-docstring)
solution51.py:133:0: W0105: String statement has no effect (pointless-string-statement)
solution51.py:140:0: C0103: Constant name "bag1" doesn't conform to UPPER_CASE naming style (invalid-name)
solution51.py:147:0: C0103: Constant name "bag2" doesn't conform to UPPER_CASE naming style (invalid-name)
solution51.py:158:0: C0116: Missing function or method docstring (missing-function-docstring)
solution51.py:167:8: C0103: Variable name "x" doesn't conform to snake_case naming style (invalid-name)
solution51.py:168:12: C0103: Variable name "y" doesn't conform to snake_case naming style (invalid-name)
solution51.py:184:8: W0621: Redefining name 's' from outer scope (line 126) (redefined-outer-name)
solution51.py:182:0: C0116: Missing function or method docstring (missing-function-docstring)
solution51.py:183:8: C0103: Variable name "r" doesn't conform to snake_case naming style (invalid-name)
solution51.py:184:8: C0103: Variable name "s" doesn't conform to snake_case naming style (invalid-name)
solution51.py:185:12: C0103: Variable name "c" doesn't conform to snake_case naming style (invalid-name)
solution51.py:186:12: C0103: Variable name "s" doesn't conform to snake_case naming style (invalid-name)
************* Module solution52
solution52.py:9:187: C0303: Trailing whitespace (trailing-whitespace)
solution52.py:9:0: C0301: Line too long (187/100) (line-too-long)
solution52.py:13:0: C0301: Line too long (140/100) (line-too-long)
solution52.py:26:38: C0303: Trailing whitespace (trailing-whitespace)
solution52.py:28:0: C0301: Line too long (216/100) (line-too-long)
solution52.py:47:0: C0303: Trailing whitespace (trailing-whitespace)
solution52.py:68:0: C0303: Trailing whitespace (trailing-whitespace)
solution52.py:81:0: C0301: Line too long (178/100) (line-too-long)
solution52.py:107:0: C0303: Trailing whitespace (trailing-whitespace)
solution52.py:144:0: C0301: Line too long (214/100) (line-too-long)
solution52.py:168:22: C0303: Trailing whitespace (trailing-whitespace)
solution52.py:169:75: C0303: Trailing whitespace (trailing-whitespace)
solution52.py:171:0: C0303: Trailing whitespace (trailing-whitespace)
solution52.py:193:27: C0303: Trailing whitespace (trailing-whitespace)
solution52.py:194:27: C0303: Trailing whitespace (trailing-whitespace)
solution52.py:195:27: C0303: Trailing whitespace (trailing-whitespace)
solution52.py:197:42: C0303: Trailing whitespace (trailing-whitespace)
solution52.py:198:42: C0303: Trailing whitespace (trailing-whitespace)
solution52.py:199:42: C0303: Trailing whitespace (trailing-whitespace)
solution52.py:200:42: C0303: Trailing whitespace (trailing-whitespace)
solution52.py:201:42: C0303: Trailing whitespace (trailing-whitespace)
solution52.py:202:42: C0303: Trailing whitespace (trailing-whitespace)
solution52.py:203:42: C0303: Trailing whitespace (trailing-whitespace)
solution52.py:7:0: W0105: String statement has no effect (pointless-string-statement)
solution52.py:25:0: W0105: String statement has no effect (pointless-string-statement)
solution52.py:35:0: C0413: Import "import itertools" should be placed at the top of the module (wrong-import-position)
solution52.py:37:0: C0103: Argument name "li" doesn't conform to snake_case naming style (invalid-name)
solution52.py:37:0: C0116: Missing function or method docstring (missing-function-docstring)
solution52.py:43:12: C0103: Variable name "flatTup" doesn't conform to snake_case naming style (invalid-name)
solution52.py:37:0: R1710: Either all return statements in a function should return an expression, or none of them should. (inconsistent-return-statements)
solution52.py:76:0: W0105: String statement has no effect (pointless-string-statement)
solution52.py:85:0: C0413: Import "import copy" should be placed at the top of the module (wrong-import-position)
solution52.py:86:0: W0404: Reimport 'itertools' (imported line 35) (reimported)
solution52.py:86:0: C0413: Import "import itertools" should be placed at the top of the module (wrong-import-position)
solution52.py:87:0: C0116: Missing function or method docstring (missing-function-docstring)
solution52.py:91:4: C0103: Variable name "kk" doesn't conform to snake_case naming style (invalid-name)
solution52.py:109:8: C0103: Variable name "kk" doesn't conform to snake_case naming style (invalid-name)
solution52.py:141:0: W0105: String statement has no effect (pointless-string-statement)
solution52.py:148:0: C0103: Constant name "bag1" doesn't conform to UPPER_CASE naming style (invalid-name)
solution52.py:155:0: C0103: Constant name "bag2" doesn't conform to UPPER_CASE naming style (invalid-name)
solution52.py:166:0: C0116: Missing function or method docstring (missing-function-docstring)
solution52.py:169:4: W0612: Unused variable 'grid' (unused-variable)
solution52.py:170:4: W0612: Unused variable 'prev_max' (unused-variable)
solution52.py:180:8: W0621: Redefining name 's' from outer scope (line 134) (redefined-outer-name)
solution52.py:178:0: C0116: Missing function or method docstring (missing-function-docstring)
solution52.py:179:8: C0103: Variable name "r" doesn't conform to snake_case naming style (invalid-name)
solution52.py:180:8: C0103: Variable name "s" doesn't conform to snake_case naming style (invalid-name)
solution52.py:181:12: C0103: Variable name "c" doesn't conform to snake_case naming style (invalid-name)
solution52.py:182:12: C0103: Variable name "s" doesn't conform to snake_case naming style (invalid-name)
solution52.py:185:0: E1111: Assigning result of a function call, where the function has no return (assignment-from-no-return)
solution52.py:185:0: C0103: Constant name "g" doesn't conform to UPPER_CASE naming style (invalid-name)
solution52.py:188:0: E1111: Assigning result of a function call, where the function has no return (assignment-from-no-return)
solution52.py:188:0: C0103: Constant name "g" doesn't conform to UPPER_CASE naming style (invalid-name)
solution52.py:85:0: W0611: Unused import copy (unused-import)
solution52.py:86:0: C0412: Imports from package itertools are not grouped (ungrouped-imports)
************* Module solution53
solution53.py:9:187: C0303: Trailing whitespace (trailing-whitespace)
solution53.py:9:0: C0301: Line too long (187/100) (line-too-long)
solution53.py:13:0: C0301: Line too long (140/100) (line-too-long)
solution53.py:26:38: C0303: Trailing whitespace (trailing-whitespace)
solution53.py:28:0: C0301: Line too long (216/100) (line-too-long)
solution53.py:45:0: C0303: Trailing whitespace (trailing-whitespace)
solution53.py:48:0: C0303: Trailing whitespace (trailing-whitespace)
solution53.py:75:0: C0303: Trailing whitespace (trailing-whitespace)
solution53.py:88:0: C0301: Line too long (178/100) (line-too-long)
solution53.py:105:0: C0303: Trailing whitespace (trailing-whitespace)
solution53.py:106:0: C0303: Trailing whitespace (trailing-whitespace)
solution53.py:143:0: C0301: Line too long (214/100) (line-too-long)
solution53.py:167:22: C0303: Trailing whitespace (trailing-whitespace)
solution53.py:168:75: C0303: Trailing whitespace (trailing-whitespace)
solution53.py:170:0: C0303: Trailing whitespace (trailing-whitespace)
solution53.py:176:0: C0325: Unnecessary parens after 'if' keyword (superfluous-parens)
solution53.py:177:0: C0325: Unnecessary parens after 'if' keyword (superfluous-parens)
solution53.py:181:0: C0303: Trailing whitespace (trailing-whitespace)
solution53.py:186:0: C0303: Trailing whitespace (trailing-whitespace)
solution53.py:204:27: C0303: Trailing whitespace (trailing-whitespace)
solution53.py:205:27: C0303: Trailing whitespace (trailing-whitespace)
solution53.py:206:27: C0303: Trailing whitespace (trailing-whitespace)
solution53.py:208:42: C0303: Trailing whitespace (trailing-whitespace)
solution53.py:209:42: C0303: Trailing whitespace (trailing-whitespace)
solution53.py:210:42: C0303: Trailing whitespace (trailing-whitespace)
solution53.py:211:42: C0303: Trailing whitespace (trailing-whitespace)
solution53.py:212:42: C0303: Trailing whitespace (trailing-whitespace)
solution53.py:213:42: C0303: Trailing whitespace (trailing-whitespace)
solution53.py:214:0: C0304: Final newline missing (missing-final-newline)
solution53.py:7:0: W0105: String statement has no effect (pointless-string-statement)
solution53.py:25:0: W0105: String statement has no effect (pointless-string-statement)
solution53.py:35:0: C0413: Import "import itertools" should be placed at the top of the module (wrong-import-position)
solution53.py:37:0: C0103: Argument name "li" doesn't conform to snake_case naming style (invalid-name)
solution53.py:37:0: C0116: Missing function or method docstring (missing-function-docstring)
solution53.py:43:12: C0103: Variable name "x" doesn't conform to snake_case naming style (invalid-name)
solution53.py:46:16: C0103: Variable name "y" doesn't conform to snake_case naming style (invalid-name)
solution53.py:51:20: C0103: Variable name "z" doesn't conform to snake_case naming style (invalid-name)
solution53.py:37:0: R1710: Either all return statements in a function should return an expression, or none of them should. (inconsistent-return-statements)
solution53.py:83:0: W0105: String statement has no effect (pointless-string-statement)
solution53.py:92:0: C0413: Import "import copy" should be placed at the top of the module (wrong-import-position)
solution53.py:93:0: C0116: Missing function or method docstring (missing-function-docstring)
solution53.py:97:4: C0103: Variable name "kk" doesn't conform to snake_case naming style (invalid-name)
solution53.py:108:8: C0103: Variable name "kk" doesn't conform to snake_case naming style (invalid-name)
solution53.py:94:4: W0612: Unused variable 'sets' (unused-variable)
solution53.py:95:4: W0612: Unused variable 'ans' (unused-variable)
solution53.py:133:0: E1111: Assigning result of a function call, where the function has no return (assignment-from-no-return)
solution53.py:133:0: C0103: Constant name "s" doesn't conform to UPPER_CASE naming style (invalid-name)
solution53.py:136:0: E1111: Assigning result of a function call, where the function has no return (assignment-from-no-return)
solution53.py:136:0: C0103: Constant name "s" doesn't conform to UPPER_CASE naming style (invalid-name)
solution53.py:140:0: W0105: String statement has no effect (pointless-string-statement)
solution53.py:147:0: C0103: Constant name "bag1" doesn't conform to UPPER_CASE naming style (invalid-name)
solution53.py:154:0: C0103: Constant name "bag2" doesn't conform to UPPER_CASE naming style (invalid-name)
solution53.py:165:0: C0116: Missing function or method docstring (missing-function-docstring)
solution53.py:174:8: C0103: Variable name "x" doesn't conform to snake_case naming style (invalid-name)
solution53.py:175:12: C0103: Variable name "y" doesn't conform to snake_case naming style (invalid-name)
solution53.py:169:4: W0612: Unused variable 'prev_max' (unused-variable)
solution53.py:191:8: W0621: Redefining name 's' from outer scope (line 133) (redefined-outer-name)
solution53.py:189:0: C0116: Missing function or method docstring (missing-function-docstring)
solution53.py:190:8: C0103: Variable name "r" doesn't conform to snake_case naming style (invalid-name)
solution53.py:191:8: C0103: Variable name "s" doesn't conform to snake_case naming style (invalid-name)
solution53.py:192:12: C0103: Variable name "c" doesn't conform to snake_case naming style (invalid-name)
solution53.py:193:12: C0103: Variable name "s" doesn't conform to snake_case naming style (invalid-name)
solution53.py:92:0: W0611: Unused import copy (unused-import)
************* Module solution54
solution54.py:48:1: E0001: invalid syntax (<unknown>, line 48) (syntax-error)
************* Module solution55
solution55.py:9:187: C0303: Trailing whitespace (trailing-whitespace)
solution55.py:9:0: C0301: Line too long (187/100) (line-too-long)
solution55.py:13:0: C0301: Line too long (140/100) (line-too-long)
solution55.py:26:38: C0303: Trailing whitespace (trailing-whitespace)
solution55.py:28:0: C0301: Line too long (216/100) (line-too-long)
solution55.py:41:0: W0311: Bad indentation. Found 5 spaces, expected 4 (bad-indentation)
solution55.py:49:0: C0303: Trailing whitespace (trailing-whitespace)
solution55.py:50:0: C0303: Trailing whitespace (trailing-whitespace)
solution55.py:71:0: C0303: Trailing whitespace (trailing-whitespace)
solution55.py:84:0: C0301: Line too long (178/100) (line-too-long)
solution55.py:88:11: C0303: Trailing whitespace (trailing-whitespace)
solution55.py:102:20: C0303: Trailing whitespace (trailing-whitespace)
solution55.py:103:0: C0303: Trailing whitespace (trailing-whitespace)
solution55.py:107:0: C0303: Trailing whitespace (trailing-whitespace)
solution55.py:144:0: C0301: Line too long (214/100) (line-too-long)
solution55.py:168:22: C0303: Trailing whitespace (trailing-whitespace)
solution55.py:169:75: C0303: Trailing whitespace (trailing-whitespace)
solution55.py:171:0: C0303: Trailing whitespace (trailing-whitespace)
solution55.py:183:0: C0303: Trailing whitespace (trailing-whitespace)
solution55.py:188:0: C0303: Trailing whitespace (trailing-whitespace)
solution55.py:189:0: C0303: Trailing whitespace (trailing-whitespace)
solution55.py:207:27: C0303: Trailing whitespace (trailing-whitespace)
solution55.py:208:27: C0303: Trailing whitespace (trailing-whitespace)
solution55.py:209:27: C0303: Trailing whitespace (trailing-whitespace)
solution55.py:211:42: C0303: Trailing whitespace (trailing-whitespace)
solution55.py:212:42: C0303: Trailing whitespace (trailing-whitespace)
solution55.py:213:42: C0303: Trailing whitespace (trailing-whitespace)
solution55.py:214:42: C0303: Trailing whitespace (trailing-whitespace)
solution55.py:215:42: C0303: Trailing whitespace (trailing-whitespace)
solution55.py:216:42: C0303: Trailing whitespace (trailing-whitespace)
solution55.py:217:42: C0303: Trailing whitespace (trailing-whitespace)
solution55.py:7:0: W0105: String statement has no effect (pointless-string-statement)
solution55.py:25:0: W0105: String statement has no effect (pointless-string-statement)
solution55.py:35:0: C0413: Import "import itertools" should be placed at the top of the module (wrong-import-position)
solution55.py:37:0: C0103: Argument name "li" doesn't conform to snake_case naming style (invalid-name)
solution55.py:37:0: C0116: Missing function or method docstring (missing-function-docstring)
solution55.py:43:12: C0103: Variable name "p" doesn't conform to snake_case naming style (invalid-name)
solution55.py:37:0: R1710: Either all return statements in a function should return an expression, or none of them should. (inconsistent-return-statements)
solution55.py:79:0: W0105: String statement has no effect (pointless-string-statement)
solution55.py:88:0: C0413: Import "import copy" should be placed at the top of the module (wrong-import-position)
solution55.py:90:0: C0116: Missing function or method docstring (missing-function-docstring)
solution55.py:95:4: C0103: Variable name "kk" doesn't conform to snake_case naming style (invalid-name)
solution55.py:96:4: C0103: Variable name "c" doesn't conform to snake_case naming style (invalid-name)
solution55.py:109:8: C0103: Variable name "kk" doesn't conform to snake_case naming style (invalid-name)
solution55.py:91:4: W0612: Unused variable 'sets' (unused-variable)
solution55.py:92:4: W0612: Unused variable 'ans' (unused-variable)
solution55.py:93:4: W0612: Unused variable 'covered' (unused-variable)
solution55.py:96:4: W0612: Unused variable 'c' (unused-variable)
solution55.py:134:0: E1111: Assigning result of a function call, where the function has no return (assignment-from-no-return)
solution55.py:134:0: C0103: Constant name "s" doesn't conform to UPPER_CASE naming style (invalid-name)
solution55.py:137:0: E1111: Assigning result of a function call, where the function has no return (assignment-from-no-return)
solution55.py:137:0: C0103: Constant name "s" doesn't conform to UPPER_CASE naming style (invalid-name)
solution55.py:141:0: W0105: String statement has no effect (pointless-string-statement)
solution55.py:148:0: C0103: Constant name "bag1" doesn't conform to UPPER_CASE naming style (invalid-name)
solution55.py:155:0: C0103: Constant name "bag2" doesn't conform to UPPER_CASE naming style (invalid-name)
solution55.py:166:0: C0116: Missing function or method docstring (missing-function-docstring)
solution55.py:175:8: C0103: Variable name "a" doesn't conform to snake_case naming style (invalid-name)
solution55.py:176:12: C0103: Variable name "b" doesn't conform to snake_case naming style (invalid-name)
solution55.py:194:8: W0621: Redefining name 's' from outer scope (line 134) (redefined-outer-name)
solution55.py:192:0: C0116: Missing function or method docstring (missing-function-docstring)
solution55.py:193:8: C0103: Variable name "r" doesn't conform to snake_case naming style (invalid-name)
solution55.py:194:8: C0103: Variable name "s" doesn't conform to snake_case naming style (invalid-name)
solution55.py:195:12: C0103: Variable name "c" doesn't conform to snake_case naming style (invalid-name)
solution55.py:196:12: C0103: Variable name "s" doesn't conform to snake_case naming style (invalid-name)
solution55.py:88:0: W0611: Unused import copy (unused-import)
************* Module solution56
solution56.py:9:187: C0303: Trailing whitespace (trailing-whitespace)
solution56.py:9:0: C0301: Line too long (187/100) (line-too-long)
solution56.py:13:0: C0301: Line too long (140/100) (line-too-long)
solution56.py:26:38: C0303: Trailing whitespace (trailing-whitespace)
solution56.py:28:0: C0301: Line too long (216/100) (line-too-long)
solution56.py:53:0: C0303: Trailing whitespace (trailing-whitespace)
solution56.py:77:0: C0303: Trailing whitespace (trailing-whitespace)
solution56.py:90:0: C0301: Line too long (178/100) (line-too-long)
solution56.py:123:0: C0303: Trailing whitespace (trailing-whitespace)
solution56.py:130:0: C0303: Trailing whitespace (trailing-whitespace)
solution56.py:131:0: C0303: Trailing whitespace (trailing-whitespace)
solution56.py:166:0: C0301: Line too long (214/100) (line-too-long)
solution56.py:190:22: C0303: Trailing whitespace (trailing-whitespace)
solution56.py:191:75: C0303: Trailing whitespace (trailing-whitespace)
solution56.py:193:0: C0303: Trailing whitespace (trailing-whitespace)
solution56.py:223:27: C0303: Trailing whitespace (trailing-whitespace)
solution56.py:224:27: C0303: Trailing whitespace (trailing-whitespace)
solution56.py:225:27: C0303: Trailing whitespace (trailing-whitespace)
solution56.py:227:42: C0303: Trailing whitespace (trailing-whitespace)
solution56.py:228:42: C0303: Trailing whitespace (trailing-whitespace)
solution56.py:229:42: C0303: Trailing whitespace (trailing-whitespace)
solution56.py:230:42: C0303: Trailing whitespace (trailing-whitespace)
solution56.py:231:42: C0303: Trailing whitespace (trailing-whitespace)
solution56.py:232:42: C0303: Trailing whitespace (trailing-whitespace)
solution56.py:233:42: C0303: Trailing whitespace (trailing-whitespace)
solution56.py:7:0: W0105: String statement has no effect (pointless-string-statement)
solution56.py:25:0: W0105: String statement has no effect (pointless-string-statement)
solution56.py:35:0: C0413: Import "import itertools" should be placed at the top of the module (wrong-import-position)
solution56.py:37:0: C0103: Argument name "li" doesn't conform to snake_case naming style (invalid-name)
solution56.py:37:0: C0116: Missing function or method docstring (missing-function-docstring)
solution56.py:47:20: C0103: Variable name "l" doesn't conform to snake_case naming style (invalid-name)
solution56.py:85:0: W0105: String statement has no effect (pointless-string-statement)
solution56.py:94:0: C0413: Import "import copy" should be placed at the top of the module (wrong-import-position)
solution56.py:95:0: C0116: Missing function or method docstring (missing-function-docstring)
solution56.py:100:4: C0103: Variable name "kk" doesn't conform to snake_case naming style (invalid-name)
solution56.py:133:8: C0103: Variable name "kk" doesn't conform to snake_case naming style (invalid-name)
solution56.py:163:0: W0105: String statement has no effect (pointless-string-statement)
solution56.py:170:0: C0103: Constant name "bag1" doesn't conform to UPPER_CASE naming style (invalid-name)
solution56.py:177:0: C0103: Constant name "bag2" doesn't conform to UPPER_CASE naming style (invalid-name)
solution56.py:188:0: C0116: Missing function or method docstring (missing-function-docstring)
solution56.py:210:8: W0621: Redefining name 's' from outer scope (line 156) (redefined-outer-name)
solution56.py:208:0: C0116: Missing function or method docstring (missing-function-docstring)
solution56.py:209:8: C0103: Variable name "r" doesn't conform to snake_case naming style (invalid-name)
solution56.py:210:8: C0103: Variable name "s" doesn't conform to snake_case naming style (invalid-name)
solution56.py:211:12: C0103: Variable name "c" doesn't conform to snake_case naming style (invalid-name)
solution56.py:212:12: C0103: Variable name "s" doesn't conform to snake_case naming style (invalid-name)
solution56.py:94:0: W0611: Unused import copy (unused-import)
************* Module solution57
solution57.py:9:187: C0303: Trailing whitespace (trailing-whitespace)
solution57.py:9:0: C0301: Line too long (187/100) (line-too-long)
solution57.py:13:0: C0301: Line too long (140/100) (line-too-long)
solution57.py:26:38: C0303: Trailing whitespace (trailing-whitespace)
solution57.py:28:0: C0301: Line too long (216/100) (line-too-long)
solution57.py:88:0: C0301: Line too long (178/100) (line-too-long)
solution57.py:167:0: C0301: Line too long (214/100) (line-too-long)
solution57.py:230:27: C0303: Trailing whitespace (trailing-whitespace)
solution57.py:231:27: C0303: Trailing whitespace (trailing-whitespace)
solution57.py:232:27: C0303: Trailing whitespace (trailing-whitespace)
solution57.py:234:42: C0303: Trailing whitespace (trailing-whitespace)
solution57.py:235:42: C0303: Trailing whitespace (trailing-whitespace)
solution57.py:236:42: C0303: Trailing whitespace (trailing-whitespace)
solution57.py:237:42: C0303: Trailing whitespace (trailing-whitespace)
solution57.py:238:42: C0303: Trailing whitespace (trailing-whitespace)
solution57.py:239:42: C0303: Trailing whitespace (trailing-whitespace)
solution57.py:240:42: C0303: Trailing whitespace (trailing-whitespace)
solution57.py:7:0: W0105: String statement has no effect (pointless-string-statement)
solution57.py:25:0: W0105: String statement has no effect (pointless-string-statement)
solution57.py:35:0: C0413: Import "import itertools" should be placed at the top of the module (wrong-import-position)
solution57.py:38:0: C0103: Argument name "li" doesn't conform to snake_case naming style (invalid-name)
solution57.py:38:0: C0116: Missing function or method docstring (missing-function-docstring)
solution57.py:46:16: C0103: Variable name "c" doesn't conform to snake_case naming style (invalid-name)
solution57.py:48:16: C0103: Variable name "n" doesn't conform to snake_case naming style (invalid-name)
solution57.py:83:0: W0105: String statement has no effect (pointless-string-statement)
solution57.py:92:0: C0413: Import "import copy" should be placed at the top of the module (wrong-import-position)
solution57.py:95:0: C0116: Missing function or method docstring (missing-function-docstring)
solution57.py:100:4: C0103: Variable name "kk" doesn't conform to snake_case naming style (invalid-name)
solution57.py:131:8: C0103: Variable name "kk" doesn't conform to snake_case naming style (invalid-name)
solution57.py:98:4: W0612: Unused variable 'covered' (unused-variable)
solution57.py:164:0: W0105: String statement has no effect (pointless-string-statement)
solution57.py:171:0: C0103: Constant name "bag1" doesn't conform to UPPER_CASE naming style (invalid-name)
solution57.py:178:0: C0103: Constant name "bag2" doesn't conform to UPPER_CASE naming style (invalid-name)
solution57.py:190:0: C0116: Missing function or method docstring (missing-function-docstring)
solution57.py:194:4: W0612: Unused variable 'prev_max' (unused-variable)
solution57.py:216:8: W0621: Redefining name 's' from outer scope (line 157) (redefined-outer-name)
solution57.py:214:0: C0116: Missing function or method docstring (missing-function-docstring)
solution57.py:215:8: C0103: Variable name "r" doesn't conform to snake_case naming style (invalid-name)
solution57.py:216:8: C0103: Variable name "s" doesn't conform to snake_case naming style (invalid-name)
solution57.py:217:12: C0103: Variable name "c" doesn't conform to snake_case naming style (invalid-name)
solution57.py:218:12: C0103: Variable name "s" doesn't conform to snake_case naming style (invalid-name)
solution57.py:92:0: W0611: Unused import copy (unused-import)
************* Module solution6
solution6.py:10:136: C0303: Trailing whitespace (trailing-whitespace)
solution6.py:10:0: C0301: Line too long (136/100) (line-too-long)
solution6.py:12:0: C0301: Line too long (169/100) (line-too-long)
solution6.py:16:0: C0301: Line too long (385/100) (line-too-long)
solution6.py:27:0: C0301: Line too long (232/100) (line-too-long)
solution6.py:30:0: C0325: Unnecessary parens after 'return' keyword (superfluous-parens)
solution6.py:31:0: C0303: Trailing whitespace (trailing-whitespace)
solution6.py:33:237: C0303: Trailing whitespace (trailing-whitespace)
solution6.py:33:0: C0301: Line too long (237/100) (line-too-long)
solution6.py:41:0: C0303: Trailing whitespace (trailing-whitespace)
solution6.py:46:25: C0303: Trailing whitespace (trailing-whitespace)
solution6.py:50:25: C0303: Trailing whitespace (trailing-whitespace)
solution6.py:55:0: C0301: Line too long (142/100) (line-too-long)
solution6.py:56:0: C0301: Line too long (181/100) (line-too-long)
solution6.py:57:0: C0301: Line too long (168/100) (line-too-long)
solution6.py:59:0: C0301: Line too long (248/100) (line-too-long)
solution6.py:75:51: C0303: Trailing whitespace (trailing-whitespace)
solution6.py:84:0: C0303: Trailing whitespace (trailing-whitespace)
solution6.py:93:0: C0303: Trailing whitespace (trailing-whitespace)
solution6.py:95:0: C0301: Line too long (237/100) (line-too-long)
solution6.py:97:49: C0303: Trailing whitespace (trailing-whitespace)
solution6.py:107:0: C0303: Trailing whitespace (trailing-whitespace)
solution6.py:132:0: C0301: Line too long (137/100) (line-too-long)
solution6.py:176:129: C0303: Trailing whitespace (trailing-whitespace)
solution6.py:180:214: C0303: Trailing whitespace (trailing-whitespace)
solution6.py:176:0: C0301: Line too long (129/100) (line-too-long)
solution6.py:178:0: C0301: Line too long (151/100) (line-too-long)
solution6.py:180:0: C0301: Line too long (214/100) (line-too-long)
solution6.py:209:0: C0303: Trailing whitespace (trailing-whitespace)
solution6.py:210:17: C0303: Trailing whitespace (trailing-whitespace)
solution6.py:217:0: C0304: Final newline missing (missing-final-newline)
solution6.py:7:0: W0105: String statement has no effect (pointless-string-statement)
solution6.py:20:0: C0103: Argument name "n" doesn't conform to snake_case naming style (invalid-name)
solution6.py:20:0: C0116: Missing function or method docstring (missing-function-docstring)
solution6.py:20:10: W0613: Unused argument 'val' (unused-argument)
solution6.py:20:15: W0613: Unused argument 'n' (unused-argument)
solution6.py:23:0: C0103: Argument name "n" doesn't conform to snake_case naming style (invalid-name)
solution6.py:23:0: C0116: Missing function or method docstring (missing-function-docstring)
solution6.py:23:15: W0613: Unused argument 'n' (unused-argument)
solution6.py:26:0: C0103: Argument name "n" doesn't conform to snake_case naming style (invalid-name)
solution6.py:26:0: C0116: Missing function or method docstring (missing-function-docstring)
solution6.py:27:4: C0103: Variable name "d" doesn't conform to snake_case naming style (invalid-name)
solution6.py:26:0: R1710: Either all return statements in a function should return an expression, or none of them should. (inconsistent-return-statements)
solution6.py:26:15: W0613: Unused argument 'n' (unused-argument)
solution6.py:34:4: W0622: Redefining built-in 'sum' (redefined-builtin)
solution6.py:32:0: C0103: Argument name "n" doesn't conform to snake_case naming style (invalid-name)
solution6.py:32:0: C0116: Missing function or method docstring (missing-function-docstring)
solution6.py:33:4: C0103: Variable name "d" doesn't conform to snake_case naming style (invalid-name)
solution6.py:32:15: W0613: Unused argument 'n' (unused-argument)
solution6.py:49:0: W0105: String statement has no effect (pointless-string-statement)
solution6.py:54:0: W0105: String statement has no effect (pointless-string-statement)
solution6.py:63:0: C0103: Constant name "size" doesn't conform to UPPER_CASE naming style (invalid-name)
solution6.py:65:0: C0103: Constant name "collision" doesn't conform to UPPER_CASE naming style (invalid-name)
solution6.py:67:0: C0116: Missing function or method docstring (missing-function-docstring)
solution6.py:68:4: W0603: Using the global statement (global-statement)
solution6.py:68:4: C0103: Constant name "size" doesn't conform to UPPER_CASE naming style (invalid-name)
solution6.py:68:4: C0103: Constant name "table" doesn't conform to UPPER_CASE naming style (invalid-name)
solution6.py:68:4: C0103: Constant name "collision" doesn't conform to UPPER_CASE naming style (invalid-name)
solution6.py:73:0: C0116: Missing function or method docstring (missing-function-docstring)
solution6.py:79:4: W0603: Using the global statement (global-statement)
solution6.py:79:4: C0103: Constant name "collision" doesn't conform to UPPER_CASE naming style (invalid-name)
solution6.py:85:0: C0116: Missing function or method docstring (missing-function-docstring)
solution6.py:101:4: W0622: Redefining built-in 'sum' (redefined-builtin)
solution6.py:94:0: C0116: Missing function or method docstring (missing-function-docstring)
solution6.py:95:4: C0103: Variable name "d" doesn't conform to snake_case naming style (invalid-name)
solution6.py:129:0: W0105: String statement has no effect (pointless-string-statement)
solution6.py:151:0: C0103: Argument name "li" doesn't conform to snake_case naming style (invalid-name)
solution6.py:151:0: C0116: Missing function or method docstring (missing-function-docstring)
solution6.py:162:0: C0103: Constant name "b" doesn't conform to UPPER_CASE naming style (invalid-name)
solution6.py:164:0: C0103: Constant name "b" doesn't conform to UPPER_CASE naming style (invalid-name)
solution6.py:166:0: C0103: Constant name "b" doesn't conform to UPPER_CASE naming style (invalid-name)
solution6.py:170:0: W0105: String statement has no effect (pointless-string-statement)
solution6.py:175:0: W0105: String statement has no effect (pointless-string-statement)
solution6.py:204:4: W0622: Redefining built-in 'sum' (redefined-builtin)
solution6.py:201:0: C0103: Argument name "li" doesn't conform to snake_case naming style (invalid-name)
solution6.py:201:0: C0116: Missing function or method docstring (missing-function-docstring)
solution6.py:205:4: C0200: Consider using enumerate instead of iterating with range and len (consider-using-enumerate)
solution6.py:201:0: R1710: Either all return statements in a function should return an expression, or none of them should. (inconsistent-return-statements)
solution6.py:204:4: W0612: Unused variable 'sum' (unused-variable)
************* Module solution7
solution7.py:16:0: C0301: Line too long (115/100) (line-too-long)
solution7.py:110:86: C0303: Trailing whitespace (trailing-whitespace)
solution7.py:129:0: C0301: Line too long (157/100) (line-too-long)
solution7.py:223:24: C0303: Trailing whitespace (trailing-whitespace)
solution7.py:238:0: C0301: Line too long (102/100) (line-too-long)
solution7.py:8:0: W0105: String statement has no effect (pointless-string-statement)
solution7.py:15:0: W0105: String statement has no effect (pointless-string-statement)
solution7.py:31:0: C0413: Import "import copy" should be placed at the top of the module (wrong-import-position)
solution7.py:36:0: C0116: Missing function or method docstring (missing-function-docstring)
solution7.py:43:0: C0116: Missing function or method docstring (missing-function-docstring)
solution7.py:58:0: C0116: Missing function or method docstring (missing-function-docstring)
solution7.py:58:0: R1710: Either all return statements in a function should return an expression, or none of them should. (inconsistent-return-statements)
solution7.py:66:0: C0116: Missing function or method docstring (missing-function-docstring)
solution7.py:70:0: C0116: Missing function or method docstring (missing-function-docstring)
solution7.py:84:0: C0116: Missing function or method docstring (missing-function-docstring)
solution7.py:115:0: C0103: Constant name "f" doesn't conform to UPPER_CASE naming style (invalid-name)
solution7.py:117:0: C0103: Constant name "f" doesn't conform to UPPER_CASE naming style (invalid-name)
solution7.py:121:0: W0105: String statement has no effect (pointless-string-statement)
solution7.py:128:0: W0105: String statement has no effect (pointless-string-statement)
solution7.py:143:0: W0404: Reimport 'copy' (imported line 31) (reimported)
solution7.py:143:0: C0413: Import "import copy" should be placed at the top of the module (wrong-import-position)
solution7.py:148:0: C0116: Missing function or method docstring (missing-function-docstring)
solution7.py:160:0: C0116: Missing function or method docstring (missing-function-docstring)
solution7.py:160:0: R1710: Either all return statements in a function should return an expression, or none of them should. (inconsistent-return-statements)
solution7.py:167:0: C0116: Missing function or method docstring (missing-function-docstring)
solution7.py:171:0: C0116: Missing function or method docstring (missing-function-docstring)
solution7.py:185:0: C0116: Missing function or method docstring (missing-function-docstring)
solution7.py:200:8: C0103: Variable name "n" doesn't conform to snake_case naming style (invalid-name)
solution7.py:211:12: C0103: Variable name "n" doesn't conform to snake_case naming style (invalid-name)
solution7.py:229:12: C0103: Variable name "n" doesn't conform to snake_case naming style (invalid-name)
solution7.py:229:15: C0103: Variable name "v" doesn't conform to snake_case naming style (invalid-name)
************* Module solution8
solution8.py:10:136: C0303: Trailing whitespace (trailing-whitespace)
solution8.py:10:0: C0301: Line too long (136/100) (line-too-long)
solution8.py:12:0: C0301: Line too long (169/100) (line-too-long)
solution8.py:16:0: C0301: Line too long (385/100) (line-too-long)
solution8.py:28:0: C0301: Line too long (232/100) (line-too-long)
solution8.py:31:0: C0303: Trailing whitespace (trailing-whitespace)
solution8.py:33:237: C0303: Trailing whitespace (trailing-whitespace)
solution8.py:33:0: C0301: Line too long (237/100) (line-too-long)
solution8.py:39:0: C0303: Trailing whitespace (trailing-whitespace)
solution8.py:44:25: C0303: Trailing whitespace (trailing-whitespace)
solution8.py:48:25: C0303: Trailing whitespace (trailing-whitespace)
solution8.py:53:0: C0301: Line too long (142/100) (line-too-long)
solution8.py:54:0: C0301: Line too long (181/100) (line-too-long)
solution8.py:55:0: C0301: Line too long (168/100) (line-too-long)
solution8.py:57:0: C0301: Line too long (248/100) (line-too-long)
solution8.py:73:51: C0303: Trailing whitespace (trailing-whitespace)
solution8.py:78:0: C0303: Trailing whitespace (trailing-whitespace)
solution8.py:84:0: C0303: Trailing whitespace (trailing-whitespace)
solution8.py:86:0: C0301: Line too long (237/100) (line-too-long)
solution8.py:88:49: C0303: Trailing whitespace (trailing-whitespace)
solution8.py:117:0: C0301: Line too long (137/100) (line-too-long)
solution8.py:140:0: C0303: Trailing whitespace (trailing-whitespace)
solution8.py:164:129: C0303: Trailing whitespace (trailing-whitespace)
solution8.py:168:214: C0303: Trailing whitespace (trailing-whitespace)
solution8.py:164:0: C0301: Line too long (129/100) (line-too-long)
solution8.py:166:0: C0301: Line too long (151/100) (line-too-long)
solution8.py:168:0: C0301: Line too long (214/100) (line-too-long)
solution8.py:199:17: C0303: Trailing whitespace (trailing-whitespace)
solution8.py:7:0: W0105: String statement has no effect (pointless-string-statement)
solution8.py:20:0: C0103: Argument name "n" doesn't conform to snake_case naming style (invalid-name)
solution8.py:20:0: C0116: Missing function or method docstring (missing-function-docstring)
solution8.py:20:10: W0613: Unused argument 'val' (unused-argument)
solution8.py:20:15: W0613: Unused argument 'n' (unused-argument)
solution8.py:23:0: C0103: Argument name "n" doesn't conform to snake_case naming style (invalid-name)
solution8.py:23:0: C0116: Missing function or method docstring (missing-function-docstring)
solution8.py:23:15: W0613: Unused argument 'n' (unused-argument)
solution8.py:27:0: C0103: Argument name "n" doesn't conform to snake_case naming style (invalid-name)
solution8.py:27:0: C0116: Missing function or method docstring (missing-function-docstring)
solution8.py:28:4: C0103: Variable name "d" doesn't conform to snake_case naming style (invalid-name)
solution8.py:27:15: W0613: Unused argument 'n' (unused-argument)
solution8.py:32:0: C0103: Argument name "n" doesn't conform to snake_case naming style (invalid-name)
solution8.py:32:0: C0116: Missing function or method docstring (missing-function-docstring)
solution8.py:33:4: C0103: Variable name "d" doesn't conform to snake_case naming style (invalid-name)
solution8.py:35:4: C0200: Consider using enumerate instead of iterating with range and len (consider-using-enumerate)
solution8.py:47:0: W0105: String statement has no effect (pointless-string-statement)
solution8.py:52:0: W0105: String statement has no effect (pointless-string-statement)
solution8.py:61:0: C0103: Constant name "size" doesn't conform to UPPER_CASE naming style (invalid-name)
solution8.py:63:0: C0103: Constant name "collision" doesn't conform to UPPER_CASE naming style (invalid-name)
solution8.py:65:0: C0116: Missing function or method docstring (missing-function-docstring)
solution8.py:66:4: W0603: Using the global statement (global-statement)
solution8.py:66:4: C0103: Constant name "size" doesn't conform to UPPER_CASE naming style (invalid-name)
solution8.py:66:4: C0103: Constant name "table" doesn't conform to UPPER_CASE naming style (invalid-name)
solution8.py:66:4: C0103: Constant name "collision" doesn't conform to UPPER_CASE naming style (invalid-name)
solution8.py:71:0: C0116: Missing function or method docstring (missing-function-docstring)
solution8.py:71:16: W0613: Unused argument 'val' (unused-argument)
solution8.py:79:0: C0116: Missing function or method docstring (missing-function-docstring)
solution8.py:79:11: W0613: Unused argument 'val' (unused-argument)
solution8.py:85:0: C0116: Missing function or method docstring (missing-function-docstring)
solution8.py:86:4: C0103: Variable name "d" doesn't conform to snake_case naming style (invalid-name)
solution8.py:85:12: W0613: Unused argument 'val' (unused-argument)
solution8.py:86:4: W0612: Unused variable 'd' (unused-variable)
solution8.py:114:0: W0105: String statement has no effect (pointless-string-statement)
solution8.py:136:0: C0103: Argument name "li" doesn't conform to snake_case naming style (invalid-name)
solution8.py:136:0: C0116: Missing function or method docstring (missing-function-docstring)
solution8.py:139:4: C0103: Variable name "lh" doesn't conform to snake_case naming style (invalid-name)
solution8.py:143:16: C0103: Variable name "rh" doesn't conform to snake_case naming style (invalid-name)
solution8.py:146:12: C0103: Variable name "lh" doesn't conform to snake_case naming style (invalid-name)
solution8.py:142:12: W0612: Unused variable 'i' (unused-variable)
solution8.py:150:0: C0103: Constant name "b" doesn't conform to UPPER_CASE naming style (invalid-name)
solution8.py:152:0: C0103: Constant name "b" doesn't conform to UPPER_CASE naming style (invalid-name)
solution8.py:154:0: C0103: Constant name "b" doesn't conform to UPPER_CASE naming style (invalid-name)
solution8.py:158:0: W0105: String statement has no effect (pointless-string-statement)
solution8.py:163:0: W0105: String statement has no effect (pointless-string-statement)
solution8.py:193:4: W0621: Redefining name 'ans' from outer scope (line 201) (redefined-outer-name)
solution8.py:189:0: C0103: Argument name "li" doesn't conform to snake_case naming style (invalid-name)
solution8.py:189:0: C0116: Missing function or method docstring (missing-function-docstring)
solution8.py:192:4: C0103: Variable name "lh" doesn't conform to snake_case naming style (invalid-name)
solution8.py:195:12: C0103: Variable name "rh" doesn't conform to snake_case naming style (invalid-name)
solution8.py:198:8: C0103: Variable name "lh" doesn't conform to snake_case naming style (invalid-name)
solution8.py:189:0: R1710: Either all return statements in a function should return an expression, or none of them should. (inconsistent-return-statements)
solution8.py:193:4: W0612: Unused variable 'ans' (unused-variable)
solution8.py:194:8: W0612: Unused variable 'i' (unused-variable)
************* Module solution9
solution9.py:10:136: C0303: Trailing whitespace (trailing-whitespace)
solution9.py:10:0: C0301: Line too long (136/100) (line-too-long)
solution9.py:12:0: C0301: Line too long (169/100) (line-too-long)
solution9.py:16:0: C0301: Line too long (385/100) (line-too-long)
solution9.py:27:0: C0301: Line too long (232/100) (line-too-long)
solution9.py:31:0: C0303: Trailing whitespace (trailing-whitespace)
solution9.py:32:0: C0303: Trailing whitespace (trailing-whitespace)
solution9.py:34:237: C0303: Trailing whitespace (trailing-whitespace)
solution9.py:34:0: C0301: Line too long (237/100) (line-too-long)
solution9.py:41:0: C0303: Trailing whitespace (trailing-whitespace)
solution9.py:46:25: C0303: Trailing whitespace (trailing-whitespace)
solution9.py:50:25: C0303: Trailing whitespace (trailing-whitespace)
solution9.py:55:0: C0301: Line too long (142/100) (line-too-long)
solution9.py:56:0: C0301: Line too long (181/100) (line-too-long)
solution9.py:57:0: C0301: Line too long (168/100) (line-too-long)
solution9.py:59:0: C0301: Line too long (248/100) (line-too-long)
solution9.py:75:51: C0303: Trailing whitespace (trailing-whitespace)
solution9.py:90:19: C0303: Trailing whitespace (trailing-whitespace)
solution9.py:92:0: C0303: Trailing whitespace (trailing-whitespace)
solution9.py:94:0: C0301: Line too long (237/100) (line-too-long)
solution9.py:96:49: C0303: Trailing whitespace (trailing-whitespace)
solution9.py:130:0: C0301: Line too long (137/100) (line-too-long)
solution9.py:160:0: C0303: Trailing whitespace (trailing-whitespace)
solution9.py:161:0: C0303: Trailing whitespace (trailing-whitespace)
solution9.py:162:0: C0303: Trailing whitespace (trailing-whitespace)
solution9.py:181:129: C0303: Trailing whitespace (trailing-whitespace)
solution9.py:185:214: C0303: Trailing whitespace (trailing-whitespace)
solution9.py:181:0: C0301: Line too long (129/100) (line-too-long)
solution9.py:183:0: C0301: Line too long (151/100) (line-too-long)
solution9.py:185:0: C0301: Line too long (214/100) (line-too-long)
solution9.py:212:29: C0303: Trailing whitespace (trailing-whitespace)
solution9.py:212:0: W0311: Bad indentation. Found 17 spaces, expected 16 (bad-indentation)
solution9.py:213:0: C0303: Trailing whitespace (trailing-whitespace)
solution9.py:214:0: C0303: Trailing whitespace (trailing-whitespace)
solution9.py:215:0: C0303: Trailing whitespace (trailing-whitespace)
solution9.py:216:0: C0303: Trailing whitespace (trailing-whitespace)
solution9.py:217:0: C0303: Trailing whitespace (trailing-whitespace)
solution9.py:218:17: C0303: Trailing whitespace (trailing-whitespace)
solution9.py:7:0: W0105: String statement has no effect (pointless-string-statement)
solution9.py:20:0: C0103: Argument name "n" doesn't conform to snake_case naming style (invalid-name)
solution9.py:20:0: C0116: Missing function or method docstring (missing-function-docstring)
solution9.py:20:10: W0613: Unused argument 'val' (unused-argument)
solution9.py:20:15: W0613: Unused argument 'n' (unused-argument)
solution9.py:23:0: C0103: Argument name "n" doesn't conform to snake_case naming style (invalid-name)
solution9.py:23:0: C0116: Missing function or method docstring (missing-function-docstring)
solution9.py:23:15: W0613: Unused argument 'n' (unused-argument)
solution9.py:26:0: C0103: Argument name "n" doesn't conform to snake_case naming style (invalid-name)
solution9.py:26:0: C0116: Missing function or method docstring (missing-function-docstring)
solution9.py:27:4: C0103: Variable name "d" doesn't conform to snake_case naming style (invalid-name)
solution9.py:26:0: R1710: Either all return statements in a function should return an expression, or none of them should. (inconsistent-return-statements)
solution9.py:26:15: W0613: Unused argument 'n' (unused-argument)
solution9.py:33:0: C0103: Argument name "n" doesn't conform to snake_case naming style (invalid-name)
solution9.py:33:0: C0116: Missing function or method docstring (missing-function-docstring)
solution9.py:34:4: C0103: Variable name "d" doesn't conform to snake_case naming style (invalid-name)
solution9.py:49:0: W0105: String statement has no effect (pointless-string-statement)
solution9.py:54:0: W0105: String statement has no effect (pointless-string-statement)
solution9.py:63:0: C0103: Constant name "size" doesn't conform to UPPER_CASE naming style (invalid-name)
solution9.py:65:0: C0103: Constant name "collision" doesn't conform to UPPER_CASE naming style (invalid-name)
solution9.py:67:0: C0116: Missing function or method docstring (missing-function-docstring)
solution9.py:68:4: W0603: Using the global statement (global-statement)
solution9.py:68:4: C0103: Constant name "size" doesn't conform to UPPER_CASE naming style (invalid-name)
solution9.py:68:4: C0103: Constant name "table" doesn't conform to UPPER_CASE naming style (invalid-name)
solution9.py:68:4: C0103: Constant name "collision" doesn't conform to UPPER_CASE naming style (invalid-name)
solution9.py:73:0: C0116: Missing function or method docstring (missing-function-docstring)
solution9.py:79:4: W0603: Using the global statement (global-statement)
solution9.py:79:4: C0103: Constant name "collision" doesn't conform to UPPER_CASE naming style (invalid-name)
solution9.py:84:0: C0116: Missing function or method docstring (missing-function-docstring)
solution9.py:93:0: C0116: Missing function or method docstring (missing-function-docstring)
solution9.py:94:4: C0103: Variable name "d" doesn't conform to snake_case naming style (invalid-name)
solution9.py:100:4: C0103: Variable name "up" doesn't conform to snake_case naming style (invalid-name)
solution9.py:103:12: C0103: Variable name "up" doesn't conform to snake_case naming style (invalid-name)
solution9.py:127:0: W0105: String statement has no effect (pointless-string-statement)
solution9.py:149:0: C0103: Argument name "li" doesn't conform to snake_case naming style (invalid-name)
solution9.py:149:0: C0116: Missing function or method docstring (missing-function-docstring)
solution9.py:156:4: R1705: Unnecessary "else" after "return" (no-else-return)
solution9.py:167:0: C0103: Constant name "b" doesn't conform to UPPER_CASE naming style (invalid-name)
solution9.py:169:0: C0103: Constant name "b" doesn't conform to UPPER_CASE naming style (invalid-name)
solution9.py:171:0: C0103: Constant name "b" doesn't conform to UPPER_CASE naming style (invalid-name)
solution9.py:175:0: W0105: String statement has no effect (pointless-string-statement)
solution9.py:180:0: W0105: String statement has no effect (pointless-string-statement)
solution9.py:206:0: C0103: Argument name "li" doesn't conform to snake_case naming style (invalid-name)
solution9.py:206:0: C0116: Missing function or method docstring (missing-function-docstring)
solution9.py:209:4: C0200: Consider using enumerate instead of iterating with range and len (consider-using-enumerate)
solution9.py:206:0: R1710: Either all return statements in a function should return an expression, or none of them should. (inconsistent-return-statements)
solution9.py:1:0: R0801: Similar lines in 2 files
==solution27:38
==solution8:40
hash1('adelaide', 10) # 1
hash2('adelaide', 10) # 8
hash3('adelaide', 10) # 0
hash4('adelaide', 10) # 6

# %%
"""
# Exercise 2 - Hash Table
"""

# %%
"""
In this exercise, you will implement your own HashTable class. You will use chaining when collisions happen. The functions to be completed are
- `add_element(self, val)` function inserts an element into the hash table. Your code should first calculate the hash number of the input value `val`, then insert it into the table.
- `search(self, val)` function search for the input value `val` in the hash table. If the value is already inside the table, it should return `True`, otherwise `False`.

The provided test code first reads a list of books from a file `books.txt`, and then constructs a HashTable containing all books. You can think of it as a book management system in a library that keeps track of weather a book is inside the library.
"""

# %%
size = 0
table = []
collision = 0

def create_table(table_size):
    global size, table, collision
    size = table_size
    table = [[] for i in range(table_size)] # allocate an empty 2D list
    collision = 0 # number of collision

def add_element(val):
    #'''add an element into the hash table'''
    # insert the book name into the hash table, and
    # if collision happens, increase the value by 1
    # ~ 4 lines of code
    # INSERT YOUR CODE BELOW
    ...

def search(val):
    #'''search if the val is already in the hash table'''
    # ~ 5 lines of code
    # INSERT YOUR CODE BELOW
    ...

def hash4_b(val):
    d = {'a': 1, 'b': 2, 'c': 3, 'd': 5, 'e': 7, 'f': 11, 'g': 13, 'h': 17, 'i': 19, 'j': 23, 'k': 29, 'l': 31, 'm': 37, 'n': 41, 'o': 43, 'p': 47, 'q': 53, 'r': 59, 's': 61, 't': 67, 'u': 71, 'v': 73, 'w': 79, 'x': 83, 'y': 89, 'z': 97}
    # Copy your hash4 function to here
    # Note that you will need to handle exception
    # i.e if the character does not have a primary mapping, map it to 0
    # ~8 lines
    # INSERT YOUR CODE BELOW
    ...
# ----------------
# TEST CODE BELOW
with open('books.txt', 'r') as f:
    create_table(10)
    for line in f:
        line = line.strip()
        add_element(line)
print(f'Number of collision is {collision}') # should be 90
print(search('a clockwork orange'))          # should return True
print(search('1984'))                        # should return True
print(search('game of throne'))              # should return False
print(search('foundation'))                  # should return False

with open('books.txt', 'r') as f:
    create_table(100)
    for line in f:
        line = line.strip()
        add_element(line)
print(f'Number of collision is {collision}') # should be 34

# %%
"""
# Exercise 3 - Duplicate

Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.

### Example 1:

Input: nums = `[1,2,3,1]` <br>
Output: true
### Example 2:

Input: nums = `[1,2,3,4]` <br>
Output: false
### Example 3:

Input: nums = `[1,1,1,3,3,4,3,2,4,2]` <br>
Output: true


"""

# %%
def check_dup(li):
    # Enter your code below
    # ~ 7 lines (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 3 files
==solution21:45
==solution27:38
==solution8:40
hash1('adelaide', 10) # 1
hash2('adelaide', 10) # 8
hash3('adelaide', 10) # 0
hash4('adelaide', 10) # 6

# %%
"""
# Exercise 2 - Hash Table
"""

# %%
"""
In this exercise, you will implement your own HashTable class. You will use chaining when collisions happen. The functions to be completed are
- `add_element(self, val)` function inserts an element into the hash table. Your code should first calculate the hash number of the input value `val`, then insert it into the table.
- `search(self, val)` function search for the input value `val` in the hash table. If the value is already inside the table, it should return `True`, otherwise `False`.

The provided test code first reads a list of books from a file `books.txt`, and then constructs a HashTable containing all books. You can think of it as a book management system in a library that keeps track of weather a book is inside the library.
"""

# %%
size = 0
table = []
collision = 0

def create_table(table_size):
    global size, table, collision
    size = table_size
    table = [[] for i in range(table_size)] # allocate an empty 2D list
    collision = 0 # number of collision

def add_element(val):
    #'''add an element into the hash table'''
    # insert the book name into the hash table, and
    # if collision happens, increase the value by 1
    # ~ 4 lines of code
    # INSERT YOUR CODE BELOW
    ...

def search(val):
    #'''search if the val is already in the hash table'''
    # ~ 5 lines of code
    # INSERT YOUR CODE BELOW
    ...

def hash4_b(val):
    d = {'a': 1, 'b': 2, 'c': 3, 'd': 5, 'e': 7, 'f': 11, 'g': 13, 'h': 17, 'i': 19, 'j': 23, 'k': 29, 'l': 31, 'm': 37, 'n': 41, 'o': 43, 'p': 47, 'q': 53, 'r': 59, 's': 61, 't': 67, 'u': 71, 'v': 73, 'w': 79, 'x': 83, 'y': 89, 'z': 97}
    # Copy your hash4 function to here
    # Note that you will need to handle exception
    # i.e if the character does not have a primary mapping, map it to 0
    # ~8 lines
    # INSERT YOUR CODE BELOW
    ...
# ----------------
# TEST CODE BELOW
with open('books.txt', 'r') as f:
    create_table(10)
    for line in f:
        line = line.strip()
        add_element(line)
print(f'Number of collision is {collision}') # should be 90
print(search('a clockwork orange'))          # should return True
print(search('1984'))                        # should return True
print(search('game of throne'))              # should return False
print(search('foundation'))                  # should return False

with open('books.txt', 'r') as f:
    create_table(100)
    for line in f:
        line = line.strip()
        add_element(line)
print(f'Number of collision is {collision}') # should be 34

# %%
"""
# Exercise 3 - Duplicate

Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.

### Example 1:

Input: nums = `[1,2,3,1]` <br>
Output: true
### Example 2:

Input: nums = `[1,2,3,4]` <br>
Output: false
### Example 3:

Input: nums = `[1,1,1,3,3,4,3,2,4,2]` <br>
Output: true


"""

# %% (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 2 files
==solution11:95
==solution23:103
q1_build_graph(dag)
print(q1_show(dag))  # output: {'you': ['alice', 'bob', 'claire'], 'alice': ['danna'],
                  # 'bob': ['ed', 'danna'], 'claire': ['fiona', 'george'],
                  # 'danna': [], 'ed': [], 'fiona': [], 'george': []}

# TEST CASE FOR SECOND TASK BELOW
f = q1_bfs('you', 'fiona', dag)
print(f) # True
f = q1_bfs('alice', 'bob', dag)
print(f) # False

# %%
"""
<!-- END QUESTION -->

# Exercise 2 - Weighted DAG
"""

# %%
"""
Below is another weighted graph `MyWDAG`. Please read the code carefully and play with it. After you understand the code, please do the following two things:

### Build a weighted graph (1pt)

Please use the `add_node` and `add_edge` functions in `MyWDAG` class to build a graph below.

![Picture 2.jpg](attachment:78cd9b39-7083-41ef-8834-3a135c5fb5b6.jpg)

### Implement Dijkstra (1pt)

Please complete the `dijkstra()` function above and use the code below to test it.
"""

# %%
import copy

weighted_graph = {} # graph

def q2_add_edge(node1, node2, graph, weight = 1):
    # '''add an edge from node 1 to node 2'''
    node1 = node1.lower()
    node2 = node2.lower()

    if not node1 in graph:
        graph[node1] = {}
    if not node2 in graph:
        graph[node2] = {}
    graph[node1][node2] = weight

def q2_get_neighbor(node, graph):
    #'''get neighboring nodes'''
    node = node.lower()
    if node in graph:
        return copy.deepcopy(graph[node])

def q2_show(graph):
    return str(graph)

def q2_build_graph(graph):
    # DIJKSTRA TESTING
    # INSERT YOUR CODE BELOW
    # ~8 LINES
    q2_add_edge('a', 'b', graph, 5)
    q2_add_edge('a', 'c', graph, 0)
    q2_add_edge('b', 'd', graph, 15)
    q2_add_edge('b', 'e', graph, 20)
    q2_add_edge('c', 'd', graph, 30)
    q2_add_edge('c', 'e', graph, 35)
    q2_add_edge('d', 'f', graph, 20)
    q2_add_edge('e', 'f', graph, 10)


def q2_dijkstra(node1, node2, graph):
    node1 = node1.lower()
    node2 = node2.lower()

    max_c = 10000
    costs = {} (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 2 files
==solution24:116
==solution46:114
            return ans #returning the list


        # BELOW 3 LINES ARE TO AVOID INFINITE LOOP FOR YOU
        kk += 1
        if kk > 10:
            break

# ================
# TEST CASES BELOW

set_list1 = [ # first test input
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9, 10],
    [1, 3, 7],
    [2, 4, 6, 8]
]

set_list2 = [ # second test input
    [4, 2, 5],
    [1, 7],
    [2, 4, 8, 9, 10],
    [5, 10],
    [3, 5, 6],
    [2, 6],
    [1, 8, 9, 10]
]

s = greedy_set(set_list1)
print(s) # [[7, 8, 9, 10], [1, 2, 3], [4, 5, 6]]
print('---')
s = greedy_set(set_list2)
print(s) # [[2, 4, 8, 9, 10], [3, 5, 6], [1, 7]]

# %%
"""
# Exercise 3 - Knapsack Problem

It’s Boxing Day and you are in a shopping contest! You have one shopping bag and you would like to fill your bags with items that have the largest sum of values. Please solve this problem using dynamic programming.
"""

# %%
bag1 = 4 # the maximum weight for the bag
item_list1 = [
    ['guitar', 4, 3000],
    ['speaker', 1, 1500],
    ['laptop', 3, 2000]
]

bag2 = 7 # the maximum weight for the bag
item_list2 = [
    ['pasta', 1, 700],
    ['soups', 3, 300],
    ['pork', 3, 700],
    ['steak', 4, 1000],
    ['lamb', 3, 1200],
    ['Cheese', 1, 900],
    ['Mushroom', 1, 800],
]

def knapsack_dp(bag_size, items):
    num_row = len(items)
    num_col = bag_size
    grid = [[0]* (num_col+1) for _ in range(num_row)] # initialise the grid
    prev_max = 0

    # INSERT YOUR CODE
    # Update the DP table (the variable grid)
    # ~ 15 lines
    for i in range(num_row):
        for j in range(num_col+1): (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 2 files
==solution15:98
==solution22:99
q1_build_graph(dag)
print(q1_show(dag))  # output: {'you': ['alice', 'bob', 'claire'], 'alice': ['danna'],
                  # 'bob': ['ed', 'danna'], 'claire': ['fiona', 'george'],
                  # 'danna': [], 'ed': [], 'fiona': [], 'george': []}

# TEST CASE FOR SECOND TASK BELOW
f = q1_bfs('you', 'fiona', dag)
print(f) # True
f = q1_bfs('alice', 'bob', dag)
print(f) # False

# %%
"""
<!-- END QUESTION -->

# Exercise 2 - Weighted DAG
"""

# %%
"""
Below is another weighted graph `MyWDAG`. Please read the code carefully and play with it. After you understand the code, please do the following two things:

### Build a weighted graph (1pt)

Please use the `add_node` and `add_edge` functions to build a graph below.

![Picture 2.jpg](attachment:78cd9b39-7083-41ef-8834-3a135c5fb5b6.jpg)

### Implement Dijkstra (1pt)

Please complete the `dijkstra()` function above and use the code below to test it.
"""

# %%
import copy

mywdag = {} # MyWDAG

def q2_add_edge(node1, node2, graph, weight = 1):
    # '''add an edge from node 1 to node 2'''
    node1 = node1.lower()
    node2 = node2.lower()

    if not node1 in graph:
        graph[node1] = {}
    if not node2 in graph:
        graph[node2] = {}
    graph[node1][node2] = weight

def q2_get_neighbor(node, graph):
    #'''get neighboring nodes'''
    node = node.lower()
    if node in graph:
        return copy.deepcopy(graph[node])

def q2_show(graph):
    return str(graph)

def q2_build_graph(graph):
    # DIJKSTRA TESTING
    # INSERT YOUR CODE BELOW
    # ~8 LINES
    q2_add_edge('A', 'B', graph, weight = 5)
    q2_add_edge('A', 'C', graph, weight = 0)
    q2_add_edge('B', 'D', graph, weight = 15)
    q2_add_edge('B', 'E', graph, weight = 20)
    q2_add_edge('C', 'D', graph, weight = 30)
    q2_add_edge('C', 'E', graph, weight = 35)
    q2_add_edge('D', 'F', graph, weight = 20)
    q2_add_edge('E', 'F', graph, weight = 10)
 (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 2 files
==solution44:94
==solution48:121
        ...


        # BELOW 3 LINES ARE TO AVOID INFINITE LOOP FOR YOU
        kk += 1
        if kk > 10:
            break

# ================
# TEST CASES BELOW

set_list1 = [ # first test input
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9, 10],
    [1, 3, 7],
    [2, 4, 6, 8]
]

set_list2 = [ # second test input
    [4, 2, 5],
    [1, 7],
    [2, 4, 8, 9, 10],
    [5, 10],
    [3, 5, 6],
    [2, 6],
    [1, 8, 9, 10]
]

s = greedy_set(set_list1)
print(s) # [[7, 8, 9, 10], [1, 2, 3], [4, 5, 6]]
print('---')
s = greedy_set(set_list2)
print(s) # [[2, 4, 8, 9, 10], [3, 5, 6], [1, 7]]

# %%
"""
# Exercise 3 - Knapsack Problem

It’s Boxing Day and you are in a shopping contest! You have one shopping bag and you would like to fill your bags with items that have the largest sum of values. Please solve this problem using dynamic programming.
"""

# %%
bag1 = 4 # the maximum weight for the bag
item_list1 = [
    ['guitar', 4, 3000],
    ['speaker', 1, 1500],
    ['laptop', 3, 2000]
]

bag2 = 7 # the maximum weight for the bag
item_list2 = [
    ['pasta', 1, 700],
    ['soups', 3, 300],
    ['pork', 3, 700],
    ['steak', 4, 1000],
    ['lamb', 3, 1200],
    ['Cheese', 1, 900],
    ['Mushroom', 1, 800],
]

def knapsack_dp(bag_size, items):
    num_row = len(items)
    num_col = bag_size
    grid = [[0]* (num_col+1) for _ in range(num_row)] # initialise the grid
    prev_max = 0

    # INSERT YOUR CODE
    # Update the DP table (the variable grid)
    # ~ 15 lines (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 3 files
==solution24:116
==solution41:130
==solution46:114
        return ans


        # BELOW 3 LINES ARE TO AVOID INFINITE LOOP FOR YOU
        kk += 1
        if kk > 10:
            break

# ================
# TEST CASES BELOW

set_list1 = [ # first test input
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9, 10],
    [1, 3, 7],
    [2, 4, 6, 8]
]

set_list2 = [ # second test input
    [4, 2, 5],
    [1, 7],
    [2, 4, 8, 9, 10],
    [5, 10],
    [3, 5, 6],
    [2, 6],
    [1, 8, 9, 10]
]

s = greedy_set(set_list1)
print(s) # [[7, 8, 9, 10], [1, 2, 3], [4, 5, 6]]
print('---')
s = greedy_set(set_list2)
print(s) # [[2, 4, 8, 9, 10], [3, 5, 6], [1, 7]]

# %%
"""
# Exercise 3 - Knapsack Problem

It’s Boxing Day and you are in a shopping contest! You have one shopping bag and you would like to fill your bags with items that have the largest sum of values. Please solve this problem using dynamic programming.
"""

# %%
bag1 = 4 # the maximum weight for the bag
item_list1 = [
    ['guitar', 4, 3000],
    ['speaker', 1, 1500],
    ['laptop', 3, 2000]
]

bag2 = 7 # the maximum weight for the bag
item_list2 = [
    ['pasta', 1, 700],
    ['soups', 3, 300],
    ['pork', 3, 700],
    ['steak', 4, 1000],
    ['lamb', 3, 1200],
    ['Cheese', 1, 900],
    ['Mushroom', 1, 800],
]

def knapsack_dp(bag_size, items):
    num_row = len(items)
    num_col = bag_size
    grid = [[0]* (num_col+1) for _ in range(num_row)] # initialise the grid
    prev_max = 0

    # INSERT YOUR CODE
    # Update the DP table (the variable grid)
    # ~ 15 lines (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 3 files
==solution25:115
==solution45:108
==solution52:105
            return ans

        # BELOW 3 LINES ARE TO AVOID INFINITE LOOP FOR YOU
        kk += 1
        if kk > 10:
            break

# ================
# TEST CASES BELOW

set_list1 = [ # first test input
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9, 10],
    [1, 3, 7],
    [2, 4, 6, 8]
]

set_list2 = [ # second test input
    [4, 2, 5],
    [1, 7],
    [2, 4, 8, 9, 10],
    [5, 10],
    [3, 5, 6],
    [2, 6],
    [1, 8, 9, 10]
]

s = greedy_set(set_list1)
print(s) # [[7, 8, 9, 10], [1, 2, 3], [4, 5, 6]]
print('---')
s = greedy_set(set_list2)
print(s) # [[2, 4, 8, 9, 10], [3, 5, 6], [1, 7]]

# %%
"""
# Exercise 3 - Knapsack Problem

It’s Boxing Day and you are in a shopping contest! You have one shopping bag and you would like to fill your bags with items that have the largest sum of values. Please solve this problem using dynamic programming.
"""

# %%
bag1 = 4 # the maximum weight for the bag
item_list1 = [
    ['guitar', 4, 3000],
    ['speaker', 1, 1500],
    ['laptop', 3, 2000]
]

bag2 = 7 # the maximum weight for the bag
item_list2 = [
    ['pasta', 1, 700],
    ['soups', 3, 300],
    ['pork', 3, 700],
    ['steak', 4, 1000],
    ['lamb', 3, 1200],
    ['Cheese', 1, 900],
    ['Mushroom', 1, 800],
]

def knapsack_dp(bag_size, items):
    num_row = len(items)
    num_col = bag_size
    grid = [[0]* (num_col+1) for _ in range(num_row)] # initialise the grid
    prev_max = 0

    # INSERT YOUR CODE
    # Update the DP table (the variable grid)
    # ~ 15 lines (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 2 files
==solution48:125
==solution52:108
        kk += 1
        if kk > 10:
            break

# ================
# TEST CASES BELOW

set_list1 = [ # first test input
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9, 10],
    [1, 3, 7],
    [2, 4, 6, 8]
]

set_list2 = [ # second test input
    [4, 2, 5],
    [1, 7],
    [2, 4, 8, 9, 10],
    [5, 10],
    [3, 5, 6],
    [2, 6],
    [1, 8, 9, 10]
]

s = greedy_set(set_list1)
print(s) # [[7, 8, 9, 10], [1, 2, 3], [4, 5, 6]]
print('---')
s = greedy_set(set_list2)
print(s) # [[2, 4, 8, 9, 10], [3, 5, 6], [1, 7]]

# %%
"""
# Exercise 3 - Knapsack Problem

It’s Boxing Day and you are in a shopping contest! You have one shopping bag and you would like to fill your bags with items that have the largest sum of values. Please solve this problem using dynamic programming.
"""

# %%
bag1 = 4 # the maximum weight for the bag
item_list1 = [
    ['guitar', 4, 3000],
    ['speaker', 1, 1500],
    ['laptop', 3, 2000]
]

bag2 = 7 # the maximum weight for the bag
item_list2 = [
    ['pasta', 1, 700],
    ['soups', 3, 300],
    ['pork', 3, 700],
    ['steak', 4, 1000],
    ['lamb', 3, 1200],
    ['Cheese', 1, 900],
    ['Mushroom', 1, 800],
]

def knapsack_dp(bag_size, items):
    num_row = len(items)
    num_col = bag_size
    grid = [[0]* (num_col+1) for _ in range(num_row)] # initialise the grid
    prev_max = 0

    # INSERT YOUR CODE
    # Update the DP table (the variable grid)
    # ~ 15 lines
    ... (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 2 files
==solution43:127
==solution45:111
        kk += 1
        if kk > 10:
            break

# ================
# TEST CASES BELOW

set_list1 = [ # first test input
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9, 10],
    [1, 3, 7],
    [2, 4, 6, 8]
]

set_list2 = [ # second test input
    [4, 2, 5],
    [1, 7],
    [2, 4, 8, 9, 10],
    [5, 10],
    [3, 5, 6],
    [2, 6],
    [1, 8, 9, 10]
]

s = greedy_set(set_list1)
print(s) # [[7, 8, 9, 10], [1, 2, 3], [4, 5, 6]]
print('---')
s = greedy_set(set_list2)
print(s) # [[2, 4, 8, 9, 10], [3, 5, 6], [1, 7]]

# %%
"""
# Exercise 3 - Knapsack Problem

It’s Boxing Day and you are in a shopping contest! You have one shopping bag and you would like to fill your bags with items that have the largest sum of values. Please solve this problem using dynamic programming.
"""

# %%
bag1 = 4 # the maximum weight for the bag
item_list1 = [
    ['guitar', 4, 3000],
    ['speaker', 1, 1500],
    ['laptop', 3, 2000]
]

bag2 = 7 # the maximum weight for the bag
item_list2 = [
    ['pasta', 1, 700],
    ['soups', 3, 300],
    ['pork', 3, 700],
    ['steak', 4, 1000],
    ['lamb', 3, 1200],
    ['Cheese', 1, 900],
    ['Mushroom', 1, 800],
]

def knapsack_dp(bag_size, items):
    num_row = len(items)
    num_col = bag_size
    grid = [[0]* (num_col+1) for _ in range(num_row)] # initialise the grid
    prev_max = 0

    # INSERT YOUR CODE
    # Update the DP table (the variable grid)
    # ~ 15 lines
    for i in range(0,num_row): (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 3 files
==solution24:120
==solution44:98
==solution46:118
        kk += 1
        if kk > 10:
            break

# ================
# TEST CASES BELOW

set_list1 = [ # first test input
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9, 10],
    [1, 3, 7],
    [2, 4, 6, 8]
]

set_list2 = [ # second test input
    [4, 2, 5],
    [1, 7],
    [2, 4, 8, 9, 10],
    [5, 10],
    [3, 5, 6],
    [2, 6],
    [1, 8, 9, 10]
]

s = greedy_set(set_list1)
print(s) # [[7, 8, 9, 10], [1, 2, 3], [4, 5, 6]]
print('---')
s = greedy_set(set_list2)
print(s) # [[2, 4, 8, 9, 10], [3, 5, 6], [1, 7]]

# %%
"""
# Exercise 3 - Knapsack Problem

It’s Boxing Day and you are in a shopping contest! You have one shopping bag and you would like to fill your bags with items that have the largest sum of values. Please solve this problem using dynamic programming.
"""

# %%
bag1 = 4 # the maximum weight for the bag
item_list1 = [
    ['guitar', 4, 3000],
    ['speaker', 1, 1500],
    ['laptop', 3, 2000]
]

bag2 = 7 # the maximum weight for the bag
item_list2 = [
    ['pasta', 1, 700],
    ['soups', 3, 300],
    ['pork', 3, 700],
    ['steak', 4, 1000],
    ['lamb', 3, 1200],
    ['Cheese', 1, 900],
    ['Mushroom', 1, 800],
]

def knapsack_dp(bag_size, items):
    num_row = len(items)
    num_col = bag_size
    grid = [[0]* (num_col+1) for _ in range(num_row)] # initialise the grid
    prev_max = 0

    # INSERT YOUR CODE
    # Update the DP table (the variable grid)
    # ~ 15 lines
    for i in range(num_row): (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 12 files
==solution24:120
==solution25:118
==solution41:134
==solution43:127
==solution44:98
==solution45:111
==solution46:118
==solution48:125
==solution50:117
==solution52:108
==solution53:107
==solution55:108
        kk += 1
        if kk > 10:
            break

# ================
# TEST CASES BELOW

set_list1 = [ # first test input
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9, 10],
    [1, 3, 7],
    [2, 4, 6, 8]
]

set_list2 = [ # second test input
    [4, 2, 5],
    [1, 7],
    [2, 4, 8, 9, 10],
    [5, 10],
    [3, 5, 6],
    [2, 6],
    [1, 8, 9, 10]
]

s = greedy_set(set_list1)
print(s) # [[7, 8, 9, 10], [1, 2, 3], [4, 5, 6]]
print('---')
s = greedy_set(set_list2)
print(s) # [[2, 4, 8, 9, 10], [3, 5, 6], [1, 7]]

# %%
"""
# Exercise 3 - Knapsack Problem

It’s Boxing Day and you are in a shopping contest! You have one shopping bag and you would like to fill your bags with items that have the largest sum of values. Please solve this problem using dynamic programming.
"""

# %%
bag1 = 4 # the maximum weight for the bag
item_list1 = [
    ['guitar', 4, 3000],
    ['speaker', 1, 1500],
    ['laptop', 3, 2000]
]

bag2 = 7 # the maximum weight for the bag
item_list2 = [
    ['pasta', 1, 700],
    ['soups', 3, 300],
    ['pork', 3, 700],
    ['steak', 4, 1000],
    ['lamb', 3, 1200],
    ['Cheese', 1, 900],
    ['Mushroom', 1, 800],
]

def knapsack_dp(bag_size, items):
    num_row = len(items)
    num_col = bag_size
    grid = [[0]* (num_col+1) for _ in range(num_row)] # initialise the grid
    prev_max = 0

    # INSERT YOUR CODE
    # Update the DP table (the variable grid)
    # ~ 15 lines (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 2 files
==solution15:94
==solution29:97
        return False


# TEST CASE FOR FIRST TASK BELOW
q1_build_graph(dag)
print(q1_show(dag))  # output: {'you': ['alice', 'bob', 'claire'], 'alice': ['danna'],
                  # 'bob': ['ed', 'danna'], 'claire': ['fiona', 'george'],
                  # 'danna': [], 'ed': [], 'fiona': [], 'george': []}

# TEST CASE FOR SECOND TASK BELOW
f = q1_bfs('you', 'fiona', dag)
print(f) # True
f = q1_bfs('alice', 'bob', dag)
print(f) # False

# %%
"""
<!-- END QUESTION -->

# Exercise 2 - Weighted DAG
"""

# %%
"""
Below is another weighted graph `MyWDAG`. Please read the code carefully and play with it. After you understand the code, please do the following two things:

### Build a weighted graph (1pt)

Please use the `add_node` and `add_edge` functions to build a graph below.

![Picture 2.jpg](attachment:78cd9b39-7083-41ef-8834-3a135c5fb5b6.jpg)

### Implement Dijkstra (1pt)

Please complete the `dijkstra()` function above and use the code below to test it.
"""

# %%
import copy

mywdag = {} # MyWDAG

def q2_add_edge(node1, node2, graph, weight = 1):
    # '''add an edge from node 1 to node 2'''
    node1 = node1.lower()
    node2 = node2.lower()

    if not node1 in graph:
        graph[node1] = {}
    if not node2 in graph:
        graph[node2] = {}
    graph[node1][node2] = weight

def q2_get_neighbor(node, graph):
    #'''get neighboring nodes'''
    node = node.lower()
    if node in graph:
        return copy.deepcopy(graph[node])

def q2_show(graph):
    return str(graph)

def q2_build_graph(graph):
    # DIJKSTRA TESTING
    # INSERT YOUR CODE BELOW
    # ~8 LINES (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 2 files
==solution28:101
==solution34:92
    ...

# TEST CASE FOR FIRST TASK BELOW
q1_build_graph(dag)
print(q1_show(dag))  # output: {'you': ['alice', 'bob', 'claire'], 'alice': ['danna'],
                  # 'bob': ['ed', 'danna'], 'claire': ['fiona', 'george'],
                  # 'danna': [], 'ed': [], 'fiona': [], 'george': []}

# TEST CASE FOR SECOND TASK BELOW
f = q1_bfs('you', 'fiona', dag)
print(f) # True
f = q1_bfs('alice', 'bob', dag)
print(f) # False

# %%
"""
<!-- END QUESTION -->

# Exercise 2 - Weighted DAG
"""

# %%
"""
Below is another weighted graph `MyWDAG`. Please read the code carefully and play with it. After you understand the code, please do the following two things:

### Build a weighted graph (1pt)

Please use the `add_node` and `add_edge` functions to build a graph below.

![Picture 2.jpg](attachment:78cd9b39-7083-41ef-8834-3a135c5fb5b6.jpg)

### Implement Dijkstra (1pt)

Please complete the `dijkstra()` function above and use the code below to test it.
"""

# %%
import copy

mywdag = {} # MyWDAG

def q2_add_edge(node1, node2, graph, weight = 1):
    # '''add an edge from node 1 to node 2'''
    node1 = node1.lower()
    node2 = node2.lower()

    if not node1 in graph:
        graph[node1] = {}
    if not node2 in graph:
        graph[node2] = {}
    graph[node1][node2] = weight

def q2_get_neighbor(node, graph):
    #'''get neighboring nodes'''
    node = node.lower()
    if node in graph:
        return copy.deepcopy(graph[node])

def q2_show(graph):
    return str(graph)

def q2_build_graph(graph):
    # DIJKSTRA TESTING
    # INSERT YOUR CODE BELOW
    # ~8 LINES (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 3 files
==solution26:96
==solution31:93
==solution35:98
    return False

# TEST CASE FOR FIRST TASK BELOW
q1_build_graph(dag)
print(q1_show(dag))  # output: {'you': ['alice', 'bob', 'claire'], 'alice': ['danna'],
                  # 'bob': ['ed', 'danna'], 'claire': ['fiona', 'george'],
                  # 'danna': [], 'ed': [], 'fiona': [], 'george': []}

# TEST CASE FOR SECOND TASK BELOW
f = q1_bfs('you', 'fiona', dag)
print(f) # True
f = q1_bfs('alice', 'bob', dag)
print(f) # False

# %%
"""
<!-- END QUESTION -->

# Exercise 2 - Weighted DAG
"""

# %%
"""
Below is another weighted graph `MyWDAG`. Please read the code carefully and play with it. After you understand the code, please do the following two things:

### Build a weighted graph (1pt)

Please use the `add_node` and `add_edge` functions to build a graph below.

![Picture 2.jpg](attachment:78cd9b39-7083-41ef-8834-3a135c5fb5b6.jpg)

### Implement Dijkstra (1pt)

Please complete the `dijkstra()` function above and use the code below to test it.
"""

# %%
import copy

mywdag = {} # MyWDAG

def q2_add_edge(node1, node2, graph, weight = 1):
    # '''add an edge from node 1 to node 2'''
    node1 = node1.lower()
    node2 = node2.lower()

    if not node1 in graph:
        graph[node1] = {}
    if not node2 in graph:
        graph[node2] = {}
    graph[node1][node2] = weight

def q2_get_neighbor(node, graph):
    #'''get neighboring nodes'''
    node = node.lower()
    if node in graph:
        return copy.deepcopy(graph[node])

def q2_show(graph):
    return str(graph)

def q2_build_graph(graph):
    # DIJKSTRA TESTING
    # INSERT YOUR CODE BELOW
    # ~8 LINES (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 13 files
==solution15:98
==solution22:99
==solution26:99
==solution28:104
==solution29:101
==solution30:106
==solution31:96
==solution32:100
==solution34:95
==solution35:101
==solution36:98
==solution37:100
==solution39:107
q1_build_graph(dag)
print(q1_show(dag))  # output: {'you': ['alice', 'bob', 'claire'], 'alice': ['danna'],
                  # 'bob': ['ed', 'danna'], 'claire': ['fiona', 'george'],
                  # 'danna': [], 'ed': [], 'fiona': [], 'george': []}

# TEST CASE FOR SECOND TASK BELOW
f = q1_bfs('you', 'fiona', dag)
print(f) # True
f = q1_bfs('alice', 'bob', dag)
print(f) # False

# %%
"""
<!-- END QUESTION -->

# Exercise 2 - Weighted DAG
"""

# %%
"""
Below is another weighted graph `MyWDAG`. Please read the code carefully and play with it. After you understand the code, please do the following two things:

### Build a weighted graph (1pt)

Please use the `add_node` and `add_edge` functions to build a graph below.

![Picture 2.jpg](attachment:78cd9b39-7083-41ef-8834-3a135c5fb5b6.jpg)

### Implement Dijkstra (1pt)

Please complete the `dijkstra()` function above and use the code below to test it.
"""

# %%
import copy

mywdag = {} # MyWDAG

def q2_add_edge(node1, node2, graph, weight = 1):
    # '''add an edge from node 1 to node 2'''
    node1 = node1.lower()
    node2 = node2.lower()

    if not node1 in graph:
        graph[node1] = {}
    if not node2 in graph:
        graph[node2] = {}
    graph[node1][node2] = weight

def q2_get_neighbor(node, graph):
    #'''get neighboring nodes'''
    node = node.lower()
    if node in graph:
        return copy.deepcopy(graph[node])

def q2_show(graph):
    return str(graph)

def q2_build_graph(graph):
    # DIJKSTRA TESTING
    # INSERT YOUR CODE BELOW
    # ~8 LINES (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 3 files
==solution11:95
==solution23:103
==solution4:98
q1_build_graph(dag)
print(q1_show(dag))  # output: {'you': ['alice', 'bob', 'claire'], 'alice': ['danna'],
                  # 'bob': ['ed', 'danna'], 'claire': ['fiona', 'george'],
                  # 'danna': [], 'ed': [], 'fiona': [], 'george': []}

# TEST CASE FOR SECOND TASK BELOW
f = q1_bfs('you', 'fiona', dag)
print(f) # True
f = q1_bfs('alice', 'bob', dag)
print(f) # False

# %%
"""
<!-- END QUESTION -->

# Exercise 2 - Weighted DAG
"""

# %%
"""
Below is another weighted graph `MyWDAG`. Please read the code carefully and play with it. After you understand the code, please do the following two things:

### Build a weighted graph (1pt)

Please use the `add_node` and `add_edge` functions in `MyWDAG` class to build a graph below.

![Picture 2.jpg](attachment:78cd9b39-7083-41ef-8834-3a135c5fb5b6.jpg)

### Implement Dijkstra (1pt)

Please complete the `dijkstra()` function above and use the code below to test it.
"""

# %%
import copy

weighted_graph = {} # graph

def q2_add_edge(node1, node2, graph, weight = 1):
    # '''add an edge from node 1 to node 2'''
    node1 = node1.lower()
    node2 = node2.lower()

    if not node1 in graph:
        graph[node1] = {}
    if not node2 in graph:
        graph[node2] = {}
    graph[node1][node2] = weight

def q2_get_neighbor(node, graph):
    #'''get neighboring nodes'''
    node = node.lower()
    if node in graph:
        return copy.deepcopy(graph[node])

def q2_show(graph):
    return str(graph)

def q2_build_graph(graph):
    # DIJKSTRA TESTING
    # INSERT YOUR CODE BELOW
    # ~8 LINES (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 2 files
==solution25:125
==solution56:137
set_list1 = [ # first test input
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9, 10],
    [1, 3, 7],
    [2, 4, 6, 8]
]

set_list2 = [ # second test input
    [4, 2, 5],
    [1, 7],
    [2, 4, 8, 9, 10],
    [5, 10],
    [3, 5, 6],
    [2, 6],
    [1, 8, 9, 10]
]

s = greedy_set(set_list1)
print(s) # [[7, 8, 9, 10], [1, 2, 3], [4, 5, 6]]
print('---')
s = greedy_set(set_list2)
print(s) # [[2, 4, 8, 9, 10], [3, 5, 6], [1, 7]]

# %%
"""
# Exercise 3 - Knapsack Problem

It’s Boxing Day and you are in a shopping contest! You have one shopping bag and you would like to fill your bags with items that have the largest sum of values. Please solve this problem using dynamic programming.
"""

# %%
bag1 = 4 # the maximum weight for the bag
item_list1 = [
    ['guitar', 4, 3000],
    ['speaker', 1, 1500],
    ['laptop', 3, 2000]
]

bag2 = 7 # the maximum weight for the bag
item_list2 = [
    ['pasta', 1, 700],
    ['soups', 3, 300],
    ['pork', 3, 700],
    ['steak', 4, 1000],
    ['lamb', 3, 1200],
    ['Cheese', 1, 900],
    ['Mushroom', 1, 800],
]

def knapsack_dp(bag_size, items):
    num_row = len(items)
    num_col = bag_size
    grid = [[0]* (num_col+1) for _ in range(num_row)] # initialise the grid
    prev_max = 0

    # INSERT YOUR CODE
    # Update the DP table (the variable grid)
    # ~ 15 lines
    # print(grid) (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 14 files
==solution24:127
==solution25:125
==solution41:141
==solution43:134
==solution44:105
==solution45:118
==solution46:125
==solution48:132
==solution50:124
==solution51:107
==solution52:115
==solution53:114
==solution55:115
==solution56:137
set_list1 = [ # first test input
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9, 10],
    [1, 3, 7],
    [2, 4, 6, 8]
]

set_list2 = [ # second test input
    [4, 2, 5],
    [1, 7],
    [2, 4, 8, 9, 10],
    [5, 10],
    [3, 5, 6],
    [2, 6],
    [1, 8, 9, 10]
]

s = greedy_set(set_list1)
print(s) # [[7, 8, 9, 10], [1, 2, 3], [4, 5, 6]]
print('---')
s = greedy_set(set_list2)
print(s) # [[2, 4, 8, 9, 10], [3, 5, 6], [1, 7]]

# %%
"""
# Exercise 3 - Knapsack Problem

It’s Boxing Day and you are in a shopping contest! You have one shopping bag and you would like to fill your bags with items that have the largest sum of values. Please solve this problem using dynamic programming.
"""

# %%
bag1 = 4 # the maximum weight for the bag
item_list1 = [
    ['guitar', 4, 3000],
    ['speaker', 1, 1500],
    ['laptop', 3, 2000]
]

bag2 = 7 # the maximum weight for the bag
item_list2 = [
    ['pasta', 1, 700],
    ['soups', 3, 300],
    ['pork', 3, 700],
    ['steak', 4, 1000],
    ['lamb', 3, 1200],
    ['Cheese', 1, 900],
    ['Mushroom', 1, 800],
]

def knapsack_dp(bag_size, items):
    num_row = len(items)
    num_col = bag_size
    grid = [[0]* (num_col+1) for _ in range(num_row)] # initialise the grid
    prev_max = 0

    # INSERT YOUR CODE
    # Update the DP table (the variable grid)
    # ~ 15 lines (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 15 files
==solution24:127
==solution25:125
==solution41:141
==solution43:134
==solution44:105
==solution45:118
==solution46:125
==solution48:132
==solution49:127
==solution50:124
==solution51:107
==solution52:115
==solution53:114
==solution55:115
==solution56:137
set_list1 = [ # first test input
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9, 10],
    [1, 3, 7],
    [2, 4, 6, 8]
]

set_list2 = [ # second test input
    [4, 2, 5],
    [1, 7],
    [2, 4, 8, 9, 10],
    [5, 10],
    [3, 5, 6],
    [2, 6],
    [1, 8, 9, 10]
]

s = greedy_set(set_list1)
print(s) # [[7, 8, 9, 10], [1, 2, 3], [4, 5, 6]]
print('---')
s = greedy_set(set_list2)
print(s) # [[2, 4, 8, 9, 10], [3, 5, 6], [1, 7]]

# %%
"""
# Exercise 3 - Knapsack Problem

It’s Boxing Day and you are in a shopping contest! You have one shopping bag and you would like to fill your bags with items that have the largest sum of values. Please solve this problem using dynamic programming.
"""

# %%
bag1 = 4 # the maximum weight for the bag
item_list1 = [
    ['guitar', 4, 3000],
    ['speaker', 1, 1500],
    ['laptop', 3, 2000]
]

bag2 = 7 # the maximum weight for the bag
item_list2 = [
    ['pasta', 1, 700],
    ['soups', 3, 300],
    ['pork', 3, 700],
    ['steak', 4, 1000],
    ['lamb', 3, 1200],
    ['Cheese', 1, 900],
    ['Mushroom', 1, 800],
]

def knapsack_dp(bag_size, items):
    num_row = len(items)
    num_col = bag_size
    grid = [[0]* (num_col+1) for _ in range(num_row)] # initialise the grid
    prev_max = 0

    # INSERT YOUR CODE
    # Update the DP table (the variable grid) (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 4 files
==solution11:30
==solution15:30
==solution23:30
==solution36:30
import copy

dag = {} # DAG

def q1_add_node(node, graph):
    # '''add a node into the graph'''
    node = node.lower()
    if node not in graph:
        graph[node] = []

def q1_add_edge(node1, node2, graph):
    # '''add an edge from node 1 to node 2'''
    node1 = node1.lower()
    node2 = node2.lower()

    # add nodes into graph
    q1_add_node(node1, graph)
    q1_add_node(node2, graph)

    # add edge node1 -> node2
    node = graph[node1]
    if node2 not in node:
        node.append(node2)

def q1_get_neighbor(node, graph):
    #'''get neighboring nodes'''
    node = node.lower()

    if node in graph:
        return copy.deepcopy(graph[node])

def q1_show(graph):
    return str(graph)

def q1_build_graph(graph):
    # INSERT YOUR CODE BELOW
    # ~ 7 lines
    q1_add_edge('you', 'alice', graph)
    q1_add_edge('you', 'bob', graph)
    q1_add_edge('you', 'claire', graph)
    q1_add_edge('alice', 'danna', graph)
    q1_add_edge('bob', 'ed', graph)
    q1_add_edge('bob', 'danna', graph)
    q1_add_edge('claire', 'fiona', graph)
    q1_add_edge('claire', 'george', graph)
    # END OF YOUR CODE

def q1_bfs(node1, node2, graph):
    #'''return True if there is a path between node1 and node2'''
    node1 = node1.lower()
    node2 = node2.lower()

    # INSERT YOUR CODE BELOW
    # ~ 8 lines (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 2 files
==solution21:158
==solution27:145
b = check_dup([1, 3, 1, 2])
print(b) # True
b = check_dup([1, 2, 3, 4])
print(b) # False
b = check_dup([1,1,1,3,3,4,3,2,4,2])
print(b) # True

# %%
"""
# Exercise 4 - Two Sum
"""

# %%
"""
Given an array of **integers** nums and an **integer** target, return indices of the two numbers such that they add up to target.

You may assume that each input would have **exactly one solution**, and you may not use the same element twice. You can return the answer in any order.

**Note:** the most intuitive solution is $O(n^2)$ that checks every pair of the numbers. However, you can use hash table to solve the question in linear time! You will get full mark by using either of the approach.

### Example 1:

Input: nums = `[2,7,11,15]`, target = `9` <br>
Output: `[0,1]` <br>
Explanation: Because `nums[0] + nums[1] == 9`, we return `[0, 1]`.

### Example 2:

Input: nums = `[3,2,4]`, target = `6` <br>
Output: `[1,2]`

### Example 3:

Input: nums = `[3,3]`, target = `6` <br>
Output: `[0,1]`

"""

# %%
def two_sum(li, target):
    # If using dictionary, ~ 9 lines
    # INSERT YOUR CODE BELOW
    ...
# ---------------
# TEST CASE BELOW
ans = two_sum([2, 7, 11, 15], 22)
print(ans) #(3, 1)
ans = two_sum([2, 7, 11, 15], 18)
print(ans) #(2, 1)
ans = two_sum([2, 7, 11, 15], 10)
print(ans) #None (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 16 files
==solution24:127
==solution25:125
==solution41:141
==solution43:134
==solution44:105
==solution45:118
==solution46:125
==solution48:132
==solution49:127
==solution50:124
==solution51:107
==solution52:115
==solution53:114
==solution55:115
==solution56:137
==solution57:138
set_list1 = [ # first test input
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9, 10],
    [1, 3, 7],
    [2, 4, 6, 8]
]

set_list2 = [ # second test input
    [4, 2, 5],
    [1, 7],
    [2, 4, 8, 9, 10],
    [5, 10],
    [3, 5, 6],
    [2, 6],
    [1, 8, 9, 10]
]

s = greedy_set(set_list1)
print(s) # [[7, 8, 9, 10], [1, 2, 3], [4, 5, 6]]
print('---')
s = greedy_set(set_list2)
print(s) # [[2, 4, 8, 9, 10], [3, 5, 6], [1, 7]]

# %%
"""
# Exercise 3 - Knapsack Problem

It’s Boxing Day and you are in a shopping contest! You have one shopping bag and you would like to fill your bags with items that have the largest sum of values. Please solve this problem using dynamic programming.
"""

# %%
bag1 = 4 # the maximum weight for the bag
item_list1 = [
    ['guitar', 4, 3000],
    ['speaker', 1, 1500],
    ['laptop', 3, 2000]
]

bag2 = 7 # the maximum weight for the bag
item_list2 = [
    ['pasta', 1, 700],
    ['soups', 3, 300],
    ['pork', 3, 700],
    ['steak', 4, 1000],
    ['lamb', 3, 1200],
    ['Cheese', 1, 900],
    ['Mushroom', 1, 800],
]
 (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 2 files
==solution13:163
==solution14:164
    return False


# ---------------
# TEST CASE BELOW

b = check_dup([1, 3, 1, 2])
print(b) # True
b = check_dup([1, 2, 3, 4])
print(b) # False
b = check_dup([1,1,1,3,3,4,3,2,4,2])
print(b) # True

# %%
"""
# Exercise 4 - Two Sum
"""

# %%
"""
Given an array of **integers** nums and an **integer** target, return indices of the two numbers such that they add up to target.

You may assume that each input would have **exactly one solution**, and you may not use the same element twice. You can return the answer in any order.

**Note:** the most intuitive solution is $O(n^2)$ that checks every pair of the numbers. However, you can use hash table to solve the question in linear time! You will get full mark by using either of the approach.

### Example 1:

Input: nums = `[2,7,11,15]`, target = `9` <br>
Output: `[0,1]` <br>
Explanation: Because `nums[0] + nums[1] == 9`, we return `[0, 1]`.

### Example 2:

Input: nums = `[3,2,4]`, target = `6` <br>
Output: `[1,2]`

### Example 3:

Input: nums = `[3,3]`, target = `6` <br>
Output: `[0,1]`

"""

# %%
def two_sum(li, target):
    # If using dictionary, ~ 9 lines
    # INSERT YOUR CODE BELOW

 (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 2 files
==solution16:165
==solution17:155
            return True
    else:
        return False

# ---------------
# TEST CASE BELOW

b = check_dup([1, 3, 1, 2])
print(b) # True
b = check_dup([1, 2, 3, 4])
print(b) # False
b = check_dup([1,1,1,3,3,4,3,2,4,2])
print(b) # True

# %%
"""
# Exercise 4 - Two Sum
"""

# %%
"""
Given an array of **integers** nums and an **integer** target, return indices of the two numbers such that they add up to target.

You may assume that each input would have **exactly one solution**, and you may not use the same element twice. You can return the answer in any order.

**Note:** the most intuitive solution is $O(n^2)$ that checks every pair of the numbers. However, you can use hash table to solve the question in linear time! You will get full mark by using either of the approach.

### Example 1:

Input: nums = `[2,7,11,15]`, target = `9` <br>
Output: `[0,1]` <br>
Explanation: Because `nums[0] + nums[1] == 9`, we return `[0, 1]`.

### Example 2:

Input: nums = `[3,2,4]`, target = `6` <br>
Output: `[1,2]`

### Example 3:

Input: nums = `[3,3]`, target = `6` <br>
Output: `[0,1]`

"""

# %%
def two_sum(li, target):
    # If using dictionary, ~ 9 lines
    # INSERT YOUR CODE BELOW (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 3 files
==solution0:171
==solution13:163
==solution14:164
    return False


# ---------------
# TEST CASE BELOW

b = check_dup([1, 3, 1, 2])
print(b) # True
b = check_dup([1, 2, 3, 4])
print(b) # False
b = check_dup([1,1,1,3,3,4,3,2,4,2])
print(b) # True

# %%
"""
# Exercise 4 - Two Sum
"""

# %%
"""
Given an array of **integers** nums and an **integer** target, return indices of the two numbers such that they add up to target.

You may assume that each input would have **exactly one solution**, and you may not use the same element twice. You can return the answer in any order.

**Note:** the most intuitive solution is $O(n^2)$ that checks every pair of the numbers. However, you can use hash table to solve the question in linear time! You will get full mark by using either of the approach.

### Example 1:

Input: nums = `[2,7,11,15]`, target = `9` <br>
Output: `[0,1]` <br>
Explanation: Because `nums[0] + nums[1] == 9`, we return `[0, 1]`.

### Example 2:

Input: nums = `[3,2,4]`, target = `6` <br>
Output: `[1,2]`

### Example 3:

Input: nums = `[3,3]`, target = `6` <br>
Output: `[0,1]`

"""

# %%
def two_sum(li, target):
    # If using dictionary, ~ 9 lines
    # INSERT YOUR CODE BELOW
 (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 2 files
==solution44:45
==solution48:73
set_list1 = [ # first test input
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9, 10],
    [1, 3, 7],
    [2, 4, 6, 8]
]

set_list2 = [ # second test input
    [4, 2, 5],
    [1, 7],
    [2, 4, 8, 9, 10],
    [5, 10],
    [3, 5, 6],
    [2, 6],
    [1, 8, 9, 10]
]

ss = brute_force_set(set_list1)
print(ss) # ([1, 2, 3], [4, 5, 6], [7, 8, 9, 10])
print('---')
ss = brute_force_set(set_list2)
print(ss) # ([1, 7], [2, 4, 8, 9, 10], [3, 5, 6])

# %%
"""
## Exercise 2: Set cover - greedy



In this exercise, please implement a greedy algorithm that **for each step, takes a set that contains the most uncovered integers** until it covers all integers from `1` to `10`.
"""

# %%
import copy
def greedy_set(list_sets):
    sets = list_sets.copy()
    ans = [] # your answer, should be a list of sets
    covered = {}

    kk = 0
    while True:
        # INSERT YOUR CODE BELOW
        # Step 1: search for the set with most uncovered integers
        # Step 2: add the set into ans
        # Step 3: check if ans already cover all integers
        # ~ 15 lines
 (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 3 files
==solution10:170
==solution1:152
==solution6:155
            return True
    return False

# ---------------
# TEST CASE BELOW

b = check_dup([1, 3, 1, 2])
print(b) # True
b = check_dup([1, 2, 3, 4])
print(b) # False
b = check_dup([1,1,1,3,3,4,3,2,4,2])
print(b) # True

# %%
"""
# Exercise 4 - Two Sum
"""

# %%
"""
Given an array of **integers** nums and an **integer** target, return indices of the two numbers such that they add up to target.

You may assume that each input would have **exactly one solution**, and you may not use the same element twice. You can return the answer in any order.

**Note:** the most intuitive solution is $O(n^2)$ that checks every pair of the numbers. However, you can use hash table to solve the question in linear time! You will get full mark by using either of the approach.

### Example 1:

Input: nums = `[2,7,11,15]`, target = `9` <br>
Output: `[0,1]` <br>
Explanation: Because `nums[0] + nums[1] == 9`, we return `[0, 1]`.

### Example 2:

Input: nums = `[3,2,4]`, target = `6` <br>
Output: `[1,2]`

### Example 3:

Input: nums = `[3,3]`, target = `6` <br>
Output: `[0,1]`

"""

# %%
def two_sum(li, target):
    # If using dictionary, ~ 9 lines
    # INSERT YOUR CODE BELOW (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 3 files
==solution0:171
==solution14:164
==solution20:161
    return False


# ---------------
# TEST CASE BELOW

b = check_dup([1, 3, 1, 2])
print(b) # True
b = check_dup([1, 2, 3, 4])
print(b) # False
b = check_dup([1,1,1,3,3,4,3,2,4,2])
print(b) # True

# %%
"""
# Exercise 4 - Two Sum
"""

# %%
"""
Given an array of **integers** nums and an **integer** target, return indices of the two numbers such that they add up to target.

You may assume that each input would have **exactly one solution**, and you may not use the same element twice. You can return the answer in any order.

**Note:** the most intuitive solution is $O(n^2)$ that checks every pair of the numbers. However, you can use hash table to solve the question in linear time! You will get full mark by using either of the approach.

### Example 1:

Input: nums = `[2,7,11,15]`, target = `9` <br>
Output: `[0,1]` <br>
Explanation: Because `nums[0] + nums[1] == 9`, we return `[0, 1]`.

### Example 2:

Input: nums = `[3,2,4]`, target = `6` <br>
Output: `[1,2]`

### Example 3:

Input: nums = `[3,3]`, target = `6` <br>
Output: `[0,1]`

"""

# %%
def two_sum(li, target):
    # If using dictionary, ~ 9 lines
    # INSERT YOUR CODE BELOW (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 6 files
==solution44:45
==solution45:52
==solution48:73
==solution49:50
==solution50:50
==solution56:59
set_list1 = [ # first test input
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9, 10],
    [1, 3, 7],
    [2, 4, 6, 8]
]

set_list2 = [ # second test input
    [4, 2, 5],
    [1, 7],
    [2, 4, 8, 9, 10],
    [5, 10],
    [3, 5, 6],
    [2, 6],
    [1, 8, 9, 10]
]

ss = brute_force_set(set_list1)
print(ss) # ([1, 2, 3], [4, 5, 6], [7, 8, 9, 10])
print('---')
ss = brute_force_set(set_list2)
print(ss) # ([1, 7], [2, 4, 8, 9, 10], [3, 5, 6])

# %%
"""
## Exercise 2: Set cover - greedy



In this exercise, please implement a greedy algorithm that **for each step, takes a set that contains the most uncovered integers** until it covers all integers from `1` to `10`.
"""

# %%
import copy
def greedy_set(list_sets):
    sets = list_sets.copy()
    ans = [] # your answer, should be a list of sets
    covered = {}

    kk = 0
    while True:
        # INSERT YOUR CODE BELOW
        # Step 1: search for the set with most uncovered integers
        # Step 2: add the set into ans
        # Step 3: check if ans already cover all integers
        # ~ 15 lines (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 2 files
==solution21:153
==solution3:172
            return collision

# ---------------
# TEST CASE BELOW

b = check_dup([1, 3, 1, 2])
print(b) # True
b = check_dup([1, 2, 3, 4])
print(b) # False
b = check_dup([1,1,1,3,3,4,3,2,4,2])
print(b) # True

# %%
"""
# Exercise 4 - Two Sum
"""

# %%
"""
Given an array of **integers** nums and an **integer** target, return indices of the two numbers such that they add up to target.

You may assume that each input would have **exactly one solution**, and you may not use the same element twice. You can return the answer in any order.

**Note:** the most intuitive solution is $O(n^2)$ that checks every pair of the numbers. However, you can use hash table to solve the question in linear time! You will get full mark by using either of the approach.

### Example 1:

Input: nums = `[2,7,11,15]`, target = `9` <br>
Output: `[0,1]` <br>
Explanation: Because `nums[0] + nums[1] == 9`, we return `[0, 1]`.

### Example 2:

Input: nums = `[3,2,4]`, target = `6` <br>
Output: `[1,2]`

### Example 3:

Input: nums = `[3,3]`, target = `6` <br>
Output: `[0,1]`

"""

# %%
def two_sum(li, target):
    # If using dictionary, ~ 9 lines
    # INSERT YOUR CODE BELOW (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 2 files
==solution27:138
==solution2:157
        return False
    else:
        return True

# ---------------
# TEST CASE BELOW

b = check_dup([1, 3, 1, 2])
print(b) # True
b = check_dup([1, 2, 3, 4])
print(b) # False
b = check_dup([1,1,1,3,3,4,3,2,4,2])
print(b) # True

# %%
"""
# Exercise 4 - Two Sum
"""

# %%
"""
Given an array of **integers** nums and an **integer** target, return indices of the two numbers such that they add up to target.

You may assume that each input would have **exactly one solution**, and you may not use the same element twice. You can return the answer in any order.

**Note:** the most intuitive solution is $O(n^2)$ that checks every pair of the numbers. However, you can use hash table to solve the question in linear time! You will get full mark by using either of the approach.

### Example 1:

Input: nums = `[2,7,11,15]`, target = `9` <br>
Output: `[0,1]` <br>
Explanation: Because `nums[0] + nums[1] == 9`, we return `[0, 1]`.

### Example 2:

Input: nums = `[3,2,4]`, target = `6` <br>
Output: `[1,2]`

### Example 3:

Input: nums = `[3,3]`, target = `6` <br>
Output: `[0,1]`

"""

# %%
def two_sum(li, target): (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 7 files
==solution10:171
==solution12:165
==solution16:167
==solution17:157
==solution1:153
==solution42:158
==solution6:156
    return False

# ---------------
# TEST CASE BELOW

b = check_dup([1, 3, 1, 2])
print(b) # True
b = check_dup([1, 2, 3, 4])
print(b) # False
b = check_dup([1,1,1,3,3,4,3,2,4,2])
print(b) # True

# %%
"""
# Exercise 4 - Two Sum
"""

# %%
"""
Given an array of **integers** nums and an **integer** target, return indices of the two numbers such that they add up to target.

You may assume that each input would have **exactly one solution**, and you may not use the same element twice. You can return the answer in any order.

**Note:** the most intuitive solution is $O(n^2)$ that checks every pair of the numbers. However, you can use hash table to solve the question in linear time! You will get full mark by using either of the approach.

### Example 1:

Input: nums = `[2,7,11,15]`, target = `9` <br>
Output: `[0,1]` <br>
Explanation: Because `nums[0] + nums[1] == 9`, we return `[0, 1]`.

### Example 2:

Input: nums = `[3,2,4]`, target = `6` <br>
Output: `[1,2]`

### Example 3:

Input: nums = `[3,3]`, target = `6` <br>
Output: `[0,1]`

"""

# %%
def two_sum(li, target):
    # If using dictionary, ~ 9 lines
    # INSERT YOUR CODE BELOW (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 2 files
==solution12:165
==solution16:167
    return False

# ---------------
# TEST CASE BELOW

b = check_dup([1, 3, 1, 2])
print(b) # True
b = check_dup([1, 2, 3, 4])
print(b) # False
b = check_dup([1,1,1,3,3,4,3,2,4,2])
print(b) # True

# %%
"""
# Exercise 4 - Two Sum
"""

# %%
"""
Given an array of **integers** nums and an **integer** target, return indices of the two numbers such that they add up to target.

You may assume that each input would have **exactly one solution**, and you may not use the same element twice. You can return the answer in any order.

**Note:** the most intuitive solution is $O(n^2)$ that checks every pair of the numbers. However, you can use hash table to solve the question in linear time! You will get full mark by using either of the approach.

### Example 1:

Input: nums = `[2,7,11,15]`, target = `9` <br>
Output: `[0,1]` <br>
Explanation: Because `nums[0] + nums[1] == 9`, we return `[0, 1]`.

### Example 2:

Input: nums = `[3,2,4]`, target = `6` <br>
Output: `[1,2]`

### Example 3:

Input: nums = `[3,3]`, target = `6` <br>
Output: `[0,1]`

"""

# %%
def two_sum(li, target):
    # If using dictionary, ~ 9 lines
    # INSERT YOUR CODE BELOW (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 5 files
==solution11:30
==solution15:30
==solution23:30
==solution28:30
==solution36:30
import copy

dag = {} # DAG

def q1_add_node(node, graph):
    # '''add a node into the graph'''
    node = node.lower()
    if node not in graph:
        graph[node] = []

def q1_add_edge(node1, node2, graph):
    # '''add an edge from node 1 to node 2'''
    node1 = node1.lower()
    node2 = node2.lower()

    # add nodes into graph
    q1_add_node(node1, graph)
    q1_add_node(node2, graph)

    # add edge node1 -> node2
    node = graph[node1]
    if node2 not in node:
        node.append(node2)

def q1_get_neighbor(node, graph):
    #'''get neighboring nodes'''
    node = node.lower()

    if node in graph:
        return copy.deepcopy(graph[node])

def q1_show(graph):
    return str(graph)

def q1_build_graph(graph):
    # INSERT YOUR CODE BELOW
    # ~ 7 lines
    q1_add_edge('you', 'alice', graph)
    q1_add_edge('you', 'bob', graph)
    q1_add_edge('you', 'claire', graph)
    q1_add_edge('alice', 'danna', graph)
    q1_add_edge('bob', 'ed', graph)
    q1_add_edge('bob', 'danna', graph)
    q1_add_edge('claire', 'fiona', graph)
    q1_add_edge('claire', 'george', graph) (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 11 files
==solution0:120
==solution14:117
==solution16:113
==solution19:108
==solution1:103
==solution27:92
==solution2:108
==solution42:108
==solution5:120
==solution6:109
==solution8:94
with open('books.txt', 'r') as f:
    create_table(10)
    for line in f:
        line = line.strip()
        add_element(line)
print(f'Number of collision is {collision}') # should be 90
print(search('a clockwork orange'))          # should return True
print(search('1984'))                        # should return True
print(search('game of throne'))              # should return False
print(search('foundation'))                  # should return False

with open('books.txt', 'r') as f:
    create_table(100)
    for line in f:
        line = line.strip()
        add_element(line)
print(f'Number of collision is {collision}') # should be 34

# %%
"""
# Exercise 3 - Duplicate

Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.

### Example 1:

Input: nums = `[1,2,3,1]` <br>
Output: true
### Example 2:

Input: nums = `[1,2,3,4]` <br>
Output: false
### Example 3:

Input: nums = `[1,1,1,3,3,4,3,2,4,2]` <br>
Output: true


"""

# %%
def check_dup(li):
    # Enter your code below
    # ~ 7 lines (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 3 files
==solution45:47
==solution46:47
==solution53:52
                return comb

# ================
# TEST CASES BELOW

set_list1 = [ # first test input
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9, 10],
    [1, 3, 7],
    [2, 4, 6, 8]
]

set_list2 = [ # second test input
    [4, 2, 5],
    [1, 7],
    [2, 4, 8, 9, 10],
    [5, 10],
    [3, 5, 6],
    [2, 6],
    [1, 8, 9, 10]
]

ss = brute_force_set(set_list1)
print(ss) # ([1, 2, 3], [4, 5, 6], [7, 8, 9, 10])
print('---')
ss = brute_force_set(set_list2)
print(ss) # ([1, 7], [2, 4, 8, 9, 10], [3, 5, 6])

# %%
"""
## Exercise 2: Set cover - greedy



In this exercise, please implement a greedy algorithm that **for each step, takes a set that contains the most uncovered integers** until it covers all integers from `1` to `10`.
"""

# %%
import copy
def greedy_set(list_sets):
    sets = list_sets.copy()
    ans = [] # your answer, should be a list of sets (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 2 files
==solution22:92
==solution23:96
            else:
                return False #got nothing




# TEST CASE FOR FIRST TASK BELOW
q1_build_graph(dag)
print(q1_show(dag))  # output: {'you': ['alice', 'bob', 'claire'], 'alice': ['danna'],
                  # 'bob': ['ed', 'danna'], 'claire': ['fiona', 'george'],
                  # 'danna': [], 'ed': [], 'fiona': [], 'george': []}

# TEST CASE FOR SECOND TASK BELOW
f = q1_bfs('you', 'fiona', dag)
print(f) # True
f = q1_bfs('alice', 'bob', dag)
print(f) # False

# %%
"""
<!-- END QUESTION -->

# Exercise 2 - Weighted DAG
"""

# %%
"""
Below is another weighted graph `MyWDAG`. Please read the code carefully and play with it. After you understand the code, please do the following two things:

### Build a weighted graph (1pt)

Please use the `add_node` and `add_edge` functions in `MyWDAG` class to build a graph below.

![Picture 2.jpg](attachment:78cd9b39-7083-41ef-8834-3a135c5fb5b6.jpg)

### Implement Dijkstra (1pt)

Please complete the `dijkstra()` function above and use the code below to test it.
"""

# %%
import copy
 (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 3 files
==solution17:162
==solution20:167
==solution9:166
b = check_dup([1, 3, 1, 2])
print(b) # True
b = check_dup([1, 2, 3, 4])
print(b) # False
b = check_dup([1,1,1,3,3,4,3,2,4,2])
print(b) # True

# %%
"""
# Exercise 4 - Two Sum
"""

# %%
"""
Given an array of **integers** nums and an **integer** target, return indices of the two numbers such that they add up to target.

You may assume that each input would have **exactly one solution**, and you may not use the same element twice. You can return the answer in any order.

**Note:** the most intuitive solution is $O(n^2)$ that checks every pair of the numbers. However, you can use hash table to solve the question in linear time! You will get full mark by using either of the approach.

### Example 1:

Input: nums = `[2,7,11,15]`, target = `9` <br>
Output: `[0,1]` <br>
Explanation: Because `nums[0] + nums[1] == 9`, we return `[0, 1]`.

### Example 2:

Input: nums = `[3,2,4]`, target = `6` <br>
Output: `[1,2]`

### Example 3:

Input: nums = `[3,3]`, target = `6` <br>
Output: `[0,1]`

"""

# %%
def two_sum(li, target):
    # If using dictionary, ~ 9 lines
    # INSERT YOUR CODE BELOW
    for i in range(len(li)): (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 4 files
==solution0:177
==solution13:169
==solution14:170
==solution16:172
b = check_dup([1, 3, 1, 2])
print(b) # True
b = check_dup([1, 2, 3, 4])
print(b) # False
b = check_dup([1,1,1,3,3,4,3,2,4,2])
print(b) # True

# %%
"""
# Exercise 4 - Two Sum
"""

# %%
"""
Given an array of **integers** nums and an **integer** target, return indices of the two numbers such that they add up to target.

You may assume that each input would have **exactly one solution**, and you may not use the same element twice. You can return the answer in any order.

**Note:** the most intuitive solution is $O(n^2)$ that checks every pair of the numbers. However, you can use hash table to solve the question in linear time! You will get full mark by using either of the approach.

### Example 1:

Input: nums = `[2,7,11,15]`, target = `9` <br>
Output: `[0,1]` <br>
Explanation: Because `nums[0] + nums[1] == 9`, we return `[0, 1]`.

### Example 2:

Input: nums = `[3,2,4]`, target = `6` <br>
Output: `[1,2]`

### Example 3:

Input: nums = `[3,3]`, target = `6` <br>
Output: `[0,1]`

"""

# %%
def two_sum(li, target):
    # If using dictionary, ~ 9 lines
    # INSERT YOUR CODE BELOW
 (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 12 files
==solution0:120
==solution13:117
==solution14:117
==solution16:113
==solution19:108
==solution1:103
==solution27:92
==solution2:108
==solution42:108
==solution5:120
==solution6:109
==solution8:94
with open('books.txt', 'r') as f:
    create_table(10)
    for line in f:
        line = line.strip()
        add_element(line)
print(f'Number of collision is {collision}') # should be 90
print(search('a clockwork orange'))          # should return True
print(search('1984'))                        # should return True
print(search('game of throne'))              # should return False
print(search('foundation'))                  # should return False

with open('books.txt', 'r') as f:
    create_table(100)
    for line in f:
        line = line.strip()
        add_element(line)
print(f'Number of collision is {collision}') # should be 34

# %%
"""
# Exercise 3 - Duplicate

Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.

### Example 1:

Input: nums = `[1,2,3,1]` <br>
Output: true
### Example 2:

Input: nums = `[1,2,3,4]` <br>
Output: false
### Example 3:

Input: nums = `[1,1,1,3,3,4,3,2,4,2]` <br>
Output: true


"""

# %%
def check_dup(li):
    # Enter your code below (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 2 files
==solution4:94
==solution7:104
    return False


# TEST CASE FOR FIRST TASK BELOW
q1_build_graph(dag)
print(q1_show(dag))  # output: {'you': ['alice', 'bob', 'claire'], 'alice': ['danna'],
# 'bob': ['ed', 'danna'], 'claire': ['fiona', 'george'],
# 'danna': [], 'ed': [], 'fiona': [], 'george': []}

# TEST CASE FOR SECOND TASK BELOW
f = q1_bfs('you', 'fiona', dag)
print(f)  # True
f = q1_bfs('alice', 'bob', dag)
print(f)  # False

# %%
"""
<!-- END QUESTION -->

# Exercise 2 - Weighted DAG
"""

# %%
"""
Below is another weighted graph `MyWDAG`. Please read the code carefully and play with it. After you understand the code, please do the following two things:

### Build a weighted graph (1pt)

Please use the `add_node` and `add_edge` functions in `MyWDAG` class to build a graph below.

![Picture 2.jpg](attachment:78cd9b39-7083-41ef-8834-3a135c5fb5b6.jpg)

### Implement Dijkstra (1pt)

Please complete the `dijkstra()` function above and use the code below to test it.
"""

# %%
import copy

weighted_graph = {}  # graph
 (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 17 files
==solution0:177
==solution10:176
==solution12:170
==solution13:169
==solution14:170
==solution16:172
==solution17:162
==solution19:160
==solution1:158
==solution20:167
==solution21:158
==solution27:145
==solution3:177
==solution42:163
==solution6:161
==solution8:149
==solution9:166
b = check_dup([1, 3, 1, 2])
print(b) # True
b = check_dup([1, 2, 3, 4])
print(b) # False
b = check_dup([1,1,1,3,3,4,3,2,4,2])
print(b) # True

# %%
"""
# Exercise 4 - Two Sum
"""

# %%
"""
Given an array of **integers** nums and an **integer** target, return indices of the two numbers such that they add up to target.

You may assume that each input would have **exactly one solution**, and you may not use the same element twice. You can return the answer in any order.

**Note:** the most intuitive solution is $O(n^2)$ that checks every pair of the numbers. However, you can use hash table to solve the question in linear time! You will get full mark by using either of the approach.

### Example 1:

Input: nums = `[2,7,11,15]`, target = `9` <br>
Output: `[0,1]` <br>
Explanation: Because `nums[0] + nums[1] == 9`, we return `[0, 1]`.

### Example 2:

Input: nums = `[3,2,4]`, target = `6` <br>
Output: `[1,2]`

### Example 3:

Input: nums = `[3,3]`, target = `6` <br>
Output: `[0,1]`

"""

# %%
def two_sum(li, target):
    # If using dictionary, ~ 9 lines
    # INSERT YOUR CODE BELOW (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 6 files
==solution11:30
==solution15:30
==solution23:30
==solution28:30
==solution35:30
==solution36:30
import copy

dag = {} # DAG

def q1_add_node(node, graph):
    # '''add a node into the graph'''
    node = node.lower()
    if node not in graph:
        graph[node] = []

def q1_add_edge(node1, node2, graph):
    # '''add an edge from node 1 to node 2'''
    node1 = node1.lower()
    node2 = node2.lower()

    # add nodes into graph
    q1_add_node(node1, graph)
    q1_add_node(node2, graph)

    # add edge node1 -> node2
    node = graph[node1]
    if node2 not in node:
        node.append(node2)

def q1_get_neighbor(node, graph):
    #'''get neighboring nodes'''
    node = node.lower()

    if node in graph:
        return copy.deepcopy(graph[node])

def q1_show(graph):
    return str(graph)

def q1_build_graph(graph):
    # INSERT YOUR CODE BELOW
    # ~ 7 lines
    q1_add_edge('you', 'alice', graph)
    q1_add_edge('you', 'bob', graph)
    q1_add_edge('you', 'claire', graph)
    q1_add_edge('alice', 'danna', graph) (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 11 files
==solution0:120
==solution13:117
==solution14:117
==solution16:113
==solution19:108
==solution1:103
==solution21:99
==solution2:108
==solution42:108
==solution5:120
==solution6:109
with open('books.txt', 'r') as f:
    create_table(10)
    for line in f:
        line = line.strip()
        add_element(line)
print(f'Number of collision is {collision}') # should be 90
print(search('a clockwork orange'))          # should return True
print(search('1984'))                        # should return True
print(search('game of throne'))              # should return False
print(search('foundation'))                  # should return False

with open('books.txt', 'r') as f:
    create_table(100)
    for line in f:
        line = line.strip()
        add_element(line)
print(f'Number of collision is {collision}') # should be 34

# %%
"""
# Exercise 3 - Duplicate

Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.

### Example 1:

Input: nums = `[1,2,3,1]` <br>
Output: true
### Example 2:

Input: nums = `[1,2,3,4]` <br>
Output: false
### Example 3:

Input: nums = `[1,1,1,3,3,4,3,2,4,2]` <br>
Output: true


"""

# %% (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 4 files
==solution15:94
==solution29:97
==solution4:94
==solution7:104
    return False


# TEST CASE FOR FIRST TASK BELOW
q1_build_graph(dag)
print(q1_show(dag))  # output: {'you': ['alice', 'bob', 'claire'], 'alice': ['danna'],
                  # 'bob': ['ed', 'danna'], 'claire': ['fiona', 'george'],
                  # 'danna': [], 'ed': [], 'fiona': [], 'george': []}

# TEST CASE FOR SECOND TASK BELOW
f = q1_bfs('you', 'fiona', dag)
print(f) # True
f = q1_bfs('alice', 'bob', dag)
print(f) # False

# %%
"""
<!-- END QUESTION -->

# Exercise 2 - Weighted DAG
"""

# %%
"""
Below is another weighted graph `MyWDAG`. Please read the code carefully and play with it. After you understand the code, please do the following two things:

### Build a weighted graph (1pt)

Please use the `add_node` and `add_edge` functions to build a graph below.

![Picture 2.jpg](attachment:78cd9b39-7083-41ef-8834-3a135c5fb5b6.jpg)

### Implement Dijkstra (1pt)

Please complete the `dijkstra()` function above and use the code below to test it.
"""

# %%
import copy
 (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 8 files
==solution11:30
==solution15:30
==solution23:30
==solution28:30
==solution34:30
==solution35:30
==solution36:30
==solution39:30
import copy

dag = {} # DAG

def q1_add_node(node, graph):
    # '''add a node into the graph'''
    node = node.lower()
    if node not in graph:
        graph[node] = []

def q1_add_edge(node1, node2, graph):
    # '''add an edge from node 1 to node 2'''
    node1 = node1.lower()
    node2 = node2.lower()

    # add nodes into graph
    q1_add_node(node1, graph)
    q1_add_node(node2, graph)

    # add edge node1 -> node2
    node = graph[node1]
    if node2 not in node:
        node.append(node2)

def q1_get_neighbor(node, graph):
    #'''get neighboring nodes'''
    node = node.lower()

    if node in graph:
        return copy.deepcopy(graph[node])

def q1_show(graph):
    return str(graph)

def q1_build_graph(graph):
    # INSERT YOUR CODE BELOW
    # ~ 7 lines
    q1_add_edge('you', 'alice', graph)
    q1_add_edge('you', 'bob', graph)
    q1_add_edge('you', 'claire', graph) (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 19 files
==solution0:177
==solution10:176
==solution12:170
==solution13:169
==solution14:170
==solution16:172
==solution17:162
==solution18:176
==solution19:160
==solution1:158
==solution20:167
==solution21:158
==solution27:145
==solution2:164
==solution3:177
==solution42:163
==solution6:161
==solution8:149
==solution9:166
b = check_dup([1, 3, 1, 2])
print(b) # True
b = check_dup([1, 2, 3, 4])
print(b) # False
b = check_dup([1,1,1,3,3,4,3,2,4,2])
print(b) # True

# %%
"""
# Exercise 4 - Two Sum
"""

# %%
"""
Given an array of **integers** nums and an **integer** target, return indices of the two numbers such that they add up to target.

You may assume that each input would have **exactly one solution**, and you may not use the same element twice. You can return the answer in any order.

**Note:** the most intuitive solution is $O(n^2)$ that checks every pair of the numbers. However, you can use hash table to solve the question in linear time! You will get full mark by using either of the approach.

### Example 1:

Input: nums = `[2,7,11,15]`, target = `9` <br>
Output: `[0,1]` <br>
Explanation: Because `nums[0] + nums[1] == 9`, we return `[0, 1]`.

### Example 2:

Input: nums = `[3,2,4]`, target = `6` <br>
Output: `[1,2]`

### Example 3:

Input: nums = `[3,3]`, target = `6` <br>
Output: `[0,1]`

"""

# %%
def two_sum(li, target): (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 2 files
==solution0:125
==solution12:121
print(f'Number of collision is {collision}') # should be 90
print(search('a clockwork orange'))          # should return True
print(search('1984'))                        # should return True
print(search('game of throne'))              # should return False
print(search('foundation'))                  # should return False

with open('books.txt', 'r') as f:
    create_table(100)
    for line in f:
        line = line.strip()
        add_element(line)
print(f'Number of collision is {collision}') # should be 34

# %%
"""
# Exercise 3 - Duplicate

Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.

### Example 1:

Input: nums = `[1,2,3,1]` <br>
Output: true
### Example 2:

Input: nums = `[1,2,3,4]` <br>
Output: false
### Example 3:

Input: nums = `[1,1,1,3,3,4,3,2,4,2]` <br>
Output: true


"""

# %%
def check_dup(li):
    # Enter your code below
    # ~ 7 lines
    # BEGIN SOLUTION (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 7 files
==solution43:55
==solution44:45
==solution45:52
==solution48:73
==solution49:50
==solution50:50
==solution56:59
set_list1 = [ # first test input
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9, 10],
    [1, 3, 7],
    [2, 4, 6, 8]
]

set_list2 = [ # second test input
    [4, 2, 5],
    [1, 7],
    [2, 4, 8, 9, 10],
    [5, 10],
    [3, 5, 6],
    [2, 6],
    [1, 8, 9, 10]
]

ss = brute_force_set(set_list1)
print(ss) # ([1, 2, 3], [4, 5, 6], [7, 8, 9, 10])
print('---')
ss = brute_force_set(set_list2)
print(ss) # ([1, 7], [2, 4, 8, 9, 10], [3, 5, 6])

# %%
"""
## Exercise 2: Set cover - greedy



In this exercise, please implement a greedy algorithm that **for each step, takes a set that contains the most uncovered integers** until it covers all integers from `1` to `10`.
"""

# %%
import copy
def greedy_set(list_sets):
    sets = list_sets.copy()
    ans = [] # your answer, should be a list of sets
    covered = {} (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 2 files
==solution25:55
==solution46:52
set_list1 = [ # first test input
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9, 10],
    [1, 3, 7],
    [2, 4, 6, 8]
]

set_list2 = [ # second test input
    [4, 2, 5],
    [1, 7],
    [2, 4, 8, 9, 10],
    [5, 10],
    [3, 5, 6],
    [2, 6],
    [1, 8, 9, 10]
]

ss = brute_force_set(set_list1)
print(ss) # ([1, 2, 3], [4, 5, 6], [7, 8, 9, 10])
print('---')
ss = brute_force_set(set_list2)
print(ss) # ([1, 7], [2, 4, 8, 9, 10], [3, 5, 6])

# %%
"""
## Exercise 2: Set cover - greedy



In this exercise, please implement a greedy algorithm that **for each step, takes a set that contains the most uncovered integers** until it covers all integers from `1` to `10`.
"""

# %%
import copy
def greedy_set(list_sets):
    sets = list_sets.copy()
    ans = [] # your answer, should be a list of sets
    covered = set() (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 4 files
==solution11:92
==solution26:96
==solution31:93
==solution35:98
    return False

# TEST CASE FOR FIRST TASK BELOW
q1_build_graph(dag)
print(q1_show(dag))  # output: {'you': ['alice', 'bob', 'claire'], 'alice': ['danna'],
                  # 'bob': ['ed', 'danna'], 'claire': ['fiona', 'george'],
                  # 'danna': [], 'ed': [], 'fiona': [], 'george': []}

# TEST CASE FOR SECOND TASK BELOW
f = q1_bfs('you', 'fiona', dag)
print(f) # True
f = q1_bfs('alice', 'bob', dag)
print(f) # False

# %%
"""
<!-- END QUESTION -->

# Exercise 2 - Weighted DAG
"""

# %%
"""
Below is another weighted graph `MyWDAG`. Please read the code carefully and play with it. After you understand the code, please do the following two things:

### Build a weighted graph (1pt)

Please use the `add_node` and `add_edge` functions to build a graph below.

![Picture 2.jpg](attachment:78cd9b39-7083-41ef-8834-3a135c5fb5b6.jpg)

### Implement Dijkstra (1pt)

Please complete the `dijkstra()` function above and use the code below to test it.
"""

# %%
import copy
 (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 11 files
==solution12:121
==solution14:122
==solution16:118
==solution19:113
==solution1:108
==solution27:97
==solution2:113
==solution42:113
==solution5:125
==solution6:114
==solution8:99
print(f'Number of collision is {collision}') # should be 90
print(search('a clockwork orange'))          # should return True
print(search('1984'))                        # should return True
print(search('game of throne'))              # should return False
print(search('foundation'))                  # should return False

with open('books.txt', 'r') as f:
    create_table(100)
    for line in f:
        line = line.strip()
        add_element(line)
print(f'Number of collision is {collision}') # should be 34

# %%
"""
# Exercise 3 - Duplicate

Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.

### Example 1:

Input: nums = `[1,2,3,1]` <br>
Output: true
### Example 2:

Input: nums = `[1,2,3,4]` <br>
Output: false
### Example 3:

Input: nums = `[1,1,1,3,3,4,3,2,4,2]` <br>
Output: true


"""

# %%
def check_dup(li):
    # Enter your code below
    # ~ 7 lines (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 10 files
==solution25:55
==solution43:55
==solution44:45
==solution45:52
==solution46:52
==solution48:73
==solution49:50
==solution50:50
==solution53:57
==solution56:59
set_list1 = [ # first test input
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9, 10],
    [1, 3, 7],
    [2, 4, 6, 8]
]

set_list2 = [ # second test input
    [4, 2, 5],
    [1, 7],
    [2, 4, 8, 9, 10],
    [5, 10],
    [3, 5, 6],
    [2, 6],
    [1, 8, 9, 10]
]

ss = brute_force_set(set_list1)
print(ss) # ([1, 2, 3], [4, 5, 6], [7, 8, 9, 10])
print('---')
ss = brute_force_set(set_list2)
print(ss) # ([1, 7], [2, 4, 8, 9, 10], [3, 5, 6])

# %%
"""
## Exercise 2: Set cover - greedy



In this exercise, please implement a greedy algorithm that **for each step, takes a set that contains the most uncovered integers** until it covers all integers from `1` to `10`.
"""

# %%
import copy
def greedy_set(list_sets):
    sets = list_sets.copy()
    ans = [] # your answer, should be a list of sets (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 2 files
==solution12:121
==solution13:122
print(f'Number of collision is {collision}') # should be 90
print(search('a clockwork orange'))          # should return True
print(search('1984'))                        # should return True
print(search('game of throne'))              # should return False
print(search('foundation'))                  # should return False

with open('books.txt', 'r') as f:
    create_table(100)
    for line in f:
        line = line.strip()
        add_element(line)
print(f'Number of collision is {collision}') # should be 34

# %%
"""
# Exercise 3 - Duplicate

Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.

### Example 1:

Input: nums = `[1,2,3,1]` <br>
Output: true
### Example 2:

Input: nums = `[1,2,3,4]` <br>
Output: false
### Example 3:

Input: nums = `[1,1,1,3,3,4,3,2,4,2]` <br>
Output: true


"""

# %%
def check_dup(li):
 (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 3 files
==solution11:95
==solution23:103
==solution7:108
q1_build_graph(dag)
print(q1_show(dag))  # output: {'you': ['alice', 'bob', 'claire'], 'alice': ['danna'],
                  # 'bob': ['ed', 'danna'], 'claire': ['fiona', 'george'],
                  # 'danna': [], 'ed': [], 'fiona': [], 'george': []}

# TEST CASE FOR SECOND TASK BELOW
f = q1_bfs('you', 'fiona', dag)
print(f) # True
f = q1_bfs('alice', 'bob', dag)
print(f) # False

# %%
"""
<!-- END QUESTION -->

# Exercise 2 - Weighted DAG
"""

# %%
"""
Below is another weighted graph `MyWDAG`. Please read the code carefully and play with it. After you understand the code, please do the following two things:

### Build a weighted graph (1pt)

Please use the `add_node` and `add_edge` functions in `MyWDAG` class to build a graph below.

![Picture 2.jpg](attachment:78cd9b39-7083-41ef-8834-3a135c5fb5b6.jpg)

### Implement Dijkstra (1pt)

Please complete the `dijkstra()` function above and use the code below to test it.
"""

# %%
import copy

weighted_graph = {} # graph
 (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 11 files
==solution11:30
==solution15:30
==solution22:30
==solution23:30
==solution28:30
==solution30:30
==solution34:30
==solution35:30
==solution36:30
==solution39:30
==solution4:30
import copy

dag = {} # DAG

def q1_add_node(node, graph):
    # '''add a node into the graph'''
    node = node.lower()
    if node not in graph:
        graph[node] = []

def q1_add_edge(node1, node2, graph):
    # '''add an edge from node 1 to node 2'''
    node1 = node1.lower()
    node2 = node2.lower()

    # add nodes into graph
    q1_add_node(node1, graph)
    q1_add_node(node2, graph)

    # add edge node1 -> node2
    node = graph[node1]
    if node2 not in node:
        node.append(node2)

def q1_get_neighbor(node, graph):
    #'''get neighboring nodes'''
    node = node.lower()

    if node in graph:
        return copy.deepcopy(graph[node])

def q1_show(graph):
    return str(graph)

def q1_build_graph(graph):
    # INSERT YOUR CODE BELOW
    # ~ 7 lines
    q1_add_edge('you', 'alice', graph) (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 2 files
==solution31:158
==solution4:161
    q2_add_edge('a', 'b', graph, 5)
    q2_add_edge('a', 'c', graph, 0)
    q2_add_edge('b', 'd', graph, 15)
    q2_add_edge('b', 'e', graph, 20)
    q2_add_edge('c', 'd', graph, 30)
    q2_add_edge('c', 'e', graph, 35)
    q2_add_edge('d', 'f', graph, 20)
    q2_add_edge('e', 'f', graph, 10)
    # END SOLUTION


def q2_dijkstra(node1, node2, graph):
    node1 = node1.lower()
    node2 = node2.lower()

    max_c = 10000
    costs = {}
    visited = []

    # initialise costs
    for k in graph:
        costs[k] = max_c
        # print(costs)

    # add initial nodes
    nei = graph[node1]
    for n in nei:
        costs[n] = graph[node1][n]

    # dijkstra algorithm start
    while True:
        max_c = 10000
        node = -1

        # Find lowest cost unvisisted node and set it as node
        # ~ 6 lines
        # INSERT YOUR CODE BELOW (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 2 files
==solution13:44
==solution17:45
hash1('adelaide', 10) # 1
hash2('adelaide', 10) # 8
hash3('adelaide', 10) # 0
hash4('adelaide', 10) # 6

# %%
"""
# Exercise 2 - Hash Table
"""

# %%
"""
In this exercise, you will implement your own HashTable class. You will use chaining when collisions happen. The functions to be completed are
- `add_element(self, val)` function inserts an element into the hash table. Your code should first calculate the hash number of the input value `val`, then insert it into the table.
- `search(self, val)` function search for the input value `val` in the hash table. If the value is already inside the table, it should return `True`, otherwise `False`.

The provided test code first reads a list of books from a file `books.txt`, and then constructs a HashTable containing all books. You can think of it as a book management system in a library that keeps track of weather a book is inside the library.
"""

# %%
size = 0
table = []
collision = 0

def create_table(table_size):
    global size, table, collision
    size = table_size
    table = [[] for i in range(table_size)] # allocate an empty 2D list
    collision = 0 # number of collision

def add_element(val):
    #'''add an element into the hash table'''
    # insert the book name into the hash table, and
    # if collision happens, increase the value by 1
    # ~ 4 lines of code
    # INSERT YOUR CODE BELOW
    global table, collision (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 14 files
==solution11:30
==solution15:30
==solution22:30
==solution23:30
==solution26:30
==solution28:30
==solution29:30
==solution30:30
==solution34:30
==solution35:30
==solution36:30
==solution37:30
==solution39:30
==solution4:30
import copy

dag = {} # DAG

def q1_add_node(node, graph):
    # '''add a node into the graph'''
    node = node.lower()
    if node not in graph:
        graph[node] = []

def q1_add_edge(node1, node2, graph):
    # '''add an edge from node 1 to node 2'''
    node1 = node1.lower()
    node2 = node2.lower()

    # add nodes into graph
    q1_add_node(node1, graph)
    q1_add_node(node2, graph)

    # add edge node1 -> node2
    node = graph[node1]
    if node2 not in node:
        node.append(node2)

def q1_get_neighbor(node, graph):
    #'''get neighboring nodes'''
    node = node.lower()

    if node in graph:
        return copy.deepcopy(graph[node])

def q1_show(graph):
    return str(graph)

def q1_build_graph(graph):
    # INSERT YOUR CODE BELOW
    # ~ 7 lines (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 4 files
==solution19:43
==solution1:38
==solution6:42
==solution9:42
hash1('adelaide', 10) # 1
hash2('adelaide', 10) # 8
hash3('adelaide', 10) # 0
hash4('adelaide', 10) # 6

# %%
"""
# Exercise 2 - Hash Table
"""

# %%
"""
In this exercise, you will implement your own HashTable class. You will use chaining when collisions happen. The functions to be completed are
- `add_element(self, val)` function inserts an element into the hash table. Your code should first calculate the hash number of the input value `val`, then insert it into the table.
- `search(self, val)` function search for the input value `val` in the hash table. If the value is already inside the table, it should return `True`, otherwise `False`.

The provided test code first reads a list of books from a file `books.txt`, and then constructs a HashTable containing all books. You can think of it as a book management system in a library that keeps track of weather a book is inside the library.
"""

# %%
size = 0
table = []
collision = 0

def create_table(table_size):
    global size, table, collision
    size = table_size
    table = [[] for i in range(table_size)] # allocate an empty 2D list
    collision = 0 # number of collision

def add_element(val):
    #'''add an element into the hash table'''
    # insert the book name into the hash table, and
    # if collision happens, increase the value by 1
    # ~ 4 lines of code
    # INSERT YOUR CODE BELOW
    global collision (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 2 files
==solution55:53
==solution57:57
set_list1 = [ # first test input
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9, 10],
    [1, 3, 7],
    [2, 4, 6, 8]
]

set_list2 = [ # second test input
    [4, 2, 5],
    [1, 7],
    [2, 4, 8, 9, 10],
    [5, 10],
    [3, 5, 6],
    [2, 6],
    [1, 8, 9, 10]
]

ss = brute_force_set(set_list1)
print(ss) # ([1, 2, 3], [4, 5, 6], [7, 8, 9, 10])
print('---')
ss = brute_force_set(set_list2)
print(ss) # ([1, 7], [2, 4, 8, 9, 10], [3, 5, 6])

# %%
"""
## Exercise 2: Set cover - greedy



In this exercise, please implement a greedy algorithm that **for each step, takes a set that contains the most uncovered integers** until it covers all integers from `1` to `10`.
"""

# %%
import copy
 (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 2 files
==solution12:121
==solution21:104
print(f'Number of collision is {collision}') # should be 90
print(search('a clockwork orange'))          # should return True
print(search('1984'))                        # should return True
print(search('game of throne'))              # should return False
print(search('foundation'))                  # should return False

with open('books.txt', 'r') as f:
    create_table(100)
    for line in f:
        line = line.strip()
        add_element(line)
print(f'Number of collision is {collision}') # should be 34

# %%
"""
# Exercise 3 - Duplicate

Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.

### Example 1:

Input: nums = `[1,2,3,1]` <br>
Output: true
### Example 2:

Input: nums = `[1,2,3,4]` <br>
Output: false
### Example 3:

Input: nums = `[1,1,1,3,3,4,3,2,4,2]` <br>
Output: true


"""

# %% (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 15 files
==solution11:30
==solution15:30
==solution22:30
==solution23:30
==solution26:30
==solution28:30
==solution29:30
==solution30:30
==solution31:30
==solution34:30
==solution35:30
==solution36:30
==solution37:30
==solution39:30
==solution4:30
import copy

dag = {} # DAG

def q1_add_node(node, graph):
    # '''add a node into the graph'''
    node = node.lower()
    if node not in graph:
        graph[node] = []

def q1_add_edge(node1, node2, graph):
    # '''add an edge from node 1 to node 2'''
    node1 = node1.lower()
    node2 = node2.lower()

    # add nodes into graph
    q1_add_node(node1, graph)
    q1_add_node(node2, graph)

    # add edge node1 -> node2
    node = graph[node1]
    if node2 not in node:
        node.append(node2)

def q1_get_neighbor(node, graph):
    #'''get neighboring nodes'''
    node = node.lower()

    if node in graph:
        return copy.deepcopy(graph[node])

def q1_show(graph):
    return str(graph)

def q1_build_graph(graph):
    # INSERT YOUR CODE BELOW (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 17 files
==solution11:95
==solution15:98
==solution22:99
==solution23:103
==solution26:99
==solution28:104
==solution29:101
==solution30:106
==solution31:96
==solution32:100
==solution34:95
==solution35:101
==solution36:98
==solution37:100
==solution39:107
==solution4:98
==solution7:108
q1_build_graph(dag)
print(q1_show(dag))  # output: {'you': ['alice', 'bob', 'claire'], 'alice': ['danna'],
                  # 'bob': ['ed', 'danna'], 'claire': ['fiona', 'george'],
                  # 'danna': [], 'ed': [], 'fiona': [], 'george': []}

# TEST CASE FOR SECOND TASK BELOW
f = q1_bfs('you', 'fiona', dag)
print(f) # True
f = q1_bfs('alice', 'bob', dag)
print(f) # False

# %%
"""
<!-- END QUESTION -->

# Exercise 2 - Weighted DAG
"""

# %%
"""
Below is another weighted graph `MyWDAG`. Please read the code carefully and play with it. After you understand the code, please do the following two things:

### Build a weighted graph (1pt)

Please use the `add_node` and `add_edge` functions to build a graph below.

![Picture 2.jpg](attachment:78cd9b39-7083-41ef-8834-3a135c5fb5b6.jpg)

### Implement Dijkstra (1pt)

Please complete the `dijkstra()` function above and use the code below to test it.
"""

# %%
import copy
 (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 12 files
==solution12:43
==solution13:44
==solution17:45
==solution19:43
==solution1:38
==solution21:45
==solution27:38
==solution2:39
==solution3:47
==solution6:42
==solution8:40
==solution9:42
hash1('adelaide', 10) # 1
hash2('adelaide', 10) # 8
hash3('adelaide', 10) # 0
hash4('adelaide', 10) # 6

# %%
"""
# Exercise 2 - Hash Table
"""

# %%
"""
In this exercise, you will implement your own HashTable class. You will use chaining when collisions happen. The functions to be completed are
- `add_element(self, val)` function inserts an element into the hash table. Your code should first calculate the hash number of the input value `val`, then insert it into the table.
- `search(self, val)` function search for the input value `val` in the hash table. If the value is already inside the table, it should return `True`, otherwise `False`.

The provided test code first reads a list of books from a file `books.txt`, and then constructs a HashTable containing all books. You can think of it as a book management system in a library that keeps track of weather a book is inside the library.
"""

# %%
size = 0
table = []
collision = 0

def create_table(table_size):
    global size, table, collision
    size = table_size
    table = [[] for i in range(table_size)] # allocate an empty 2D list
    collision = 0 # number of collision

def add_element(val):
    #'''add an element into the hash table'''
    # insert the book name into the hash table, and
    # if collision happens, increase the value by 1
    # ~ 4 lines of code
    # INSERT YOUR CODE BELOW (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 13 files
==solution25:55
==solution43:55
==solution44:45
==solution45:52
==solution46:52
==solution48:73
==solution49:50
==solution50:50
==solution52:50
==solution53:57
==solution55:53
==solution56:59
==solution57:57
set_list1 = [ # first test input
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9, 10],
    [1, 3, 7],
    [2, 4, 6, 8]
]

set_list2 = [ # second test input
    [4, 2, 5],
    [1, 7],
    [2, 4, 8, 9, 10],
    [5, 10],
    [3, 5, 6],
    [2, 6],
    [1, 8, 9, 10]
]

ss = brute_force_set(set_list1)
print(ss) # ([1, 2, 3], [4, 5, 6], [7, 8, 9, 10])
print('---')
ss = brute_force_set(set_list2)
print(ss) # ([1, 7], [2, 4, 8, 9, 10], [3, 5, 6])

# %%
"""
## Exercise 2: Set cover - greedy



In this exercise, please implement a greedy algorithm that **for each step, takes a set that contains the most uncovered integers** until it covers all integers from `1` to `10`.
"""

# %%
import copy (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 2 files
==solution24:51
==solution41:57
set_list1 = [ # first test input
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9, 10],
    [1, 3, 7],
    [2, 4, 6, 8]
]

set_list2 = [ # second test input
    [4, 2, 5],
    [1, 7],
    [2, 4, 8, 9, 10],
    [5, 10],
    [3, 5, 6],
    [2, 6],
    [1, 8, 9, 10]
]

ss = brute_force_set(set_list1)
print(ss) # ([1, 2, 3], [4, 5, 6], [7, 8, 9, 10])
print('---')
ss = brute_force_set(set_list2)
print(ss) # ([1, 7], [2, 4, 8, 9, 10], [3, 5, 6])


# %%
"""
## Exercise 2: Set cover - greedy



In this exercise, please implement a greedy algorithm that **for each step, takes a set that contains the most uncovered integers** until it covers all integers from `1` to `10`.
"""

# %% (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 16 files
==solution24:51
==solution25:55
==solution41:57
==solution43:55
==solution44:45
==solution45:52
==solution46:52
==solution48:73
==solution49:50
==solution50:50
==solution51:51
==solution52:50
==solution53:57
==solution55:53
==solution56:59
==solution57:57
set_list1 = [ # first test input
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9, 10],
    [1, 3, 7],
    [2, 4, 6, 8]
]

set_list2 = [ # second test input
    [4, 2, 5],
    [1, 7],
    [2, 4, 8, 9, 10],
    [5, 10],
    [3, 5, 6],
    [2, 6],
    [1, 8, 9, 10]
]

ss = brute_force_set(set_list1)
print(ss) # ([1, 2, 3], [4, 5, 6], [7, 8, 9, 10])
print('---')
ss = brute_force_set(set_list2)
print(ss) # ([1, 7], [2, 4, 8, 9, 10], [3, 5, 6])

# %%
"""
## Exercise 2: Set cover - greedy



In this exercise, please implement a greedy algorithm that **for each step, takes a set that contains the most uncovered integers** until it covers all integers from `1` to `10`.
"""

# %% (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 3 files
==solution11:133
==solution23:141
==solution31:134
def q2_add_edge(node1, node2, graph, weight = 1):
    # '''add an edge from node 1 to node 2'''
    node1 = node1.lower()
    node2 = node2.lower()

    if not node1 in graph:
        graph[node1] = {}
    if not node2 in graph:
        graph[node2] = {}
    graph[node1][node2] = weight

def q2_get_neighbor(node, graph):
    #'''get neighboring nodes'''
    node = node.lower()
    if node in graph:
        return copy.deepcopy(graph[node])

def q2_show(graph):
    return str(graph)

def q2_build_graph(graph):
    # DIJKSTRA TESTING
    # INSERT YOUR CODE BELOW
    # ~8 LINES
    q2_add_edge('a', 'b', graph, 5)
    q2_add_edge('a', 'c', graph, 0)
    q2_add_edge('b', 'd', graph, 15)
    q2_add_edge('b', 'e', graph, 20)
    q2_add_edge('c', 'd', graph, 30)
    q2_add_edge('c', 'e', graph, 35)
    q2_add_edge('d', 'f', graph, 20)
    q2_add_edge('e', 'f', graph, 10)

 (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 2 files
==solution10:52
==solution14:45
print(hash4('adelaide', 10))

# %%
"""
# Exercise 2 - Hash Table
"""

# %%
"""
In this exercise, you will implement your own HashTable class. You will use chaining when collisions happen. The functions to be completed are
- `add_element(self, val)` function inserts an element into the hash table. Your code should first calculate the hash number of the input value `val`, then insert it into the table.
- `search(self, val)` function search for the input value `val` in the hash table. If the value is already inside the table, it should return `True`, otherwise `False`.

The provided test code first reads a list of books from a file `books.txt`, and then constructs a HashTable containing all books. You can think of it as a book management system in a library that keeps track of weather a book is inside the library.
"""

# %%
size = 0
table = []
collision = 0

def create_table(table_size):
    global size, table, collision
    size = table_size
    table = [[] for i in range(table_size)] # allocate an empty 2D list
    collision = 0 # number of collision

def add_element(val):
    #'''add an element into the hash table'''
    # insert the book name into the hash table, and
    # if collision happens, increase the value by 1
    # ~ 4 lines of code
    # INSERT YOUR CODE BELOW (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 3 files
==solution24:198
==solution41:204
==solution46:188
                        else: #if the last row have a better option
                            grid[i][j] = grid[i-1][j] #copy the last best option
    return grid

def display(grid):
    for r in grid:
        s = ' '
        for c in r:
            s += f'{c:4} '
        print(s)

g = knapsack_dp(bag1, item_list1)
display(g)
print('---')
g = knapsack_dp(bag2, item_list2)
display(g)

# output should be as below

#     0    0    0    0 3000
#     0 1500 1500 1500 3000
#     0 1500 1500 2000 3500
# ---
#     0  700  700  700  700  700  700  700
#     0  700  700  700 1000 1000 1000 1000
#     0  700  700  700 1400 1400 1400 1700
#     0  700  700  700 1400 1700 1700 1700
#     0  700  700 1200 1900 1900 1900 2600
#     0  900 1600 1600 2100 2800 2800 2800
#     0  900 1700 2400 2400 2900 3600 3600

# %% (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 12 files
==solution11:36
==solution15:36
==solution22:36
==solution23:36
==solution28:36
==solution30:36
==solution32:36
==solution34:36
==solution35:36
==solution36:36
==solution39:36
==solution4:36
    node = node.lower()
    if node not in graph:
        graph[node] = []

def q1_add_edge(node1, node2, graph):
    # '''add an edge from node 1 to node 2'''
    node1 = node1.lower()
    node2 = node2.lower()

    # add nodes into graph
    q1_add_node(node1, graph)
    q1_add_node(node2, graph)

    # add edge node1 -> node2
    node = graph[node1]
    if node2 not in node:
        node.append(node2)

def q1_get_neighbor(node, graph):
    #'''get neighboring nodes'''
    node = node.lower()

    if node in graph:
        return copy.deepcopy(graph[node])

def q1_show(graph):
    return str(graph)

def q1_build_graph(graph):
    # INSERT YOUR CODE BELOW
    # ~ 7 lines
    q1_add_edge('you', 'alice', graph) (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 16 files
==solution0:132
==solution10:135
==solution12:128
==solution14:129
==solution16:125
==solution17:120
==solution19:120
==solution1:115
==solution20:123
==solution27:104
==solution2:120
==solution42:120
==solution5:132
==solution6:121
==solution8:106
==solution9:119
    create_table(100)
    for line in f:
        line = line.strip()
        add_element(line)
print(f'Number of collision is {collision}') # should be 34

# %%
"""
# Exercise 3 - Duplicate

Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.

### Example 1:

Input: nums = `[1,2,3,1]` <br>
Output: true
### Example 2:

Input: nums = `[1,2,3,4]` <br>
Output: false
### Example 3:

Input: nums = `[1,1,1,3,3,4,3,2,4,2]` <br>
Output: true


"""

# %%
def check_dup(li):
    # Enter your code below
    # ~ 7 lines (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 2 files
==solution28:176
==solution36:169
def q2_dijkstra(node1, node2, graph):
    node1 = node1.lower()
    node2 = node2.lower()

    max_c = 10000
    costs = {}
    visited = []

    # initialise costs
    for k in graph:
        costs[k] = max_c
        # print(costs)

    # add initial nodes
    nei = graph[node1]
    for n in nei:
        costs[n] = graph[node1][n]

    # dijkstra algorithm start
    while True:
        max_c = 10000
        node = -1

        # Find lowest cost unvisisted node and set it as node
        # ~ 6 lines
        # INSERT YOUR CODE BELOW
        for n in costs:
            if n not in visited:
                if costs[n]<max_c:
                    max_c=costs[n]
                    node=n (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 4 files
==solution26:36
==solution29:36
==solution32:36
==solution37:36
    node = node.lower()
    if node not in graph:
        graph[node] = []

def q1_add_edge(node1, node2, graph):
    # '''add an edge from node 1 to node 2'''
    node1 = node1.lower()
    node2 = node2.lower()

    # add nodes into graph
    q1_add_node(node1, graph)
    q1_add_node(node2, graph)

    # add edge node1 -> node2
    node = graph[node1]
    if node2 not in node:
        node.append(node2)

def q1_get_neighbor(node, graph):
    #'''get neighboring nodes'''
    node = node.lower()

    if node in graph:
        return copy.deepcopy(graph[node])

def q1_show(graph):
    return str(graph)

def q1_build_graph(graph):
    # INSERT YOUR CODE BELOW
    # ~ 7 lines (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 5 files
==solution10:135
==solution13:129
==solution17:120
==solution20:123
==solution9:119
    create_table(100)
    for line in f:
        line = line.strip()
        add_element(line)
print(f'Number of collision is {collision}') # should be 34

# %%
"""
# Exercise 3 - Duplicate

Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.

### Example 1:

Input: nums = `[1,2,3,1]` <br>
Output: true
### Example 2:

Input: nums = `[1,2,3,4]` <br>
Output: false
### Example 3:

Input: nums = `[1,1,1,3,3,4,3,2,4,2]` <br>
Output: true


"""

# %%
def check_dup(li):
    # Enter your code below (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 2 files
==solution31:36
==solution32:36
    node = node.lower()
    if node not in graph:
        graph[node] = []

def q1_add_edge(node1, node2, graph):
    # '''add an edge from node 1 to node 2'''
    node1 = node1.lower()
    node2 = node2.lower()

    # add nodes into graph
    q1_add_node(node1, graph)
    q1_add_node(node2, graph)

    # add edge node1 -> node2
    node = graph[node1]
    if node2 not in node:
        node.append(node2)

def q1_get_neighbor(node, graph):
    #'''get neighboring nodes'''
    node = node.lower()

    if node in graph:
        return copy.deepcopy(graph[node])

def q1_show(graph):
    return str(graph)

def q1_build_graph(graph):
    # INSERT YOUR CODE BELOW (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 12 files
==solution24:200
==solution25:201
==solution41:206
==solution43:208
==solution44:178
==solution45:183
==solution46:190
==solution48:192
==solution49:227
==solution50:191
==solution51:179
==solution55:189
    return grid

def display(grid):
    for r in grid:
        s = ' '
        for c in r:
            s += f'{c:4} '
        print(s)

g = knapsack_dp(bag1, item_list1)
display(g)
print('---')
g = knapsack_dp(bag2, item_list2)
display(g)

# output should be as below

#     0    0    0    0 3000
#     0 1500 1500 1500 3000
#     0 1500 1500 2000 3500
# ---
#     0  700  700  700  700  700  700  700
#     0  700  700  700 1000 1000 1000 1000
#     0  700  700  700 1400 1400 1400 1700
#     0  700  700  700 1400 1700 1700 1700
#     0  700  700 1200 1900 1900 1900 2600
#     0  900 1600 1600 2100 2800 2800 2800
#     0  900 1700 2400 2400 2900 3600 3600

# %% (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 13 files
==solution12:43
==solution13:44
==solution16:44
==solution17:45
==solution19:43
==solution1:38
==solution21:45
==solution27:38
==solution2:39
==solution3:47
==solution6:42
==solution8:40
==solution9:42
hash1('adelaide', 10) # 1
hash2('adelaide', 10) # 8
hash3('adelaide', 10) # 0
hash4('adelaide', 10) # 6

# %%
"""
# Exercise 2 - Hash Table
"""

# %%
"""
In this exercise, you will implement your own HashTable class. You will use chaining when collisions happen. The functions to be completed are
- `add_element(self, val)` function inserts an element into the hash table. Your code should first calculate the hash number of the input value `val`, then insert it into the table.
- `search(self, val)` function search for the input value `val` in the hash table. If the value is already inside the table, it should return `True`, otherwise `False`.

The provided test code first reads a list of books from a file `books.txt`, and then constructs a HashTable containing all books. You can think of it as a book management system in a library that keeps track of weather a book is inside the library.
"""

# %%
size = 0
table = []
collision = 0

def create_table(table_size):
    global size, table, collision
    size = table_size
    table = [[] for i in range(table_size)] # allocate an empty 2D list
    collision = 0 # number of collision
 (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 5 files
==solution10:135
==solution17:120
==solution20:123
==solution21:111
==solution9:119
    create_table(100)
    for line in f:
        line = line.strip()
        add_element(line)
print(f'Number of collision is {collision}') # should be 34

# %%
"""
# Exercise 3 - Duplicate

Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.

### Example 1:

Input: nums = `[1,2,3,1]` <br>
Output: true
### Example 2:

Input: nums = `[1,2,3,4]` <br>
Output: false
### Example 3:

Input: nums = `[1,1,1,3,3,4,3,2,4,2]` <br>
Output: true


"""

# %% (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 4 files
==solution28:176
==solution36:169
==solution37:172
==solution7:184
def q2_dijkstra(node1, node2, graph):
    node1 = node1.lower()
    node2 = node2.lower()

    max_c = 10000
    costs = {}
    visited = []

    # initialise costs
    for k in graph:
        costs[k] = max_c
        # print(costs)

    # add initial nodes
    nei = graph[node1]
    for n in nei:
        costs[n] = graph[node1][n]

    # dijkstra algorithm start
    while True:
        max_c = 10000
        node = -1

        # Find lowest cost unvisisted node and set it as node
        # ~ 6 lines
        # INSERT YOUR CODE BELOW
        for n in costs:
            if n not in visited: (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 13 files
==solution24:200
==solution25:201
==solution41:206
==solution43:208
==solution44:178
==solution45:183
==solution46:190
==solution48:192
==solution49:227
==solution50:191
==solution51:179
==solution53:186
==solution55:189
    return grid

def display(grid):
    for r in grid:
        s = ' '
        for c in r:
            s += f'{c:4} '
        print(s)

g = knapsack_dp(bag1, item_list1)
display(g)
print('---')
g = knapsack_dp(bag2, item_list2)
display(g)

# output should be as below

#     0    0    0    0 3000
#     0 1500 1500 1500 3000
#     0 1500 1500 2000 3500
# ---
#     0  700  700  700  700  700  700  700
#     0  700  700  700 1000 1000 1000 1000
#     0  700  700  700 1400 1400 1400 1700
#     0  700  700  700 1400 1700 1700 1700
#     0  700  700 1200 1900 1900 1900 2600
#     0  900 1600 1600 2100 2800 2800 2800
#     0  900 1700 2400 2400 2900 3600 3600 (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 13 files
==solution24:202
==solution25:203
==solution41:208
==solution43:210
==solution44:180
==solution45:185
==solution46:192
==solution48:194
==solution49:229
==solution50:193
==solution51:181
==solution52:177
==solution55:191
def display(grid):
    for r in grid:
        s = ' '
        for c in r:
            s += f'{c:4} '
        print(s)

g = knapsack_dp(bag1, item_list1)
display(g)
print('---')
g = knapsack_dp(bag2, item_list2)
display(g)

# output should be as below

#     0    0    0    0 3000
#     0 1500 1500 1500 3000
#     0 1500 1500 2000 3500
# ---
#     0  700  700  700  700  700  700  700
#     0  700  700  700 1000 1000 1000 1000
#     0  700  700  700 1400 1400 1400 1700
#     0  700  700  700 1400 1700 1700 1700
#     0  700  700 1200 1900 1900 1900 2600
#     0  900 1600 1600 2100 2800 2800 2800
#     0  900 1700 2400 2400 2900 3600 3600

# %% (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 2 files
==solution29:173
==solution32:173
def q2_dijkstra(node1, node2, graph):
    node1 = node1.lower()
    node2 = node2.lower()

    max_c = 10000
    costs = {}
    visited = []

    # initialise costs
    for k in graph:
        costs[k] = max_c
#         print(costs)

    # add initial nodes
    nei = graph[node1]
    for n in nei:
        costs[n] = graph[node1][n]

    # dijkstra algorithm start
    while True:
        max_c = 10000
        node = -1


        # Find lowest cost unvisisted node and set it as node
        # ~ 6 lines
        # INSERT YOUR CODE BELOW (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 11 files
==solution15:170
==solution26:170
==solution28:176
==solution30:181
==solution34:169
==solution35:173
==solution36:169
==solution37:172
==solution39:179
==solution4:172
==solution7:184
def q2_dijkstra(node1, node2, graph):
    node1 = node1.lower()
    node2 = node2.lower()

    max_c = 10000
    costs = {}
    visited = []

    # initialise costs
    for k in graph:
        costs[k] = max_c
        # print(costs)

    # add initial nodes
    nei = graph[node1]
    for n in nei:
        costs[n] = graph[node1][n]

    # dijkstra algorithm start
    while True:
        max_c = 10000
        node = -1

        # Find lowest cost unvisisted node and set it as node
        # ~ 6 lines
        # INSERT YOUR CODE BELOW
        for n in costs: (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 2 files
==solution52:177
==solution53:188
def display(grid):
    for r in grid:
        s = ' '
        for c in r:
            s += f'{c:4} '
        print(s)

g = knapsack_dp(bag1, item_list1)
display(g)
print('---')
g = knapsack_dp(bag2, item_list2)
display(g)

# output should be as below

#     0    0    0    0 3000
#     0 1500 1500 1500 3000
#     0 1500 1500 2000 3500
# ---
#     0  700  700  700  700  700  700  700
#     0  700  700  700 1000 1000 1000 1000
#     0  700  700  700 1400 1400 1400 1700
#     0  700  700  700 1400 1700 1700 1700
#     0  700  700 1200 1900 1900 1900 2600
#     0  900 1600 1600 2100 2800 2800 2800
#     0  900 1700 2400 2400 2900 3600 3600 (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 2 files
==solution11:193
==solution29:200
        lowest = max_c
        for n in costs:
            if n not in visited:
                if costs[n] < lowest:
                    lowest = costs[n]
                    node = n

        # if no unvisisted node, break
        if(node == -1):
            break

        # Main loop that
        # 1. Updates the weight around the node with lowest cost
        # 2. Update the visisted node
        # ~ 6 lines
        # INSERT YOUR CODE BELOW
        neighbors = graph[node]
        for n in neighbors:
            new_cost = lowest + graph[node][n]
            if new_cost < costs[n]:
                costs[n] = new_cost
        visited.append(node)

    return str(costs)

# TEST CASE BELOW (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 15 files
==solution11:167
==solution15:170
==solution26:170
==solution28:176
==solution29:173
==solution30:181
==solution31:169
==solution32:173
==solution34:169
==solution35:173
==solution36:169
==solution37:172
==solution39:179
==solution4:172
==solution7:184
def q2_dijkstra(node1, node2, graph):
    node1 = node1.lower()
    node2 = node2.lower()

    max_c = 10000
    costs = {}
    visited = []

    # initialise costs
    for k in graph:
        costs[k] = max_c
        # print(costs)

    # add initial nodes
    nei = graph[node1]
    for n in nei:
        costs[n] = graph[node1][n]

    # dijkstra algorithm start
    while True:
        max_c = 10000
        node = -1

        # Find lowest cost unvisisted node and set it as node
        # ~ 6 lines
        # INSERT YOUR CODE BELOW (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 2 files
==solution34:133
==solution4:136
def q2_add_edge(node1, node2, graph, weight = 1):
    # '''add an edge from node 1 to node 2'''
    node1 = node1.lower()
    node2 = node2.lower()

    if not node1 in graph:
        graph[node1] = {}
    if not node2 in graph:
        graph[node2] = {}
    graph[node1][node2] = weight

def q2_get_neighbor(node, graph):
    #'''get neighboring nodes'''
    node = node.lower()
    if node in graph:
        return copy.deepcopy(graph[node])

def q2_show(graph):
    return str(graph)

def q2_build_graph(graph):
    # DIJKSTRA TESTING
    # INSERT YOUR CODE BELOW
    # ~8 LINES
    # BEGIN SOLUTION (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 14 files
==solution24:205
==solution25:206
==solution41:211
==solution43:213
==solution44:183
==solution45:188
==solution46:195
==solution48:197
==solution49:232
==solution50:196
==solution51:184
==solution52:180
==solution55:194
==solution56:210
        for c in r:
            s += f'{c:4} '
        print(s)

g = knapsack_dp(bag1, item_list1)
display(g)
print('---')
g = knapsack_dp(bag2, item_list2)
display(g)

# output should be as below

#     0    0    0    0 3000
#     0 1500 1500 1500 3000
#     0 1500 1500 2000 3500
# ---
#     0  700  700  700  700  700  700  700
#     0  700  700  700 1000 1000 1000 1000
#     0  700  700  700 1400 1400 1400 1700
#     0  700  700  700 1400 1700 1700 1700
#     0  700  700 1200 1900 1900 1900 2600
#     0  900 1600 1600 2100 2800 2800 2800
#     0  900 1700 2400 2400 2900 3600 3600

# %% (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 2 files
==solution41:51
==solution51:101
    return result


# ================
# TEST CASES BELOW

set_list1 = [ # first test input
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9, 10],
    [1, 3, 7],
    [2, 4, 6, 8]
]

set_list2 = [ # second test input
    [4, 2, 5],
    [1, 7],
    [2, 4, 8, 9, 10],
    [5, 10],
    [3, 5, 6],
    [2, 6],
    [1, 8, 9, 10]
]
 (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 2 files
==solution14:42
==solution5:45
print(hash1('adelaide', 10)) # 1
print(hash2('adelaide', 10)) # 8
print(hash3('adelaide', 10)) # 0
print(hash4('adelaide', 10)) # 6

# %%
"""
# Exercise 2 - Hash Table
"""

# %%
"""
In this exercise, you will implement your own HashTable class. You will use chaining when collisions happen. The functions to be completed are
- `add_element(self, val)` function inserts an element into the hash table. Your code should first calculate the hash number of the input value `val`, then insert it into the table.
- `search(self, val)` function search for the input value `val` in the hash table. If the value is already inside the table, it should return `True`, otherwise `False`.

The provided test code first reads a list of books from a file `books.txt`, and then constructs a HashTable containing all books. You can think of it as a book management system in a library that keeps track of weather a book is inside the library.
"""

# %%
size = 0
table = []
collision = 0
 (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 16 files
==solution11:133
==solution15:136
==solution22:137
==solution23:141
==solution26:137
==solution28:142
==solution29:139
==solution30:144
==solution31:134
==solution32:138
==solution34:133
==solution35:139
==solution36:136
==solution37:138
==solution39:145
==solution4:136
def q2_add_edge(node1, node2, graph, weight = 1):
    # '''add an edge from node 1 to node 2'''
    node1 = node1.lower()
    node2 = node2.lower()

    if not node1 in graph:
        graph[node1] = {}
    if not node2 in graph:
        graph[node2] = {}
    graph[node1][node2] = weight

def q2_get_neighbor(node, graph):
    #'''get neighboring nodes'''
    node = node.lower()
    if node in graph:
        return copy.deepcopy(graph[node])

def q2_show(graph):
    return str(graph)

def q2_build_graph(graph):
    # DIJKSTRA TESTING
    # INSERT YOUR CODE BELOW
    # ~8 LINES (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 2 files
==solution53:191
==solution56:210
        for c in r:
            s += f'{c:4} '
        print(s)

g = knapsack_dp(bag1, item_list1)
display(g)
print('---')
g = knapsack_dp(bag2, item_list2)
display(g)

# output should be as below

#     0    0    0    0 3000
#     0 1500 1500 1500 3000
#     0 1500 1500 2000 3500
# ---
#     0  700  700  700  700  700  700  700
#     0  700  700  700 1000 1000 1000 1000
#     0  700  700  700 1400 1400 1400 1700
#     0  700  700  700 1400 1700 1700 1700
#     0  700  700 1200 1900 1900 1900 2600
#     0  900 1600 1600 2100 2800 2800 2800
#     0  900 1700 2400 2400 2900 3600 3600 (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 15 files
==solution24:209
==solution25:210
==solution41:215
==solution43:217
==solution44:187
==solution45:192
==solution46:199
==solution48:201
==solution49:236
==solution50:200
==solution51:188
==solution52:184
==solution55:198
==solution56:214
==solution57:221
g = knapsack_dp(bag1, item_list1)
display(g)
print('---')
g = knapsack_dp(bag2, item_list2)
display(g)

# output should be as below

#     0    0    0    0 3000
#     0 1500 1500 1500 3000
#     0 1500 1500 2000 3500
# ---
#     0  700  700  700  700  700  700  700
#     0  700  700  700 1000 1000 1000 1000
#     0  700  700  700 1400 1400 1400 1700
#     0  700  700  700 1400 1700 1700 1700
#     0  700  700 1200 1900 1900 1900 2600
#     0  900 1600 1600 2100 2800 2800 2800
#     0  900 1700 2400 2400 2900 3600 3600

# %% (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 2 files
==solution53:195
==solution57:221
g = knapsack_dp(bag1, item_list1)
display(g)
print('---')
g = knapsack_dp(bag2, item_list2)
display(g)

# output should be as below

#     0    0    0    0 3000
#     0 1500 1500 1500 3000
#     0 1500 1500 2000 3500
# ---
#     0  700  700  700  700  700  700  700
#     0  700  700  700 1000 1000 1000 1000
#     0  700  700  700 1400 1400 1400 1700
#     0  700  700  700 1400 1700 1700 1700
#     0  700  700 1200 1900 1900 1900 2600
#     0  900 1600 1600 2100 2800 2800 2800
#     0  900 1700 2400 2400 2900 3600 3600 (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 5 files
==solution24:127
==solution49:50
==solution51:51
==solution56:59
==solution57:57
set_list1 = [ # first test input
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9, 10],
    [1, 3, 7],
    [2, 4, 6, 8]
]

set_list2 = [ # second test input
    [4, 2, 5],
    [1, 7],
    [2, 4, 8, 9, 10],
    [5, 10],
    [3, 5, 6],
    [2, 6],
    [1, 8, 9, 10]
]
 (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 31 files
==solution24:51
==solution25:125
==solution25:55
==solution41:141
==solution41:57
==solution43:134
==solution43:55
==solution44:105
==solution44:45
==solution45:118
==solution45:52
==solution46:125
==solution46:52
==solution48:132
==solution48:73
==solution49:127
==solution49:50
==solution50:124
==solution50:50
==solution51:107
==solution51:51
==solution52:115
==solution52:50
==solution53:114
==solution53:57
==solution55:115
==solution55:53
==solution56:137
==solution56:59
==solution57:138
==solution57:57
set_list1 = [ # first test input
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9, 10],
    [1, 3, 7],
    [2, 4, 6, 8]
]

set_list2 = [ # second test input
    [4, 2, 5],
    [1, 7],
    [2, 4, 8, 9, 10],
    [5, 10],
    [3, 5, 6],
    [2, 6],
    [1, 8, 9, 10]
]
 (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 2 files
==solution4:69
==solution7:73
    q1_add_edge('you', 'bob', graph)
    q1_add_edge('you', 'claire', graph)
    q1_add_edge('alice', 'danna', graph)
    q1_add_edge('bob', 'ed', graph)
    q1_add_edge('bob', 'danna', graph)
    q1_add_edge('claire', 'fiona', graph)
    q1_add_edge('claire', 'george', graph)
    # END SOLUTION
    # END OF YOUR CODE

def q1_bfs(node1, node2, graph):
    #'''return True if there is a path between node1 and node2'''
    node1 = node1.lower()
    node2 = node2.lower()

    # INSERT YOUR CODE BELOW
    # ~ 8 lines (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 5 files
==solution11:67
==solution15:67
==solution23:67
==solution26:68
==solution36:67
    q1_add_edge('you', 'alice', graph)
    q1_add_edge('you', 'bob', graph)
    q1_add_edge('you', 'claire', graph)
    q1_add_edge('alice', 'danna', graph)
    q1_add_edge('bob', 'ed', graph)
    q1_add_edge('bob', 'danna', graph)
    q1_add_edge('claire', 'fiona', graph)
    q1_add_edge('claire', 'george', graph)
    # END OF YOUR CODE

def q1_bfs(node1, node2, graph):
    #'''return True if there is a path between node1 and node2'''
    node1 = node1.lower()
    node2 = node2.lower()

    # INSERT YOUR CODE BELOW
    # ~ 8 lines (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 5 files
==solution14:62
==solution19:63
==solution1:58
==solution6:62
==solution9:62
size = 0
table = []
collision = 0

def create_table(table_size):
    global size, table, collision
    size = table_size
    table = [[] for i in range(table_size)] # allocate an empty 2D list
    collision = 0 # number of collision

def add_element(val):
    #'''add an element into the hash table'''
    # insert the book name into the hash table, and
    # if collision happens, increase the value by 1
    # ~ 4 lines of code
    # INSERT YOUR CODE BELOW
    global collision (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 2 files
==solution41:75
==solution51:69
ss = brute_force_set(set_list1)
print(ss) # ([1, 2, 3], [4, 5, 6], [7, 8, 9, 10])
print('---')
ss = brute_force_set(set_list2)
print(ss) # ([1, 7], [2, 4, 8, 9, 10], [3, 5, 6])

# %%


# %%
"""
## Exercise 2: Set cover - greedy



In this exercise, please implement a greedy algorithm that **for each step, takes a set that contains the most uncovered integers** until it covers all integers from `1` to `10`. (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 2 files
==solution12:87
==solution6:84
def search(val):
    #'''search if the val is already in the hash table'''
    # ~ 5 lines of code
    # INSERT YOUR CODE BELOW
    for i in table:
        if val in i:
            return True
    return False

def hash4_b(val):
    d = {'a': 1, 'b': 2, 'c': 3, 'd': 5, 'e': 7, 'f': 11, 'g': 13, 'h': 17, 'i': 19, 'j': 23, 'k': 29, 'l': 31, 'm': 37, 'n': 41, 'o': 43, 'p': 47, 'q': 53, 'r': 59, 's': 61, 't': 67, 'u': 71, 'v': 73, 'w': 79, 'x': 83, 'y': 89, 'z': 97}
    # Copy your hash4 function to here
    # Note that you will need to handle exception
    # i.e if the character does not have a primary mapping, map it to 0
    # ~8 lines
    # INSERT YOUR CODE BELOW (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 15 files
==solution10:69
==solution12:63
==solution13:64
==solution14:62
==solution17:65
==solution19:63
==solution1:58
==solution20:65
==solution21:65
==solution27:58
==solution2:59
==solution3:67
==solution6:62
==solution8:60
==solution9:62
size = 0
table = []
collision = 0

def create_table(table_size):
    global size, table, collision
    size = table_size
    table = [[] for i in range(table_size)] # allocate an empty 2D list
    collision = 0 # number of collision

def add_element(val):
    #'''add an element into the hash table'''
    # insert the book name into the hash table, and
    # if collision happens, increase the value by 1
    # ~ 4 lines of code
    # INSERT YOUR CODE BELOW (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 2 files
==solution35:201
==solution37:199
            if n not in visited:
                if costs[n] < max_c:
                    max_c = costs[n]
                    node = n

        # if no unvisisted node, break
        if(node == -1):
            break

        # Main loop that
        # 1. Updates the weight around the node with lowest cost
        # 2. Update the visisted node
        # ~ 6 lines
        # INSERT YOUR CODE BELOW
        neighbors = graph[node] (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 2 files
==solution16:68
==solution5:70
def create_table(table_size):
    global size, table, collision
    size = table_size
    table = [[] for i in range(table_size)] # allocate an empty 2D list
    collision = 0 # number of collision


def add_element(val):
    #'''add an element into the hash table'''
    # insert the book name into the hash table, and
    # if collision happens, increase the value by 1
    # ~ 4 lines of code
    # INSERT YOUR CODE BELOW
    global collision (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 17 files
==solution11:40
==solution15:40
==solution22:40
==solution23:40
==solution26:40
==solution28:40
==solution29:40
==solution30:40
==solution31:40
==solution32:40
==solution34:40
==solution35:40
==solution36:40
==solution37:40
==solution39:40
==solution4:40
==solution7:42
def q1_add_edge(node1, node2, graph):
    # '''add an edge from node 1 to node 2'''
    node1 = node1.lower()
    node2 = node2.lower()

    # add nodes into graph
    q1_add_node(node1, graph)
    q1_add_node(node2, graph)

    # add edge node1 -> node2
    node = graph[node1]
    if node2 not in node:
        node.append(node2)
 (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 2 files
==solution0:69
==solution12:67
def create_table(table_size):
    global size, table, collision
    size = table_size
    table = [[] for i in range(table_size)] # allocate an empty 2D list
    collision = 0 # number of collision

def add_element(val):
    #'''add an element into the hash table'''
    # insert the book name into the hash table, and
    # if collision happens, increase the value by 1
    # ~ 4 lines of code
    # INSERT YOUR CODE BELOW

    global collision (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 7 files
==solution41:94
==solution44:79
==solution45:86
==solution48:107
==solution49:84
==solution50:84
==solution56:93
import copy
def greedy_set(list_sets):
    sets = list_sets.copy()
    ans = [] # your answer, should be a list of sets
    covered = {}

    kk = 0
    while True:
        # INSERT YOUR CODE BELOW
        # Step 1: search for the set with most uncovered integers
        # Step 2: add the set into ans
        # Step 3: check if ans already cover all integers
        # ~ 15 lines (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 12 files
==solution15:184
==solution23:191
==solution26:184
==solution28:190
==solution30:195
==solution34:183
==solution35:187
==solution36:183
==solution37:186
==solution39:193
==solution4:186
==solution7:198
    nei = graph[node1]
    for n in nei:
        costs[n] = graph[node1][n]

    # dijkstra algorithm start
    while True:
        max_c = 10000
        node = -1

        # Find lowest cost unvisisted node and set it as node
        # ~ 6 lines
        # INSERT YOUR CODE BELOW
        for n in costs: (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 5 files
==solution11:64
==solution15:64
==solution23:64
==solution36:64
==solution7:69
def q1_build_graph(graph):
    # INSERT YOUR CODE BELOW
    # ~ 7 lines
    q1_add_edge('you', 'alice', graph)
    q1_add_edge('you', 'bob', graph)
    q1_add_edge('you', 'claire', graph)
    q1_add_edge('alice', 'danna', graph)
    q1_add_edge('bob', 'ed', graph)
    q1_add_edge('bob', 'danna', graph)
    q1_add_edge('claire', 'fiona', graph)
    q1_add_edge('claire', 'george', graph)
    # END OF YOUR CODE
 (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 8 files
==solution41:95
==solution44:80
==solution45:87
==solution48:108
==solution49:85
==solution50:85
==solution56:94
==solution57:94
def greedy_set(list_sets):
    sets = list_sets.copy()
    ans = [] # your answer, should be a list of sets
    covered = {}

    kk = 0
    while True:
        # INSERT YOUR CODE BELOW
        # Step 1: search for the set with most uncovered integers
        # Step 2: add the set into ans
        # Step 3: check if ans already cover all integers
        # ~ 15 lines (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 2 files
==solution28:73
==solution34:73
    q1_add_edge('claire', 'fiona', graph)
    q1_add_edge('claire', 'george', graph)
    ...
    # END OF YOUR CODE

def q1_bfs(node1, node2, graph):
    #'''return True if there is a path between node1 and node2'''
    node1 = node1.lower()
    node2 = node2.lower()

    # INSERT YOUR CODE BELOW
    # ~ 8 lines (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 2 files
==solution17:91
==solution42:88
    if val in table[hash4_b(val)]:
        return True
    else:
        return False

def hash4_b(val):
    d = {'a': 1, 'b': 2, 'c': 3, 'd': 5, 'e': 7, 'f': 11, 'g': 13, 'h': 17, 'i': 19, 'j': 23, 'k': 29, 'l': 31, 'm': 37, 'n': 41, 'o': 43, 'p': 47, 'q': 53, 'r': 59, 's': 61, 't': 67, 'u': 71, 'v': 73, 'w': 79, 'x': 83, 'y': 89, 'z': 97}
    # Copy your hash4 function to here
    # Note that you will need to handle exception
    # i.e if the character does not have a primary mapping, map it to 0
    # ~7 lines
    # INSERT YOUR CODE BELOW (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 17 files
==solution11:181
==solution15:184
==solution22:184
==solution23:191
==solution26:184
==solution28:190
==solution29:187
==solution30:195
==solution31:183
==solution32:187
==solution34:183
==solution35:187
==solution36:183
==solution37:186
==solution39:193
==solution4:186
==solution7:198
    nei = graph[node1]
    for n in nei:
        costs[n] = graph[node1][n]

    # dijkstra algorithm start
    while True:
        max_c = 10000
        node = -1

        # Find lowest cost unvisisted node and set it as node
        # ~ 6 lines
        # INSERT YOUR CODE BELOW (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 2 files
==solution19:19
==solution1:19
def hash1(val, n):
    return 1

def hash2(val, n):
    return len(val)

def hash3(val, n):
    d = {'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': 7, 'i': 8, 'j': 9, 'k': 10, 'l': 11, 'm': 12, 'n': 13, 'o': 14, 'p': 15, 'q': 16, 'r': 17, 's': 18, 't': 19, 'u': 20, 'v': 21, 'w': 22, 'x': 23, 'y': 24, 'z': 25}
    return d[val[0]]

def hash4(val, n):
    d = {'a': 1, 'b': 2, 'c': 3, 'd': 5, 'e': 7, 'f': 11, 'g': 13, 'h': 17, 'i': 19, 'j': 23, 'k': 29, 'l': 31, 'm': 37, 'n': 41, 'o': 43, 'p': 47, 'q': 53, 'r': 59, 's': 61, 't': 67, 'u': 71, 'v': 73, 'w': 79, 'x': 83, 'y': 89, 'z': 97} (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 15 files
==solution0:69
==solution10:73
==solution13:68
==solution14:66
==solution17:69
==solution19:67
==solution1:62
==solution20:69
==solution21:69
==solution27:62
==solution2:63
==solution3:71
==solution6:66
==solution8:64
==solution9:66
def create_table(table_size):
    global size, table, collision
    size = table_size
    table = [[] for i in range(table_size)] # allocate an empty 2D list
    collision = 0 # number of collision

def add_element(val):
    #'''add an element into the hash table'''
    # insert the book name into the hash table, and
    # if collision happens, increase the value by 1
    # ~ 4 lines of code
    # INSERT YOUR CODE BELOW (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 2 files
==solution52:86
==solution53:92
def greedy_set(list_sets):
    sets = list_sets.copy()
    ans = [] # your answer, should be a list of sets

    kk = 0
    while True:
        # INSERT YOUR CODE BELOW
        # Step 1: search for the set with most uncovered integers
        # Step 2: add the set into ans
        # Step 3: check if ans already cover all integers
        # ~ 15 lines (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 2 files
==solution31:66
==solution7:72
    q1_add_edge('you', 'alice', graph)
    q1_add_edge('you', 'bob', graph)
    q1_add_edge('you', 'claire', graph)
    q1_add_edge('alice', 'danna', graph)
    q1_add_edge('bob', 'ed', graph)
    q1_add_edge('bob', 'danna', graph)
    q1_add_edge('claire', 'fiona', graph)
    q1_add_edge('claire', 'george', graph)


 (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 2 files
==solution28:64
==solution7:69
def q1_build_graph(graph):
    # INSERT YOUR CODE BELOW
    # ~ 7 lines
    q1_add_edge('you', 'alice', graph)
    q1_add_edge('you', 'bob', graph)
    q1_add_edge('you', 'claire', graph)
    q1_add_edge('alice', 'danna', graph)
    q1_add_edge('bob', 'ed', graph)
    q1_add_edge('bob', 'danna', graph)
    q1_add_edge('claire', 'fiona', graph)
    q1_add_edge('claire', 'george', graph) (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 2 files
==solution15:210
==solution39:216
        if(node == -1):
            break

        # Main loop that
        # 1. Updates the weight around the node with lowest cost
        # 2. Update the visisted node
        # ~ 6 lines
        # INSERT YOUR CODE BELOW
        neighbors = graph[node]
        for i in neighbors:
            cost = neighbors[i] + costs[node] (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 16 files
==solution11:167
==solution15:170
==solution22:170
==solution26:170
==solution28:176
==solution29:173
==solution30:181
==solution31:169
==solution32:173
==solution34:169
==solution35:173
==solution36:169
==solution37:172
==solution39:179
==solution4:172
==solution7:184
def q2_dijkstra(node1, node2, graph):
    node1 = node1.lower()
    node2 = node2.lower()

    max_c = 10000
    costs = {}
    visited = []

    # initialise costs
    for k in graph:
        costs[k] = max_c (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 5 files
==solution10:98
==solution17:92
==solution2:88
==solution3:97
==solution42:89
        return True
    else:
        return False

def hash4_b(val):
    d = {'a': 1, 'b': 2, 'c': 3, 'd': 5, 'e': 7, 'f': 11, 'g': 13, 'h': 17, 'i': 19, 'j': 23, 'k': 29, 'l': 31, 'm': 37, 'n': 41, 'o': 43, 'p': 47, 'q': 53, 'r': 59, 's': 61, 't': 67, 'u': 71, 'v': 73, 'w': 79, 'x': 83, 'y': 89, 'z': 97}
    # Copy your hash4 function to here
    # Note that you will need to handle exception
    # i.e if the character does not have a primary mapping, map it to 0
    # ~7 lines
    # INSERT YOUR CODE BELOW (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 2 files
==solution1:86
==solution20:93
            return True
    return False

def hash4_b(val):
    d = {'a': 1, 'b': 2, 'c': 3, 'd': 5, 'e': 7, 'f': 11, 'g': 13, 'h': 17, 'i': 19, 'j': 23, 'k': 29, 'l': 31, 'm': 37, 'n': 41, 'o': 43, 'p': 47, 'q': 53, 'r': 59, 's': 61, 't': 67, 'u': 71, 'v': 73, 'w': 79, 'x': 83, 'y': 89, 'z': 97}
    # Copy your hash4 function to here
    # Note that you will need to handle exception
    # i.e if the character does not have a primary mapping, map it to 0
    # ~8 lines
    # INSERT YOUR CODE BELOW
    s = 0 (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 2 files
==solution31:67
==solution4:69
    q1_add_edge('you', 'bob', graph)
    q1_add_edge('you', 'claire', graph)
    q1_add_edge('alice', 'danna', graph)
    q1_add_edge('bob', 'ed', graph)
    q1_add_edge('bob', 'danna', graph)
    q1_add_edge('claire', 'fiona', graph)
    q1_add_edge('claire', 'george', graph)


 (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 3 files
==solution11:157
==solution23:165
==solution4:161
    q2_add_edge('a', 'b', graph, 5)
    q2_add_edge('a', 'c', graph, 0)
    q2_add_edge('b', 'd', graph, 15)
    q2_add_edge('b', 'e', graph, 20)
    q2_add_edge('c', 'd', graph, 30)
    q2_add_edge('c', 'e', graph, 35)
    q2_add_edge('d', 'f', graph, 20)
    q2_add_edge('e', 'f', graph, 10)

 (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 7 files
==solution11:67
==solution15:67
==solution23:67
==solution26:68
==solution31:66
==solution36:67
==solution7:72
    q1_add_edge('you', 'alice', graph)
    q1_add_edge('you', 'bob', graph)
    q1_add_edge('you', 'claire', graph)
    q1_add_edge('alice', 'danna', graph)
    q1_add_edge('bob', 'ed', graph)
    q1_add_edge('bob', 'danna', graph)
    q1_add_edge('claire', 'fiona', graph)
    q1_add_edge('claire', 'george', graph)

 (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 4 files
==solution10:69
==solution14:62
==solution16:64
==solution20:65
size = 0
table = []
collision = 0

def create_table(table_size):
    global size, table, collision
    size = table_size
    table = [[] for i in range(table_size)] # allocate an empty 2D list
    collision = 0 # number of collision
 (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 3 files
==solution19:19
==solution1:19
==solution2:19
def hash1(val, n):
    return 1

def hash2(val, n):
    return len(val)

def hash3(val, n):
    d = {'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': 7, 'i': 8, 'j': 9, 'k': 10, 'l': 11, 'm': 12, 'n': 13, 'o': 14, 'p': 15, 'q': 16, 'r': 17, 's': 18, 't': 19, 'u': 20, 'v': 21, 'w': 22, 'x': 23, 'y': 24, 'z': 25}
    return d[val[0]]
 (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 2 files
==solution0:228
==solution20:213
    return None
    # END SOLUTION
# ---------------
# TEST CASE BELOW
ans = two_sum([2, 7, 11, 15], 22)
print(ans) #(3, 1)
ans = two_sum([2, 7, 11, 15], 18)
print(ans) #(2, 1)
ans = two_sum([2, 7, 11, 15], 10)
print(ans) #None (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 17 files
==solution0:121
==solution10:124
==solution13:118
==solution14:118
==solution16:114
==solution17:109
==solution19:109
==solution1:104
==solution20:112
==solution21:100
==solution27:93
==solution2:109
==solution42:109
==solution5:121
==solution6:110
==solution8:95
==solution9:108
    create_table(10)
    for line in f:
        line = line.strip()
        add_element(line)
print(f'Number of collision is {collision}') # should be 90
print(search('a clockwork orange'))          # should return True
print(search('1984'))                        # should return True
print(search('game of throne'))              # should return False
print(search('foundation'))                  # should return False
 (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 2 files
==solution6:19
==solution9:19
def hash1(val, n):
    return 1

def hash2(val, n):
    return len(val)

def hash3(val, n):
    d = {'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': 7, 'i': 8, 'j': 9, 'k': 10, 'l': 11, 'm': 12, 'n': 13, 'o': 14, 'p': 15, 'q': 16, 'r': 17, 's': 18, 't': 19, 'u': 20, 'v': 21, 'w': 22, 'x': 23, 'y': 24, 'z': 25}
    for i in d: (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 3 files
==solution12:87
==solution16:88
==solution6:84
def search(val):
    #'''search if the val is already in the hash table'''
    # ~ 5 lines of code
    # INSERT YOUR CODE BELOW
    for i in table:
        if val in i:
            return True
    return False
 (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 17 files
==solution11:135
==solution15:138
==solution22:139
==solution23:143
==solution26:139
==solution28:144
==solution29:141
==solution30:146
==solution31:136
==solution32:140
==solution34:135
==solution35:141
==solution36:138
==solution37:140
==solution39:147
==solution4:138
==solution7:149
    node1 = node1.lower()
    node2 = node2.lower()

    if not node1 in graph:
        graph[node1] = {}
    if not node2 in graph:
        graph[node2] = {}
    graph[node1][node2] = weight
 (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 6 files
==solution11:68
==solution15:68
==solution23:68
==solution26:69
==solution36:68
==solution4:69
    q1_add_edge('you', 'bob', graph)
    q1_add_edge('you', 'claire', graph)
    q1_add_edge('alice', 'danna', graph)
    q1_add_edge('bob', 'ed', graph)
    q1_add_edge('bob', 'danna', graph)
    q1_add_edge('claire', 'fiona', graph)
    q1_add_edge('claire', 'george', graph)
    # END OF YOUR CODE
 (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 2 files
==solution1:35
==solution20:36
    return s % n

# TEST CASES BELOW
hash1('adelaide', 10) # 1
hash2('adelaide', 10) # 8
hash3('adelaide', 10) # 0
hash4('adelaide', 10) # 6

# %% (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 3 files
==solution26:68
==solution28:67
==solution31:66
    q1_add_edge('you', 'alice', graph)
    q1_add_edge('you', 'bob', graph)
    q1_add_edge('you', 'claire', graph)
    q1_add_edge('alice', 'danna', graph)
    q1_add_edge('bob', 'ed', graph)
    q1_add_edge('bob', 'danna', graph)
    q1_add_edge('claire', 'fiona', graph)
    q1_add_edge('claire', 'george', graph) (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 11 files
==solution13:231
==solution14:220
==solution16:222
==solution17:213
==solution18:224
==solution19:210
==solution20:217
==solution2:213
==solution5:223
==solution8:200
==solution9:219
ans = two_sum([2, 7, 11, 15], 22)
print(ans) #(3, 1)
ans = two_sum([2, 7, 11, 15], 18)
print(ans) #(2, 1)
ans = two_sum([2, 7, 11, 15], 10)
print(ans) #None

# %% (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 5 files
==solution19:19
==solution1:19
==solution2:19
==solution6:19
==solution9:19
def hash1(val, n):
    return 1

def hash2(val, n):
    return len(val)

def hash3(val, n):
    d = {'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': 7, 'i': 8, 'j': 9, 'k': 10, 'l': 11, 'm': 12, 'n': 13, 'o': 14, 'p': 15, 'q': 16, 'r': 17, 's': 18, 't': 19, 'u': 20, 'v': 21, 'w': 22, 'x': 23, 'y': 24, 'z': 25} (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 2 files
==solution35:64
==solution7:69
def q1_build_graph(graph):
    # INSERT YOUR CODE BELOW
    # ~ 7 lines
    q1_add_edge('you', 'alice', graph)
    q1_add_edge('you', 'bob', graph)
    q1_add_edge('you', 'claire', graph)
    q1_add_edge('alice', 'danna', graph) (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 2 files
==solution28:68
==solution4:69
    q1_add_edge('you', 'bob', graph)
    q1_add_edge('you', 'claire', graph)
    q1_add_edge('alice', 'danna', graph)
    q1_add_edge('bob', 'ed', graph)
    q1_add_edge('bob', 'danna', graph)
    q1_add_edge('claire', 'fiona', graph)
    q1_add_edge('claire', 'george', graph) (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 15 files
==solution24:202
==solution25:203
==solution41:208
==solution43:210
==solution44:180
==solution45:185
==solution46:192
==solution48:194
==solution49:229
==solution50:193
==solution51:181
==solution52:177
==solution53:188
==solution55:191
==solution57:213
def display(grid):
    for r in grid:
        s = ' '
        for c in r:
            s += f'{c:4} '
        print(s)
 (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 2 files
==solution17:26
==solution5:24
    return len(val)


def hash3(val, n):
    d = {'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': 7, 'i': 8, 'j': 9, 'k': 10, 'l': 11, 'm': 12,
         'n': 13, 'o': 14, 'p': 15, 'q': 16, 'r': 17, 's': 18, 't': 19, 'u': 20, 'v': 21, 'w': 22, 'x': 23, 'y': 24,
         'z': 25} (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 2 files
==solution12:27
==solution2:25
def hash3(val, n):
    d = {'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': 7, 'i': 8, 'j': 9, 'k': 10, 'l': 11, 'm': 12, 'n': 13, 'o': 14, 'p': 15, 'q': 16, 'r': 17, 's': 18, 't': 19, 'u': 20, 'v': 21, 'w': 22, 'x': 23, 'y': 24, 'z': 25}
    return d[val[0]] #returns 0th element of value


def hash4(val, n):
    d = {'a': 1, 'b': 2, 'c': 3, 'd': 5, 'e': 7, 'f': 11, 'g': 13, 'h': 17, 'i': 19, 'j': 23, 'k': 29, 'l': 31, 'm': 37, 'n': 41, 'o': 43, 'p': 47, 'q': 53, 'r': 59, 's': 61, 't': 67, 'u': 71, 'v': 73, 'w': 79, 'x': 83, 'y': 89, 'z': 97} (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 2 files
==solution1:25
==solution20:26
def hash3(val, n):
    d = {'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': 7, 'i': 8, 'j': 9, 'k': 10, 'l': 11, 'm': 12, 'n': 13, 'o': 14, 'p': 15, 'q': 16, 'r': 17, 's': 18, 't': 19, 'u': 20, 'v': 21, 'w': 22, 'x': 23, 'y': 24, 'z': 25}
    return d[val[0]]

def hash4(val, n):
    d = {'a': 1, 'b': 2, 'c': 3, 'd': 5, 'e': 7, 'f': 11, 'g': 13, 'h': 17, 'i': 19, 'j': 23, 'k': 29, 'l': 31, 'm': 37, 'n': 41, 'o': 43, 'p': 47, 'q': 53, 'r': 59, 's': 61, 't': 67, 'u': 71, 'v': 73, 'w': 79, 'x': 83, 'y': 89, 'z': 97}
    s = 0 (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 9 files
==solution41:95
==solution44:80
==solution45:87
==solution48:108
==solution49:85
==solution50:85
==solution55:89
==solution56:94
==solution57:94
def greedy_set(list_sets):
    sets = list_sets.copy()
    ans = [] # your answer, should be a list of sets
    covered = {}

    kk = 0 (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 8 files
==solution24:86
==solution41:94
==solution44:79
==solution45:86
==solution48:107
==solution49:84
==solution50:84
==solution56:93
import copy
def greedy_set(list_sets):
    sets = list_sets.copy()
    ans = [] # your answer, should be a list of sets
    covered = {}
 (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 2 files
==solution19:25
==solution20:26
def hash3(val, n):
    d = {'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': 7, 'i': 8, 'j': 9, 'k': 10, 'l': 11, 'm': 12, 'n': 13, 'o': 14, 'p': 15, 'q': 16, 'r': 17, 's': 18, 't': 19, 'u': 20, 'v': 21, 'w': 22, 'x': 23, 'y': 24, 'z': 25}
    return d[val[0]]

def hash4(val, n):
    d = {'a': 1, 'b': 2, 'c': 3, 'd': 5, 'e': 7, 'f': 11, 'g': 13, 'h': 17, 'i': 19, 'j': 23, 'k': 29, 'l': 31, 'm': 37, 'n': 41, 'o': 43, 'p': 47, 'q': 53, 'r': 59, 's': 61, 't': 67, 'u': 71, 'v': 73, 'w': 79, 'x': 83, 'y': 89, 'z': 97} (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 16 files
==solution15:170
==solution22:170
==solution23:175
==solution26:170
==solution28:176
==solution29:173
==solution30:181
==solution31:169
==solution32:173
==solution34:169
==solution35:173
==solution36:169
==solution37:172
==solution39:179
==solution4:172
==solution7:184
def q2_dijkstra(node1, node2, graph):
    node1 = node1.lower()
    node2 = node2.lower()

    max_c = 10000
    costs = {} (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 5 files
==solution10:128
==solution12:121
==solution17:113
==solution20:116
==solution9:112
print(f'Number of collision is {collision}') # should be 90
print(search('a clockwork orange'))          # should return True
print(search('1984'))                        # should return True
print(search('game of throne'))              # should return False
print(search('foundation'))                  # should return False
 (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 18 files
==solution0:124
==solution10:127
==solution13:121
==solution14:121
==solution16:117
==solution17:112
==solution19:112
==solution1:107
==solution20:115
==solution21:103
==solution27:96
==solution2:112
==solution3:125
==solution42:112
==solution5:124
==solution6:113
==solution8:98
==solution9:111
        add_element(line)
print(f'Number of collision is {collision}') # should be 90
print(search('a clockwork orange'))          # should return True
print(search('1984'))                        # should return True
print(search('game of throne'))              # should return False
print(search('foundation'))                  # should return False (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 18 files
==solution0:69
==solution10:73
==solution12:67
==solution13:68
==solution14:66
==solution16:68
==solution17:69
==solution19:67
==solution1:62
==solution20:69
==solution21:69
==solution27:62
==solution2:63
==solution3:71
==solution5:70
==solution6:66
==solution8:64
==solution9:66
def create_table(table_size):
    global size, table, collision
    size = table_size
    table = [[] for i in range(table_size)] # allocate an empty 2D list
    collision = 0 # number of collision
 (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 20 files
==solution0:232
==solution10:225
==solution12:220
==solution13:231
==solution14:220
==solution16:222
==solution17:213
==solution18:224
==solution19:210
==solution1:208
==solution20:217
==solution21:203
==solution27:190
==solution2:213
==solution3:232
==solution42:216
==solution5:223
==solution6:211
==solution8:200
==solution9:219
ans = two_sum([2, 7, 11, 15], 22)
print(ans) #(3, 1)
ans = two_sum([2, 7, 11, 15], 18)
print(ans) #(2, 1)
ans = two_sum([2, 7, 11, 15], 10)
print(ans) #None (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 3 files
==solution24:86
==solution41:94
==solution43:89
import copy
def greedy_set(list_sets):
    sets = list_sets.copy()
    ans = [] # your answer, should be a list of sets
    covered = {} (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 2 files
==solution12:121
==solution3:126
print(f'Number of collision is {collision}') # should be 90
print(search('a clockwork orange'))          # should return True
print(search('1984'))                        # should return True
print(search('game of throne'))              # should return False
print(search('foundation'))                  # should return False (duplicate-code)
solution9.py:1:0: R0801: Similar lines in 14 files
==solution0:120
==solution12:115
==solution13:117
==solution14:117
==solution16:113
==solution19:108
==solution1:103
==solution21:99
==solution27:92
==solution2:108
==solution42:108
==solution5:120
==solution6:109
==solution8:94
with open('books.txt', 'r') as f:
    create_table(10)
    for line in f:
        line = line.strip()
        add_element(line) (duplicate-code)

------------------------------------------------------------------
Your code has been rated at 2.52/10 (previous run: 2.52/10, +0.00)

************************************************************************************************************************