{"quality": {"code": "BAD", "text": "Code quality (beta): BAD"}, "issues": [{"code": "E261", "text": "at least two spaces before inline comment", "line": "for i in range(m, n + 1): #Added +1 to n otherwise it will stop at 19 even though n = 20", "line_number": 6, "column_number": 26, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E262", "text": "inline comment should start with '# '", "line": "for i in range(m, n + 1): #Added +1 to n otherwise it will stop at 19 even though n = 20", "line_number": 6, "column_number": 27, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "R1716", "text": "Simplify chained comparison between the operands", "line": "if i >= m and i <= n: #Checks if i is greater or equal to m and that i is also smaller or equal to n", "line_number": 7, "column_number": 8, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "if i >= m and i <= n: #Checks if i is greater or equal to m and that i is also smaller or equal to n", "line_number": 7, "column_number": 26, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E262", "text": "inline comment should start with '# '", "line": "if i >= m and i <= n: #Checks if i is greater or equal to m and that i is also smaller or equal to n", "line_number": 7, "column_number": 27, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "if i % 3 == 0 or i % 2 == 0: #Checks if i is divisible by 3 or that i is divisible by 2", "line_number": 8, "column_number": 37, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E262", "text": "inline comment should start with '# '", "line": "if i % 3 == 0 or i % 2 == 0: #Checks if i is divisible by 3 or that i is divisible by 2", "line_number": 8, "column_number": 38, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "WPS508", "text": "Found incorrect `not` with compare usage", "line": "if not i % 6 == 0: #Checks if i is NOT divisible by 6", "line_number": 9, "column_number": 16, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "if not i % 6 == 0: #Checks if i is NOT divisible by 6", "line_number": 9, "column_number": 31, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E262", "text": "inline comment should start with '# '", "line": "if not i % 6 == 0: #Checks if i is NOT divisible by 6", "line_number": 9, "column_number": 32, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "my_list.append(i) #If the above if statements are True, i will be added to my_list", "line_number": 10, "column_number": 34, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E262", "text": "inline comment should start with '# '", "line": "my_list.append(i) #If the above if statements are True, i will be added to my_list", "line_number": 10, "column_number": 35, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}]}
