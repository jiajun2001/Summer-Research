{"quality": {"code": "BAD", "text": "Code quality (beta): BAD"}, "issues": [{"code": "WPS462", "text": "Wrong multiline string usage", "line": "# %%", "line_number": 6, "column_number": 5, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "W0105", "text": "String statement has no effect", "line": "\"\"\"", "line_number": 7, "column_number": 1, "category": "ERROR_PRONE", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "E501", "text": "Too long line (187 symbols). Try to split it into smaller lines. It will make your code easy to understand.", "line": "As mentioned in the lecture, the **set cover problem** is an NP-complete problem. In this task, you will solve this question using both exhausive search (brute force) and greedy apporach.", "line_number": 9, "column_number": 121, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E501", "text": "Too long line (140 symbols). Try to split it into smaller lines. It will make your code easy to understand.", "line": "Given a `list` of `sets` where each `set` contains integers, please find the minimum number of sets that cover the integers from `1` to `10`", "line_number": 13, "column_number": 121, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "WPS462", "text": "Wrong multiline string usage", "line": "# %%", "line_number": 24, "column_number": 5, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "W0105", "text": "String statement has no effect", "line": "\"\"\"", "line_number": 25, "column_number": 1, "category": "ERROR_PRONE", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "E501", "text": "Too long line (216 symbols). Try to split it into smaller lines. It will make your code easy to understand.", "line": "First, implement the brute force approach that tests `all` combinations. You can assume there will be a solution. To simplify your code a bit, you can use the `itertools`. Please read its document and examples below:", "line_number": 28, "column_number": 121, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "W0611", "text": "Unused import itertools", "line": "import itertools", "line_number": 35, "column_number": 1, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "WPS458", "text": "Found imports collision: itertools", "line": "from itertools import combinations", "line_number": 36, "column_number": 1, "category": "ERROR_PRONE", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "WPS231", "text": "Found function with too much cognitive complexity: 18 > 12", "line": "def brute_force_set(li):", "line_number": 38, "column_number": 1, "category": "COMPLEXITY", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "E231", "text": "missing whitespace after ','", "line": "for i in range(1,len(li)+1):", "line_number": 43, "column_number": 21, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E226", "text": "missing whitespace around arithmetic operator", "line": "for i in range(1,len(li)+1):", "line_number": 43, "column_number": 29, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E231", "text": "missing whitespace after ','", "line": "for n in combinations(li,i):", "line_number": 44, "column_number": 33, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E226", "text": "missing whitespace around arithmetic operator", "line": "for j in range(len(flatten_list)-1):", "line_number": 46, "column_number": 45, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E226", "text": "missing whitespace around arithmetic operator", "line": "for k in range(j+1,len(flatten_list)):", "line_number": 47, "column_number": 33, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E231", "text": "missing whitespace after ','", "line": "for k in range(j+1,len(flatten_list)):", "line_number": 47, "column_number": 35, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "WPS220", "text": "Found too deep nesting: 24 > 20", "line": "flatten_list[j],flatten_list[k] = flatten_list[k],flatten_list[j]", "line_number": 49, "column_number": 25, "category": "COMPLEXITY", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "E231", "text": "missing whitespace after ','", "line": "flatten_list[j],flatten_list[k] = flatten_list[k],flatten_list[j]", "line_number": 49, "column_number": 40, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E231", "text": "missing whitespace after ','", "line": "flatten_list[j],flatten_list[k] = flatten_list[k],flatten_list[j]", "line_number": 49, "column_number": 74, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E231", "text": "missing whitespace after ','", "line": "if flatten_list == [1,2,3,4,5,6,7,8,9,10]:", "line_number": 50, "column_number": 34, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E231", "text": "missing whitespace after ','", "line": "if flatten_list == [1,2,3,4,5,6,7,8,9,10]:", "line_number": 50, "column_number": 36, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E231", "text": "missing whitespace after ','", "line": "if flatten_list == [1,2,3,4,5,6,7,8,9,10]:", "line_number": 50, "column_number": 38, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E231", "text": "missing whitespace after ','", "line": "if flatten_list == [1,2,3,4,5,6,7,8,9,10]:", "line_number": 50, "column_number": 40, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E231", "text": "missing whitespace after ','", "line": "if flatten_list == [1,2,3,4,5,6,7,8,9,10]:", "line_number": 50, "column_number": 42, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E231", "text": "missing whitespace after ','", "line": "if flatten_list == [1,2,3,4,5,6,7,8,9,10]:", "line_number": 50, "column_number": 44, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E231", "text": "missing whitespace after ','", "line": "if flatten_list == [1,2,3,4,5,6,7,8,9,10]:", "line_number": 50, "column_number": 46, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E231", "text": "missing whitespace after ','", "line": "if flatten_list == [1,2,3,4,5,6,7,8,9,10]:", "line_number": 50, "column_number": 48, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E231", "text": "missing whitespace after ','", "line": "if flatten_list == [1,2,3,4,5,6,7,8,9,10]:", "line_number": 50, "column_number": 50, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "R504", "text": "you shouldn`t assign value to variable if it will be use only as return value", "line": "return result", "line_number": 52, "column_number": 12, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'list1'", "line": "set_list1 = [ # first test input", "line_number": 58, "column_number": 5, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "set_list1 = [ # first test input", "line_number": 58, "column_number": 14, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "C812", "text": "missing trailing comma", "line": "[2, 4, 6, 8]", "line_number": 63, "column_number": 17, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'list2'", "line": "set_list2 = [ # second test input", "line_number": 66, "column_number": 5, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "set_list2 = [ # second test input", "line_number": 66, "column_number": 14, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "C812", "text": "missing trailing comma", "line": "[1, 8, 9, 10]", "line_number": 73, "column_number": 18, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'list1'", "line": "ss = brute_force_set(set_list1)", "line_number": 76, "column_number": 26, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "print(ss) # ([1, 2, 3], [4, 5, 6], [7, 8, 9, 10])", "line_number": 77, "column_number": 10, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'list2'", "line": "ss = brute_force_set(set_list2)", "line_number": 79, "column_number": 26, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "print(ss) # ([1, 7], [2, 4, 8, 9, 10], [3, 5, 6])", "line_number": 80, "column_number": 10, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "WPS462", "text": "Wrong multiline string usage", "line": "# %%", "line_number": 85, "column_number": 5, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "W0105", "text": "String statement has no effect", "line": "\"\"\"", "line_number": 86, "column_number": 1, "category": "ERROR_PRONE", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "E501", "text": "Too long line (178 symbols). Try to split it into smaller lines. It will make your code easy to understand.", "line": "In this exercise, please implement a greedy algorithm that **for each step, takes a set that contains the most uncovered integers** until it covers all integers from `1` to `10`.", "line_number": 91, "column_number": 121, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "W0611", "text": "Unused import copy", "line": "import copy", "line_number": 95, "column_number": 1, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "WPS231", "text": "Found function with too much cognitive complexity: 18 > 12", "line": "def greedy_set(list_sets):", "line_number": 96, "column_number": 1, "category": "COMPLEXITY", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "ans = [] # your answer, should be a list of sets", "line_number": 98, "column_number": 13, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'kk'", "line": "kk = 0", "line_number": 101, "column_number": 5, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'list1'", "line": "list1 = []", "line_number": 111, "column_number": 9, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "W0612", "text": "Unused variable 'answer_list'", "line": "answer_list = []", "line_number": 112, "column_number": 9, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'list1'", "line": "list1.append(len(n)-covered[str(n)])", "line_number": 114, "column_number": 13, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E226", "text": "missing whitespace around arithmetic operator", "line": "list1.append(len(n)-covered[str(n)])", "line_number": 114, "column_number": 32, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E265", "text": "block comment should start with '# '", "line": "#check", "line_number": 116, "column_number": 9, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E265", "text": "block comment should start with '# '", "line": "#search", "line_number": 118, "column_number": 13, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'list1'", "line": "answer = sets[list1[max(list1)]]", "line_number": 119, "column_number": 23, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'list1'", "line": "answer = sets[list1[max(list1)]]", "line_number": 119, "column_number": 33, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'list1'", "line": "list1[position] = c", "line_number": 128, "column_number": 9, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "W0101", "text": "Unreachable code", "line": "kk += 1", "line_number": 135, "column_number": 9, "category": "ERROR_PRONE", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'kk'", "line": "kk += 1", "line_number": 135, "column_number": 9, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'kk'", "line": "if kk > 10:", "line_number": 136, "column_number": 12, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'list1'", "line": "set_list1 = [ # first test input", "line_number": 142, "column_number": 5, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "set_list1 = [ # first test input", "line_number": 142, "column_number": 14, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "C812", "text": "missing trailing comma", "line": "[2, 4, 6, 8]", "line_number": 147, "column_number": 17, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'list2'", "line": "set_list2 = [ # second test input", "line_number": 150, "column_number": 5, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "set_list2 = [ # second test input", "line_number": 150, "column_number": 14, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "C812", "text": "missing trailing comma", "line": "[1, 8, 9, 10]", "line_number": 157, "column_number": 18, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'list1'", "line": "s = greedy_set(set_list1)", "line_number": 160, "column_number": 20, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "print(s) # [[7, 8, 9, 10], [1, 2, 3], [4, 5, 6]]", "line_number": 161, "column_number": 9, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'list2'", "line": "s = greedy_set(set_list2)", "line_number": 163, "column_number": 20, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "print(s) # [[2, 4, 8, 9, 10], [3, 5, 6], [1, 7]]", "line_number": 164, "column_number": 9, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "WPS462", "text": "Wrong multiline string usage", "line": "# %%", "line_number": 166, "column_number": 5, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "W0105", "text": "String statement has no effect", "line": "\"\"\"", "line_number": 167, "column_number": 1, "category": "ERROR_PRONE", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "E501", "text": "Too long line (214 symbols). Try to split it into smaller lines. It will make your code easy to understand.", "line": "It\u2019s Boxing Day and you are in a shopping contest! You have one shopping bag and you would like to fill your bags with items that have the largest sum of values. Please solve this problem using dynamic programming.", "line_number": 170, "column_number": 121, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'bag1'", "line": "bag1 = 4 # the maximum weight for the bag", "line_number": 174, "column_number": 1, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "bag1 = 4 # the maximum weight for the bag", "line_number": 174, "column_number": 9, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'list1'", "line": "item_list1 = [", "line_number": 175, "column_number": 6, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "C812", "text": "missing trailing comma", "line": "['laptop', 3, 2000]", "line_number": 178, "column_number": 24, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'bag2'", "line": "bag2 = 7 # the maximum weight for the bag", "line_number": 181, "column_number": 1, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "bag2 = 7 # the maximum weight for the bag", "line_number": 181, "column_number": 9, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'list2'", "line": "item_list2 = [", "line_number": 182, "column_number": 6, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E225", "text": "missing whitespace around operator", "line": "grid = [[0]* (num_col+1) for _ in range(num_row)] # initialise the grid", "line_number": 195, "column_number": 16, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E226", "text": "missing whitespace around arithmetic operator", "line": "grid = [[0]* (num_col+1) for _ in range(num_row)] # initialise the grid", "line_number": 195, "column_number": 26, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "grid = [[0]* (num_col+1) for _ in range(num_row)] # initialise the grid", "line_number": 195, "column_number": 54, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "W0612", "text": "Unused variable 'prev_max'", "line": "prev_max = 0", "line_number": 196, "column_number": 5, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "C0200", "text": "Consider using enumerate instead of iterating with range and len", "line": "for i in range(0,len(items)):", "line_number": 201, "column_number": 5, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "E231", "text": "missing whitespace after ','", "line": "for i in range(0,len(items)):", "line_number": 201, "column_number": 21, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E231", "text": "missing whitespace after ','", "line": "for j in range(1,bag_size+1):", "line_number": 202, "column_number": 25, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E226", "text": "missing whitespace around arithmetic operator", "line": "for j in range(1,bag_size+1):", "line_number": 202, "column_number": 34, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E226", "text": "missing whitespace around arithmetic operator", "line": "grid[i][j] = max(grid[i-1][j],grid[i-1][j-items[i][1]]+items[i][2])", "line_number": 204, "column_number": 40, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E231", "text": "missing whitespace after ','", "line": "grid[i][j] = max(grid[i-1][j],grid[i-1][j-items[i][1]]+items[i][2])", "line_number": 204, "column_number": 46, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E226", "text": "missing whitespace around arithmetic operator", "line": "grid[i][j] = max(grid[i-1][j],grid[i-1][j-items[i][1]]+items[i][2])", "line_number": 204, "column_number": 53, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E226", "text": "missing whitespace around arithmetic operator", "line": "grid[i][j] = max(grid[i-1][j],grid[i-1][j-items[i][1]]+items[i][2])", "line_number": 204, "column_number": 58, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E226", "text": "missing whitespace around arithmetic operator", "line": "grid[i][j] = max(grid[i-1][j],grid[i-1][j-items[i][1]]+items[i][2])", "line_number": 204, "column_number": 71, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E226", "text": "missing whitespace around arithmetic operator", "line": "grid[i][j] = grid[i-1][j]", "line_number": 206, "column_number": 36, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "W0621", "text": "Redefining name 's' from outer scope (line 160)", "line": "s = ' '", "line_number": 211, "column_number": 9, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "WPS519", "text": "Found implicit `sum()` call", "line": "for c in r:", "line_number": 212, "column_number": 9, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "WPS237", "text": "Found a too complex `f` string", "line": "s += f'{c:4} '", "line_number": 213, "column_number": 18, "category": "COMPLEXITY", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "WPS336", "text": "Found explicit string concatenation", "line": "s += f'{c:4} '", "line_number": 213, "column_number": 18, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'bag1'", "line": "g = knapsack_dp(bag1, item_list1)", "line_number": 216, "column_number": 17, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'list1'", "line": "g = knapsack_dp(bag1, item_list1)", "line_number": 216, "column_number": 28, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'bag2'", "line": "g = knapsack_dp(bag2, item_list2)", "line_number": 219, "column_number": 17, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'list2'", "line": "g = knapsack_dp(bag2, item_list2)", "line_number": 219, "column_number": 28, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}]}
