{"quality": {"code": "BAD", "text": "Code quality (beta): BAD"}, "issues": [{"code": "WPS462", "text": "Wrong multiline string usage", "line": "# %%", "line_number": 6, "column_number": 5, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "W0105", "text": "String statement has no effect", "line": "\"\"\"", "line_number": 7, "column_number": 1, "category": "ERROR_PRONE", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "E501", "text": "Too long line (187 symbols). Try to split it into smaller lines. It will make your code easy to understand.", "line": "As mentioned in the lecture, the **set cover problem** is an NP-complete problem. In this task, you will solve this question using both exhausive search (brute force) and greedy apporach.", "line_number": 9, "column_number": 121, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E501", "text": "Too long line (140 symbols). Try to split it into smaller lines. It will make your code easy to understand.", "line": "Given a `list` of `sets` where each `set` contains integers, please find the minimum number of sets that cover the integers from `1` to `10`", "line_number": 13, "column_number": 121, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "WPS462", "text": "Wrong multiline string usage", "line": "# %%", "line_number": 24, "column_number": 5, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "W0105", "text": "String statement has no effect", "line": "\"\"\"", "line_number": 25, "column_number": 1, "category": "ERROR_PRONE", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "E501", "text": "Too long line (216 symbols). Try to split it into smaller lines. It will make your code easy to understand.", "line": "First, implement the brute force approach that tests `all` combinations. You can assume there will be a solution. To simplify your code a bit, you can use the `itertools`. Please read its document and examples below:", "line_number": 28, "column_number": 121, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "R1710", "text": "Either all return statements in a function should return an expression, or none of them should.", "line": "def brute_force_set(li):", "line_number": 37, "column_number": 1, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "E111", "text": "indentation is not a multiple of     ", "line": "for leng in range(len(li)):", "line_number": 41, "column_number": 6, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E117", "text": "over-indented", "line": "for leng in range(len(li)):", "line_number": 41, "column_number": 6, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "R503", "text": "you should add explicit return at end of the function if function have return value except None", "line": "for leng in range(len(li)):", "line_number": 41, "column_number": 6, "category": "ERROR_PRONE", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'leng'", "line": "for leng in range(len(li)):", "line_number": 41, "column_number": 10, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E231", "text": "missing whitespace after ','", "line": "comb = itertools.combinations(li,leng)", "line_number": 42, "column_number": 41, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'leng'", "line": "comb = itertools.combinations(li,leng)", "line_number": 42, "column_number": 42, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E225", "text": "missing whitespace around operator", "line": "union_set=[]", "line_number": 44, "column_number": 22, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "WPS519", "text": "Found implicit `sum()` call", "line": "for end in p:", "line_number": 45, "column_number": 13, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "C405", "text": "Unnecessary list literal - rewrite as a set literal.", "line": "if set([1,2,3,4,5,6,7,8,9,10]).issubset(set(union_set)):", "line_number": 47, "column_number": 16, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "E231", "text": "missing whitespace after ','", "line": "if set([1,2,3,4,5,6,7,8,9,10]).issubset(set(union_set)):", "line_number": 47, "column_number": 22, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E231", "text": "missing whitespace after ','", "line": "if set([1,2,3,4,5,6,7,8,9,10]).issubset(set(union_set)):", "line_number": 47, "column_number": 24, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E231", "text": "missing whitespace after ','", "line": "if set([1,2,3,4,5,6,7,8,9,10]).issubset(set(union_set)):", "line_number": 47, "column_number": 26, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E231", "text": "missing whitespace after ','", "line": "if set([1,2,3,4,5,6,7,8,9,10]).issubset(set(union_set)):", "line_number": 47, "column_number": 28, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E231", "text": "missing whitespace after ','", "line": "if set([1,2,3,4,5,6,7,8,9,10]).issubset(set(union_set)):", "line_number": 47, "column_number": 30, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E231", "text": "missing whitespace after ','", "line": "if set([1,2,3,4,5,6,7,8,9,10]).issubset(set(union_set)):", "line_number": 47, "column_number": 32, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E231", "text": "missing whitespace after ','", "line": "if set([1,2,3,4,5,6,7,8,9,10]).issubset(set(union_set)):", "line_number": 47, "column_number": 34, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E231", "text": "missing whitespace after ','", "line": "if set([1,2,3,4,5,6,7,8,9,10]).issubset(set(union_set)):", "line_number": 47, "column_number": 36, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E231", "text": "missing whitespace after ','", "line": "if set([1,2,3,4,5,6,7,8,9,10]).issubset(set(union_set)):", "line_number": 47, "column_number": 38, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'list1'", "line": "set_list1 = [ # first test input", "line_number": 54, "column_number": 5, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "set_list1 = [ # first test input", "line_number": 54, "column_number": 14, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "C812", "text": "missing trailing comma", "line": "[2, 4, 6, 8]", "line_number": 59, "column_number": 17, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'list2'", "line": "set_list2 = [ # second test input", "line_number": 62, "column_number": 5, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "set_list2 = [ # second test input", "line_number": 62, "column_number": 14, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "C812", "text": "missing trailing comma", "line": "[1, 8, 9, 10]", "line_number": 69, "column_number": 18, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'list1'", "line": "ss = brute_force_set(set_list1)", "line_number": 72, "column_number": 26, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "print(ss) # ([1, 2, 3], [4, 5, 6], [7, 8, 9, 10])", "line_number": 73, "column_number": 10, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'list2'", "line": "ss = brute_force_set(set_list2)", "line_number": 75, "column_number": 26, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "print(ss) # ([1, 7], [2, 4, 8, 9, 10], [3, 5, 6])", "line_number": 76, "column_number": 10, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "WPS462", "text": "Wrong multiline string usage", "line": "# %%", "line_number": 78, "column_number": 5, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "W0105", "text": "String statement has no effect", "line": "\"\"\"", "line_number": 79, "column_number": 1, "category": "ERROR_PRONE", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "E501", "text": "Too long line (178 symbols). Try to split it into smaller lines. It will make your code easy to understand.", "line": "In this exercise, please implement a greedy algorithm that **for each step, takes a set that contains the most uncovered integers** until it covers all integers from `1` to `10`.", "line_number": 84, "column_number": 121, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "W0611", "text": "Unused import copy", "line": "import copy", "line_number": 88, "column_number": 1, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "W0612", "text": "Unused variable 'sets'", "line": "sets = list_sets.copy()", "line_number": 91, "column_number": 5, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "W0612", "text": "Unused variable 'ans'", "line": "ans = [] # your answer, should be a list of sets", "line_number": 92, "column_number": 5, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "ans = [] # your answer, should be a list of sets", "line_number": 92, "column_number": 13, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "W0612", "text": "Unused variable 'covered'", "line": "covered = {}", "line_number": 93, "column_number": 5, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'kk'", "line": "kk = 0", "line_number": 95, "column_number": 5, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "W0612", "text": "Unused variable 'c'", "line": "c=0", "line_number": 96, "column_number": 5, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "E225", "text": "missing whitespace around operator", "line": "c=0", "line_number": 96, "column_number": 6, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'kk'", "line": "kk += 1", "line_number": 109, "column_number": 9, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'kk'", "line": "if kk > 10:", "line_number": 110, "column_number": 12, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'list1'", "line": "set_list1 = [ # first test input", "line_number": 116, "column_number": 5, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "set_list1 = [ # first test input", "line_number": 116, "column_number": 14, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "C812", "text": "missing trailing comma", "line": "[2, 4, 6, 8]", "line_number": 121, "column_number": 17, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'list2'", "line": "set_list2 = [ # second test input", "line_number": 124, "column_number": 5, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "set_list2 = [ # second test input", "line_number": 124, "column_number": 14, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "C812", "text": "missing trailing comma", "line": "[1, 8, 9, 10]", "line_number": 131, "column_number": 18, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E1111", "text": "Assigning result of a function call, where the function has no return", "line": "s = greedy_set(set_list1)", "line_number": 134, "column_number": 1, "category": "ERROR_PRONE", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'list1'", "line": "s = greedy_set(set_list1)", "line_number": 134, "column_number": 20, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "print(s) # [[7, 8, 9, 10], [1, 2, 3], [4, 5, 6]]", "line_number": 135, "column_number": 9, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E1111", "text": "Assigning result of a function call, where the function has no return", "line": "s = greedy_set(set_list2)", "line_number": 137, "column_number": 1, "category": "ERROR_PRONE", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'list2'", "line": "s = greedy_set(set_list2)", "line_number": 137, "column_number": 20, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "print(s) # [[2, 4, 8, 9, 10], [3, 5, 6], [1, 7]]", "line_number": 138, "column_number": 9, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "WPS462", "text": "Wrong multiline string usage", "line": "# %%", "line_number": 140, "column_number": 5, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "W0105", "text": "String statement has no effect", "line": "\"\"\"", "line_number": 141, "column_number": 1, "category": "ERROR_PRONE", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "E501", "text": "Too long line (214 symbols). Try to split it into smaller lines. It will make your code easy to understand.", "line": "It\u2019s Boxing Day and you are in a shopping contest! You have one shopping bag and you would like to fill your bags with items that have the largest sum of values. Please solve this problem using dynamic programming.", "line_number": 144, "column_number": 121, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'bag1'", "line": "bag1 = 4 # the maximum weight for the bag", "line_number": 148, "column_number": 1, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "bag1 = 4 # the maximum weight for the bag", "line_number": 148, "column_number": 9, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'list1'", "line": "item_list1 = [", "line_number": 149, "column_number": 6, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "C812", "text": "missing trailing comma", "line": "['laptop', 3, 2000]", "line_number": 152, "column_number": 24, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'bag2'", "line": "bag2 = 7 # the maximum weight for the bag", "line_number": 155, "column_number": 1, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "bag2 = 7 # the maximum weight for the bag", "line_number": 155, "column_number": 9, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'list2'", "line": "item_list2 = [", "line_number": 156, "column_number": 6, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E225", "text": "missing whitespace around operator", "line": "grid = [[0]* (num_col+1) for _ in range(num_row)] # initialise the grid", "line_number": 169, "column_number": 16, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E226", "text": "missing whitespace around arithmetic operator", "line": "grid = [[0]* (num_col+1) for _ in range(num_row)] # initialise the grid", "line_number": 169, "column_number": 26, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "grid = [[0]* (num_col+1) for _ in range(num_row)] # initialise the grid", "line_number": 169, "column_number": 54, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E225", "text": "missing whitespace around operator", "line": "if a ==0:", "line_number": 177, "column_number": 20, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E225", "text": "missing whitespace around operator", "line": "prev_max= grid[a - 1] [b]", "line_number": 180, "column_number": 25, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E211", "text": "whitespace before '['", "line": "prev_max= grid[a - 1] [b]", "line_number": 180, "column_number": 38, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E226", "text": "missing whitespace around arithmetic operator", "line": "new_val = items[a][2] + grid[a-1][b - item_w]", "line_number": 182, "column_number": 43, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E225", "text": "missing whitespace around operator", "line": "if b >=item_w:", "line_number": 184, "column_number": 20, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E203", "text": "whitespace before ':'", "line": "else :", "line_number": 186, "column_number": 17, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "W0621", "text": "Redefining name 's' from outer scope (line 134)", "line": "s = ' '", "line_number": 194, "column_number": 9, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "WPS519", "text": "Found implicit `sum()` call", "line": "for c in r:", "line_number": 195, "column_number": 9, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "WPS237", "text": "Found a too complex `f` string", "line": "s += f'{c:4} '", "line_number": 196, "column_number": 18, "category": "COMPLEXITY", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "WPS336", "text": "Found explicit string concatenation", "line": "s += f'{c:4} '", "line_number": 196, "column_number": 18, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'bag1'", "line": "g = knapsack_dp(bag1, item_list1)", "line_number": 199, "column_number": 17, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'list1'", "line": "g = knapsack_dp(bag1, item_list1)", "line_number": 199, "column_number": 28, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'bag2'", "line": "g = knapsack_dp(bag2, item_list2)", "line_number": 202, "column_number": 17, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'list2'", "line": "g = knapsack_dp(bag2, item_list2)", "line_number": 202, "column_number": 28, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}]}
