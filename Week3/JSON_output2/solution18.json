{"quality": {"code": "BAD", "text": "Code quality (beta): BAD"}, "issues": [{"code": "WPS462", "text": "Wrong multiline string usage", "line": "# %%", "line_number": 6, "column_number": 5, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "W0105", "text": "String statement has no effect", "line": "\"\"\"", "line_number": 7, "column_number": 1, "category": "ERROR_PRONE", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "E501", "text": "Too long line (136 symbols). Try to split it into smaller lines. It will make your code easy to understand.", "line": "In this week\u00e2\u20ac\u2122s workshop, you have analysed different types of hash functions. Now, please implement and evaluate these hash functions.", "line_number": 10, "column_number": 121, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E501", "text": "Too long line (169 symbols). Try to split it into smaller lines. It will make your code easy to understand.", "line": "Please implement the following hash functions where `val` is the input and `n` is the size of the hash table. You can assume that the `val`  will be a lower-case string.", "line_number": 12, "column_number": 121, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E501", "text": "Too long line (385 symbols). Try to split it into smaller lines. It will make your code easy to understand.", "line": "1. `hash4(val, n)` : Map every letter to a prime number, e.g. a = 1, b = 2, c = 3, d = 5\u00e2\u20ac\u00a6. For a string, the hash function is the sum of all the corresponding numbers modulo the size of the hash. For example, if the hash table is 10, and the string is \u00e2\u20ac\u02dcbad\u00e2\u20ac\u2122, the index is `(3+2+7)%10 = 2`. Note that you should ignore the characters that is not in the prime number mapping below.", "line_number": 16, "column_number": 121, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "W0613", "text": "Unused argument 'val'", "line": "def hash1(val, n):", "line_number": 20, "column_number": 11, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "W0613", "text": "Unused argument 'n'", "line": "def hash1(val, n):", "line_number": 20, "column_number": 16, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'hash1'", "line": "def hash1(val, n):", "line_number": 20, "column_number": 5, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "W0613", "text": "Unused argument 'n'", "line": "def hash2(val, n):", "line_number": 23, "column_number": 16, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'hash2'", "line": "def hash2(val, n):", "line_number": 23, "column_number": 5, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "W0613", "text": "Unused argument 'val'", "line": "def hash3(val, n):", "line_number": 26, "column_number": 11, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "W0613", "text": "Unused argument 'n'", "line": "def hash3(val, n):", "line_number": 26, "column_number": 16, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'hash3'", "line": "def hash3(val, n):", "line_number": 26, "column_number": 5, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "W0621", "text": "Redefining name 'd' from outer scope (line 102)", "line": "d = {'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': 7, 'i': 8, 'j': 9, 'k': 10, 'l': 11, 'm': 12, 'n': 13, 'o': 14, 'p': 15, 'q': 16, 'r': 17, 's': 18, 't': 19, 'u': 20, 'v': 21, 'w': 22, 'x': 23, 'y': 24, 'z': 25}", "line_number": 27, "column_number": 5, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "W0612", "text": "Unused variable 'd'", "line": "d = {'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': 7, 'i': 8, 'j': 9, 'k': 10, 'l': 11, 'm': 12, 'n': 13, 'o': 14, 'p': 15, 'q': 16, 'r': 17, 's': 18, 't': 19, 'u': 20, 'v': 21, 'w': 22, 'x': 23, 'y': 24, 'z': 25}", "line_number": 27, "column_number": 5, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "E501", "text": "Too long line (232 symbols). Try to split it into smaller lines. It will make your code easy to understand.", "line": "d = {'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': 7, 'i': 8, 'j': 9, 'k': 10, 'l': 11, 'm': 12, 'n': 13, 'o': 14, 'p': 15, 'q': 16, 'r': 17, 's': 18, 't': 19, 'u': 20, 'v': 21, 'w': 22, 'x': 23, 'y': 24, 'z': 25}", "line_number": 27, "column_number": 121, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'hash4'", "line": "def hash4(val, n):", "line_number": 30, "column_number": 5, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "W0621", "text": "Redefining name 'd' from outer scope (line 102)", "line": "d = {'a': 1, 'b': 2, 'c': 3, 'd': 5, 'e': 7, 'f': 11, 'g': 13, 'h': 17, 'i': 19, 'j': 23, 'k': 29, 'l': 31, 'm': 37, 'n': 41, 'o': 43, 'p': 47, 'q': 53, 'r': 59, 's': 61, 't': 67, 'u': 71, 'v': 73, 'w': 79, 'x': 83, 'y': 89, 'z': 97}", "line_number": 31, "column_number": 5, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "E501", "text": "Too long line (237 symbols). Try to split it into smaller lines. It will make your code easy to understand.", "line": "d = {'a': 1, 'b': 2, 'c': 3, 'd': 5, 'e': 7, 'f': 11, 'g': 13, 'h': 17, 'i': 19, 'j': 23, 'k': 29, 'l': 31, 'm': 37, 'n': 41, 'o': 43, 'p': 47, 'q': 53, 'r': 59, 's': 61, 't': 67, 'u': 71, 'v': 73, 'w': 79, 'x': 83, 'y': 89, 'z': 97}", "line_number": 31, "column_number": 121, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "WPS519", "text": "Found implicit `sum()` call", "line": "for i in val:", "line_number": 33, "column_number": 5, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "E228", "text": "missing whitespace around modulo operator", "line": "return s%n", "line_number": 35, "column_number": 13, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'hash1'", "line": "print(hash1('adelaide', 10)) # 1", "line_number": 38, "column_number": 7, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "print(hash1('adelaide', 10)) # 1", "line_number": 38, "column_number": 29, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'hash2'", "line": "print(hash2('adelaide', 10)) # 8", "line_number": 39, "column_number": 7, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "print(hash2('adelaide', 10)) # 8", "line_number": 39, "column_number": 29, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'hash3'", "line": "print(hash3('adelaide', 10)) # 0", "line_number": 40, "column_number": 7, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "print(hash3('adelaide', 10)) # 0", "line_number": 40, "column_number": 29, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'hash4'", "line": "print(hash4('adelaide', 10)) # 6", "line_number": 41, "column_number": 7, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "print(hash4('adelaide', 10)) # 6", "line_number": 41, "column_number": 29, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "WPS462", "text": "Wrong multiline string usage", "line": "# %%", "line_number": 43, "column_number": 5, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "W0105", "text": "String statement has no effect", "line": "\"\"\"", "line_number": 44, "column_number": 1, "category": "ERROR_PRONE", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "WPS462", "text": "Wrong multiline string usage", "line": "# %%", "line_number": 48, "column_number": 5, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "W0105", "text": "String statement has no effect", "line": "\"\"\"", "line_number": 49, "column_number": 1, "category": "ERROR_PRONE", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "E501", "text": "Too long line (142 symbols). Try to split it into smaller lines. It will make your code easy to understand.", "line": "In this exercise, you will implement your own HashTable class. You will use chaining when collisions happen. The functions to be completed are", "line_number": 50, "column_number": 121, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E501", "text": "Too long line (181 symbols). Try to split it into smaller lines. It will make your code easy to understand.", "line": "- `add_element(self, val)` function inserts an element into the hash table. Your code should first calculate the hash number of the input value `val`, then insert it into the table.", "line_number": 51, "column_number": 121, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E501", "text": "Too long line (168 symbols). Try to split it into smaller lines. It will make your code easy to understand.", "line": "- `search(self, val)` function search for the input value `val` in the hash table. If the value is already inside the table, it should return `True`, otherwise `False`.", "line_number": 52, "column_number": 121, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E501", "text": "Too long line (248 symbols). Try to split it into smaller lines. It will make your code easy to understand.", "line": "The provided test code first reads a list of books from a file `books.txt`, and then constructs a HashTable containing all books. You can think of it as a book management system in a library that keeps track of weather a book is inside the library.", "line_number": 54, "column_number": 121, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "H601", "text": "Lack of cohesion is too high (100%). Cohesion measures the strength of relationship between pieces of functionality within a given module. When lack of cohesion is low, the methods and variables of the class are co-dependent and hang together as a logical whole. However, if the task requires implementing classes without methods, the lack of cohesion always will be high since all variables will be in-dependent. Please, ignore this issue if the task requires implement an empty class (without any methods).", "line": "class HashTable:", "line_number": 58, "column_number": 1, "category": "COMPLEXITY", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "W0311", "text": "Bad indentation. Found 3 spaces, expected 4", "line": "size = 0", "line_number": 59, "column_number": 1, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "W0311", "text": "Bad indentation. Found 3 spaces, expected 4", "line": "table = []", "line_number": 60, "column_number": 1, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "W0311", "text": "Bad indentation. Found 3 spaces, expected 4", "line": "collision = 0", "line_number": 61, "column_number": 1, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E111", "text": "indentation is not a multiple of     ", "line": "def create_table(self,table_size):", "line_number": 63, "column_number": 4, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E231", "text": "missing whitespace after ','", "line": "def create_table(self,table_size):", "line_number": 63, "column_number": 25, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "R0201", "text": "Method could be a function", "line": "def create_table(self,table_size):", "line_number": 63, "column_number": 4, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "W0311", "text": "Bad indentation. Found 7 spaces, expected 8", "line": "global size, table, collision", "line_number": 64, "column_number": 1, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "W0601", "text": "Global variable 'size' undefined at the module level", "line": "global size, table, collision", "line_number": 64, "column_number": 8, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "W0601", "text": "Global variable 'table' undefined at the module level", "line": "global size, table, collision", "line_number": 64, "column_number": 8, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "W0601", "text": "Global variable 'collision' undefined at the module level", "line": "global size, table, collision", "line_number": 64, "column_number": 8, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "W0311", "text": "Bad indentation. Found 7 spaces, expected 8", "line": "size = table_size", "line_number": 65, "column_number": 1, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E111", "text": "indentation is not a multiple of     ", "line": "table = [[] for i in range(table_size)] # allocate an empty 2D list", "line_number": 66, "column_number": 8, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "table = [[] for i in range(table_size)] # allocate an empty 2D list", "line_number": 66, "column_number": 47, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC100", "text": "Possibly misspelt word: '2D'", "line": "table = [[] for i in range(table_size)] # allocate an empty 2D list", "line_number": 66, "column_number": 48, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E111", "text": "indentation is not a multiple of     ", "line": "collision = 0 # number of collision", "line_number": 67, "column_number": 8, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "collision = 0 # number of collision", "line_number": 67, "column_number": 21, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E111", "text": "indentation is not a multiple of     ", "line": "def add_element(self,val):", "line_number": 69, "column_number": 4, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E231", "text": "missing whitespace after ','", "line": "def add_element(self,val):", "line_number": 69, "column_number": 24, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "R0201", "text": "Method could be a function", "line": "def add_element(self,val):", "line_number": 69, "column_number": 4, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "E111", "text": "indentation is not a multiple of     ", "line": "global index,collision", "line_number": 70, "column_number": 8, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E231", "text": "missing whitespace after ','", "line": "global index,collision", "line_number": 70, "column_number": 20, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "W0601", "text": "Global variable 'collision' undefined at the module level", "line": "global index,collision", "line_number": 70, "column_number": 8, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "E114", "text": "indentation is not a multiple of      (comment)", "line": "#'''add an element into the hash table'''", "line_number": 71, "column_number": 8, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E265", "text": "block comment should start with '# '", "line": "#'''add an element into the hash table'''", "line_number": 71, "column_number": 8, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E114", "text": "indentation is not a multiple of      (comment)", "line": "# insert the book name into the hash table, and", "line_number": 72, "column_number": 8, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E114", "text": "indentation is not a multiple of      (comment)", "line": "# if collision happens, increase the value by 1", "line_number": 73, "column_number": 8, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E114", "text": "indentation is not a multiple of      (comment)", "line": "# ~ 4 lines of code", "line_number": 74, "column_number": 8, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E114", "text": "indentation is not a multiple of      (comment)", "line": "# INSERT YOUR CODE BELOW", "line_number": 75, "column_number": 8, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E114", "text": "indentation is not a multiple of      (comment)", "line": "#index=hash4_b(val)", "line_number": 76, "column_number": 8, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E265", "text": "block comment should start with '# '", "line": "#index=hash4_b(val)", "line_number": 76, "column_number": 8, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC100", "text": "Possibly misspelt word: 'hash4'", "line": "#index=hash4_b(val)", "line_number": 76, "column_number": 14, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "W0311", "text": "Bad indentation. Found 7 spaces, expected 8", "line": "first_index = index", "line_number": 77, "column_number": 1, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E0601", "text": "Using variable 'index' before assignment", "line": "first_index = index", "line_number": 77, "column_number": 22, "category": "ERROR_PRONE", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "W0311", "text": "Bad indentation. Found 7 spaces, expected 8", "line": "i = 1", "line_number": 78, "column_number": 1, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E111", "text": "indentation is not a multiple of     ", "line": "if index in  table:", "line_number": 79, "column_number": 8, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E271", "text": "multiple spaces after keyword", "line": "if index in  table:", "line_number": 79, "column_number": 19, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E111", "text": "indentation is not a multiple of     ", "line": "collision+=1", "line_number": 80, "column_number": 11, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E225", "text": "missing whitespace around operator", "line": "collision+=1", "line_number": 80, "column_number": 20, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E111", "text": "indentation is not a multiple of     ", "line": "index = (first_index + i*i) % len(val)", "line_number": 81, "column_number": 11, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E226", "text": "missing whitespace around arithmetic operator", "line": "index = (first_index + i*i) % len(val)", "line_number": 81, "column_number": 35, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "W0311", "text": "Bad indentation. Found 10 spaces, expected 12", "line": "i += 1", "line_number": 82, "column_number": 1, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "W0311", "text": "Bad indentation. Found 7 spaces, expected 8", "line": "else:", "line_number": 83, "column_number": 1, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "W0311", "text": "Bad indentation. Found 10 spaces, expected 12", "line": "table.append(index)", "line_number": 84, "column_number": 1, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E111", "text": "indentation is not a multiple of     ", "line": "def search(self,val):", "line_number": 89, "column_number": 4, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E231", "text": "missing whitespace after ','", "line": "def search(self,val):", "line_number": 89, "column_number": 19, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "R0201", "text": "Method could be a function", "line": "def search(self,val):", "line_number": 89, "column_number": 4, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "E114", "text": "indentation is not a multiple of      (comment)", "line": "#'''search if the val is already in the hash table'''", "line_number": 90, "column_number": 8, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E265", "text": "block comment should start with '# '", "line": "#'''search if the val is already in the hash table'''", "line_number": 90, "column_number": 8, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E114", "text": "indentation is not a multiple of      (comment)", "line": "# ~ 5 lines of code", "line_number": 91, "column_number": 8, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E114", "text": "indentation is not a multiple of      (comment)", "line": "#", "line_number": 92, "column_number": 8, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "WPS464", "text": "Found empty comment", "line": "#", "line_number": 92, "column_number": 8, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "W0311", "text": "Bad indentation. Found 7 spaces, expected 8", "line": "if val in table:", "line_number": 93, "column_number": 1, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "R1703", "text": "The if statement can be replaced with 'return bool(test)'", "line": "if val in table:", "line_number": 93, "column_number": 8, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "W0311", "text": "Bad indentation. Found 10 spaces, expected 12", "line": "return True", "line_number": 94, "column_number": 1, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "W0311", "text": "Bad indentation. Found 7 spaces, expected 8", "line": "else:", "line_number": 95, "column_number": 1, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "W0311", "text": "Bad indentation. Found 10 spaces, expected 12", "line": "return False", "line_number": 96, "column_number": 1, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "WPS503", "text": "Found useless returning `else` statement", "line": "return False", "line_number": 96, "column_number": 11, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "E111", "text": "indentation is not a multiple of     ", "line": "def hash4_b(self,val):", "line_number": 100, "column_number": 4, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E231", "text": "missing whitespace after ','", "line": "def hash4_b(self,val):", "line_number": 100, "column_number": 20, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "R0201", "text": "Method could be a function", "line": "def hash4_b(self,val):", "line_number": 100, "column_number": 4, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'hash4'", "line": "def hash4_b(self,val):", "line_number": 100, "column_number": 8, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "W0311", "text": "Bad indentation. Found 7 spaces, expected 8", "line": "global d", "line_number": 101, "column_number": 1, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "W0601", "text": "Global variable 'd' undefined at the module level", "line": "global d", "line_number": 101, "column_number": 8, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "W0311", "text": "Bad indentation. Found 7 spaces, expected 8", "line": "d = {'a': 1, 'b': 2, 'c': 3, 'd': 5, 'e': 7, 'f': 11, 'g': 13, 'h': 17, 'i': 19, 'j': 23, 'k': 29, 'l': 31, 'm': 37, 'n': 41, 'o': 43, 'p': 47, 'q': 53, 'r': 59, 's': 61, 't': 67, 'u': 71, 'v': 73, 'w': 79, 'x': 83, 'y': 89, 'z': 97}", "line_number": 102, "column_number": 1, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E501", "text": "Too long line (240 symbols). Try to split it into smaller lines. It will make your code easy to understand.", "line": "d = {'a': 1, 'b': 2, 'c': 3, 'd': 5, 'e': 7, 'f': 11, 'g': 13, 'h': 17, 'i': 19, 'j': 23, 'k': 29, 'l': 31, 'm': 37, 'n': 41, 'o': 43, 'p': 47, 'q': 53, 'r': 59, 's': 61, 't': 67, 'u': 71, 'v': 73, 'w': 79, 'x': 83, 'y': 89, 'z': 97}", "line_number": 102, "column_number": 121, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E114", "text": "indentation is not a multiple of      (comment)", "line": "# Copy your hash4 function to here", "line_number": 103, "column_number": 8, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC100", "text": "Possibly misspelt word: 'hash4'", "line": "# Copy your hash4 function to here", "line_number": 103, "column_number": 8, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E114", "text": "indentation is not a multiple of      (comment)", "line": "# Note that you will need to handle exception", "line_number": 104, "column_number": 8, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E114", "text": "indentation is not a multiple of      (comment)", "line": "# i.e if the character does not have a primary mapping, map it to 0", "line_number": 105, "column_number": 8, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E114", "text": "indentation is not a multiple of      (comment)", "line": "# ~8 lines", "line_number": 106, "column_number": 8, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E114", "text": "indentation is not a multiple of      (comment)", "line": "# INSERT YOUR CODE BELOW", "line_number": 107, "column_number": 8, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E111", "text": "indentation is not a multiple of     ", "line": "s=0", "line_number": 108, "column_number": 8, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E225", "text": "missing whitespace around operator", "line": "s=0", "line_number": 108, "column_number": 9, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "W0311", "text": "Bad indentation. Found 7 spaces, expected 8", "line": "for i in val:", "line_number": 110, "column_number": 1, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "W0311", "text": "Bad indentation. Found 10 spaces, expected 12", "line": "if i in d:", "line_number": 111, "column_number": 1, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E111", "text": "indentation is not a multiple of     ", "line": "s+=d[i]", "line_number": 112, "column_number": 14, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E225", "text": "missing whitespace around operator", "line": "s+=d[i]", "line_number": 112, "column_number": 15, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "WPS529", "text": "Found implicit `.get()` dict usage", "line": "s+=d[i]", "line_number": 112, "column_number": 17, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "W0311", "text": "Bad indentation. Found 10 spaces, expected 12", "line": "else:", "line_number": 113, "column_number": 1, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E111", "text": "indentation is not a multiple of     ", "line": "s+=0", "line_number": 114, "column_number": 14, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E225", "text": "missing whitespace around operator", "line": "s+=0", "line_number": 114, "column_number": 15, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E111", "text": "indentation is not a multiple of     ", "line": "return s%len(val)", "line_number": 116, "column_number": 8, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E228", "text": "missing whitespace around modulo operator", "line": "return s%len(val)", "line_number": 116, "column_number": 16, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'hashtable'", "line": "hashtable=HashTable()", "line_number": 119, "column_number": 1, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E225", "text": "missing whitespace around operator", "line": "hashtable=HashTable()", "line_number": 119, "column_number": 10, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E231", "text": "missing whitespace after ','", "line": "with open('books.txt', 'r',encoding=\"UTF-8\") as f:", "line_number": 121, "column_number": 27, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'hashtable'", "line": "hashtable.create_table(10)", "line_number": 122, "column_number": 5, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E225", "text": "missing whitespace around operator", "line": "index=hashtable.hash4_b(line)", "line_number": 125, "column_number": 14, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'hashtable'", "line": "index=hashtable.hash4_b(line)", "line_number": 125, "column_number": 15, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'hash4'", "line": "index=hashtable.hash4_b(line)", "line_number": 125, "column_number": 25, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'hashtable'", "line": "hashtable.add_element(line)", "line_number": 126, "column_number": 9, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "print(f'Number of collision is {collision}') # should be 90", "line_number": 127, "column_number": 45, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'hashtable'", "line": "print(hashtable.search('a clockwork orange'))          # should return True", "line_number": 128, "column_number": 7, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'hashtable'", "line": "print(hashtable.search('1984'))                        # should return True", "line_number": 129, "column_number": 7, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'hashtable'", "line": "print(hashtable.search('game of throne'))              # should return False", "line_number": 130, "column_number": 7, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'hashtable'", "line": "print(hashtable.search('foundation'))                  # should return False", "line_number": 131, "column_number": 7, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "WPS440", "text": "Found block variables overlap: f", "line": "with open('books.txt', 'r',encoding=\"UTF-8\") as f:", "line_number": 133, "column_number": 1, "category": "ERROR_PRONE", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "E231", "text": "missing whitespace after ','", "line": "with open('books.txt', 'r',encoding=\"UTF-8\") as f:", "line_number": 133, "column_number": 27, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'hashtable'", "line": "hashtable.create_table(100)", "line_number": 134, "column_number": 5, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "WPS440", "text": "Found block variables overlap: line", "line": "for line in f:", "line_number": 135, "column_number": 5, "category": "ERROR_PRONE", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "E225", "text": "missing whitespace around operator", "line": "index=hashtable.hash4_b(line)", "line_number": 137, "column_number": 14, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'hashtable'", "line": "index=hashtable.hash4_b(line)", "line_number": 137, "column_number": 15, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'hash4'", "line": "index=hashtable.hash4_b(line)", "line_number": 137, "column_number": 25, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'hashtable'", "line": "hashtable.add_element(line)", "line_number": 138, "column_number": 9, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "print(f'Number of collision is {collision}') # should be 34", "line_number": 140, "column_number": 45, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "WPS462", "text": "Wrong multiline string usage", "line": "# %%", "line_number": 142, "column_number": 5, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "W0105", "text": "String statement has no effect", "line": "\"\"\"", "line_number": 143, "column_number": 1, "category": "ERROR_PRONE", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "E501", "text": "Too long line (137 symbols). Try to split it into smaller lines. It will make your code easy to understand.", "line": "Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.", "line_number": 146, "column_number": 121, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'dup'", "line": "def check_dup(li):", "line_number": 165, "column_number": 11, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "C0200", "text": "Consider using enumerate instead of iterating with range and len", "line": "for i in range(len(li)):", "line_number": 168, "column_number": 5, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "E226", "text": "missing whitespace around arithmetic operator", "line": "if li[i-1] == li[i]:", "line_number": 169, "column_number": 16, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "R504", "text": "you shouldn`t assign value to variable if it will be use only as return value", "line": "return judge", "line_number": 172, "column_number": 12, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'dup'", "line": "b = check_dup([1, 3, 1, 2])", "line_number": 177, "column_number": 11, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "print(b) # True", "line_number": 178, "column_number": 9, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'dup'", "line": "b = check_dup([1, 2, 3, 4])", "line_number": 179, "column_number": 11, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "print(b) # False", "line_number": 180, "column_number": 9, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'dup'", "line": "b = check_dup([1,1,1,3,3,4,3,2,4,2])", "line_number": 181, "column_number": 11, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E231", "text": "missing whitespace after ','", "line": "b = check_dup([1,1,1,3,3,4,3,2,4,2])", "line_number": 181, "column_number": 17, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E231", "text": "missing whitespace after ','", "line": "b = check_dup([1,1,1,3,3,4,3,2,4,2])", "line_number": 181, "column_number": 19, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E231", "text": "missing whitespace after ','", "line": "b = check_dup([1,1,1,3,3,4,3,2,4,2])", "line_number": 181, "column_number": 21, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E231", "text": "missing whitespace after ','", "line": "b = check_dup([1,1,1,3,3,4,3,2,4,2])", "line_number": 181, "column_number": 23, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E231", "text": "missing whitespace after ','", "line": "b = check_dup([1,1,1,3,3,4,3,2,4,2])", "line_number": 181, "column_number": 25, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E231", "text": "missing whitespace after ','", "line": "b = check_dup([1,1,1,3,3,4,3,2,4,2])", "line_number": 181, "column_number": 27, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E231", "text": "missing whitespace after ','", "line": "b = check_dup([1,1,1,3,3,4,3,2,4,2])", "line_number": 181, "column_number": 29, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E231", "text": "missing whitespace after ','", "line": "b = check_dup([1,1,1,3,3,4,3,2,4,2])", "line_number": 181, "column_number": 31, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E231", "text": "missing whitespace after ','", "line": "b = check_dup([1,1,1,3,3,4,3,2,4,2])", "line_number": 181, "column_number": 33, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "print(b) # True", "line_number": 182, "column_number": 9, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "WPS462", "text": "Wrong multiline string usage", "line": "# %%", "line_number": 184, "column_number": 5, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "W0105", "text": "String statement has no effect", "line": "\"\"\"", "line_number": 185, "column_number": 1, "category": "ERROR_PRONE", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "WPS462", "text": "Wrong multiline string usage", "line": "# %%", "line_number": 189, "column_number": 5, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "W0105", "text": "String statement has no effect", "line": "\"\"\"", "line_number": 190, "column_number": 1, "category": "ERROR_PRONE", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "E501", "text": "Too long line (129 symbols). Try to split it into smaller lines. It will make your code easy to understand.", "line": "Given an array of **integers** nums and an **integer** target, return indices of the two numbers such that they add up to target.", "line_number": 191, "column_number": 121, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E501", "text": "Too long line (151 symbols). Try to split it into smaller lines. It will make your code easy to understand.", "line": "You may assume that each input would have **exactly one solution**, and you may not use the same element twice. You can return the answer in any order.", "line_number": 193, "column_number": 121, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E501", "text": "Too long line (214 symbols). Try to split it into smaller lines. It will make your code easy to understand.", "line": "**Note:** the most intuitive solution is $O(n^2)$ that checks every pair of the numbers. However, you can use hash table to solve the question in linear time! You will get full mark by using either of the approach.", "line_number": 195, "column_number": 121, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "R1710", "text": "Either all return statements in a function should return an expression, or none of them should.", "line": "def two_sum(li, target):", "line_number": 216, "column_number": 1, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "W0621", "text": "Redefining name 'd' from outer scope (line 102)", "line": "d = {}", "line_number": 217, "column_number": 5, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "R503", "text": "you should add explicit return at end of the function if function have return value except None", "line": "for i, num in enumerate(li):", "line_number": 218, "column_number": 5, "category": "ERROR_PRONE", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "WPS432", "text": "Found a magic number: 22. The use of unnamed magic numbers in code hides the developers' intent in choosing that number, increases opportunities for subtle errors and makes it more difficult for the program to be adapted and extended in the future. However, for small programs it can be allowed, but it is better to use constants instead of magic numbers.", "line": "ans = two_sum([2, 7, 11, 15], 22)", "line_number": 225, "column_number": 31, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "print(ans) #(3, 1)", "line_number": 226, "column_number": 11, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E262", "text": "inline comment should start with '# '", "line": "print(ans) #(3, 1)", "line_number": 226, "column_number": 12, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "WPS432", "text": "Found a magic number: 18. The use of unnamed magic numbers in code hides the developers' intent in choosing that number, increases opportunities for subtle errors and makes it more difficult for the program to be adapted and extended in the future. However, for small programs it can be allowed, but it is better to use constants instead of magic numbers.", "line": "ans = two_sum([2, 7, 11, 15], 18)", "line_number": 227, "column_number": 31, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "print(ans) #(2, 1)", "line_number": 228, "column_number": 11, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E262", "text": "inline comment should start with '# '", "line": "print(ans) #(2, 1)", "line_number": 228, "column_number": 12, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "print(ans) #None", "line_number": 230, "column_number": 11, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E262", "text": "inline comment should start with '# '", "line": "print(ans) #None", "line_number": 230, "column_number": 12, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}]}
