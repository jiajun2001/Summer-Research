{"quality": {"code": "BAD", "text": "Code quality (beta): BAD"}, "issues": [{"code": "WPS462", "text": "Wrong multiline string usage", "line": "# %%", "line_number": 6, "column_number": 5, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "W0105", "text": "String statement has no effect", "line": "\"\"\"", "line_number": 7, "column_number": 1, "category": "ERROR_PRONE", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "E501", "text": "Too long line (187 symbols). Try to split it into smaller lines. It will make your code easy to understand.", "line": "As mentioned in the lecture, the **set cover problem** is an NP-complete problem. In this task, you will solve this question using both exhausive search (brute force) and greedy apporach.", "line_number": 9, "column_number": 121, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E501", "text": "Too long line (140 symbols). Try to split it into smaller lines. It will make your code easy to understand.", "line": "Given a `list` of `sets` where each `set` contains integers, please find the minimum number of sets that cover the integers from `1` to `10`", "line_number": 13, "column_number": 121, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "WPS462", "text": "Wrong multiline string usage", "line": "# %%", "line_number": 24, "column_number": 5, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "W0105", "text": "String statement has no effect", "line": "\"\"\"", "line_number": 25, "column_number": 1, "category": "ERROR_PRONE", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "E501", "text": "Too long line (216 symbols). Try to split it into smaller lines. It will make your code easy to understand.", "line": "First, implement the brute force approach that tests `all` combinations. You can assume there will be a solution. To simplify your code a bit, you can use the `itertools`. Please read its document and examples below:", "line_number": 28, "column_number": 121, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "WPS231", "text": "Found function with too much cognitive complexity: 17 > 12", "line": "def brute_force_set(li):", "line_number": 38, "column_number": 1, "category": "COMPLEXITY", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "R503", "text": "you should add explicit return at end of the function if function have return value except None", "line": "for i in range(1, len(li)):", "line_number": 42, "column_number": 5, "category": "ERROR_PRONE", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "WPS519", "text": "Found implicit `sum()` call", "line": "for c in combination:", "line_number": 46, "column_number": 13, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "WPS503", "text": "Found useless returning `else` statement", "line": "for n in range(1, 11):", "line_number": 48, "column_number": 13, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "WPS432", "text": "Found a magic number: 11. The use of unnamed magic numbers in code hides the developers' intent in choosing that number, increases opportunities for subtle errors and makes it more difficult for the program to be adapted and extended in the future. However, for small programs it can be allowed, but it is better to use constants instead of magic numbers.", "line": "for n in range(1, 11):", "line_number": 48, "column_number": 31, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'list1'", "line": "set_list1 = [  # first test input", "line_number": 58, "column_number": 5, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "C812", "text": "missing trailing comma", "line": "[2, 4, 6, 8]", "line_number": 63, "column_number": 17, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'list2'", "line": "set_list2 = [  # second test input", "line_number": 66, "column_number": 5, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "C812", "text": "missing trailing comma", "line": "[1, 8, 9, 10]", "line_number": 73, "column_number": 18, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'list1'", "line": "ss = brute_force_set(set_list1)", "line_number": 76, "column_number": 26, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'list2'", "line": "ss = brute_force_set(set_list2)", "line_number": 79, "column_number": 26, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "WPS462", "text": "Wrong multiline string usage", "line": "# %%", "line_number": 82, "column_number": 5, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "W0105", "text": "String statement has no effect", "line": "\"\"\"", "line_number": 83, "column_number": 1, "category": "ERROR_PRONE", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "E501", "text": "Too long line (178 symbols). Try to split it into smaller lines. It will make your code easy to understand.", "line": "In this exercise, please implement a greedy algorithm that **for each step, takes a set that contains the most uncovered integers** until it covers all integers from `1` to `10`.", "line_number": 88, "column_number": 121, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "W0611", "text": "Unused import copy", "line": "import copy", "line_number": 92, "column_number": 1, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "C901", "text": "Cyclomatic complexity is too high (10). You can figure out how to simplify this code or split it into a set of small functions / methods. It will make your code easy to understand and less error prone.", "line": "def greedy_set(list_sets):", "line_number": 95, "column_number": 1, "category": "COMPLEXITY", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "WPS231", "text": "Found function with too much cognitive complexity: 27 > 12", "line": "def greedy_set(list_sets):", "line_number": 95, "column_number": 1, "category": "COMPLEXITY", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "W0612", "text": "Unused variable 'covered'", "line": "covered = {}", "line_number": 98, "column_number": 5, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'kk'", "line": "kk = 0", "line_number": 100, "column_number": 5, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "WPS519", "text": "Found implicit `sum()` call", "line": "for ans_item in ans:", "line_number": 108, "column_number": 9, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "WPS503", "text": "Found useless returning `else` statement", "line": "for i in range(1, 11):", "line_number": 125, "column_number": 9, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "WPS432", "text": "Found a magic number: 11. The use of unnamed magic numbers in code hides the developers' intent in choosing that number, increases opportunities for subtle errors and makes it more difficult for the program to be adapted and extended in the future. However, for small programs it can be allowed, but it is better to use constants instead of magic numbers.", "line": "for i in range(1, 11):", "line_number": 125, "column_number": 27, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'kk'", "line": "kk += 1", "line_number": 131, "column_number": 9, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'kk'", "line": "if kk > 10:", "line_number": 132, "column_number": 12, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'list1'", "line": "set_list1 = [  # first test input", "line_number": 139, "column_number": 5, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "C812", "text": "missing trailing comma", "line": "[2, 4, 6, 8]", "line_number": 144, "column_number": 17, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'list2'", "line": "set_list2 = [  # second test input", "line_number": 147, "column_number": 5, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "C812", "text": "missing trailing comma", "line": "[1, 8, 9, 10]", "line_number": 154, "column_number": 18, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'list1'", "line": "s = greedy_set(set_list1)", "line_number": 157, "column_number": 20, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'list2'", "line": "s = greedy_set(set_list2)", "line_number": 160, "column_number": 20, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "WPS462", "text": "Wrong multiline string usage", "line": "# %%", "line_number": 163, "column_number": 5, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "W0105", "text": "String statement has no effect", "line": "\"\"\"", "line_number": 164, "column_number": 1, "category": "ERROR_PRONE", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "E501", "text": "Too long line (214 symbols). Try to split it into smaller lines. It will make your code easy to understand.", "line": "It\u2019s Boxing Day and you are in a shopping contest! You have one shopping bag and you would like to fill your bags with items that have the largest sum of values. Please solve this problem using dynamic programming.", "line_number": 167, "column_number": 121, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'bag1'", "line": "bag1 = 4  # the maximum weight for the bag", "line_number": 171, "column_number": 1, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'list1'", "line": "item_list1 = [", "line_number": 172, "column_number": 6, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "C812", "text": "missing trailing comma", "line": "['laptop', 3, 2000]", "line_number": 175, "column_number": 24, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'bag2'", "line": "bag2 = 7  # the maximum weight for the bag", "line_number": 178, "column_number": 1, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'list2'", "line": "item_list2 = [", "line_number": 179, "column_number": 6, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "W0612", "text": "Unused variable 'prev_max'", "line": "prev_max = 0", "line_number": 194, "column_number": 5, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "W0621", "text": "Redefining name 's' from outer scope (line 157)", "line": "s = ' '", "line_number": 216, "column_number": 9, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "WPS519", "text": "Found implicit `sum()` call", "line": "for c in r:", "line_number": 217, "column_number": 9, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "WPS237", "text": "Found a too complex `f` string", "line": "s += f'{c:4} '", "line_number": 218, "column_number": 18, "category": "COMPLEXITY", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "WPS336", "text": "Found explicit string concatenation", "line": "s += f'{c:4} '", "line_number": 218, "column_number": 18, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'bag1'", "line": "g = knapsack_dp(bag1, item_list1)", "line_number": 222, "column_number": 17, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'list1'", "line": "g = knapsack_dp(bag1, item_list1)", "line_number": 222, "column_number": 28, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'bag2'", "line": "g = knapsack_dp(bag2, item_list2)", "line_number": 225, "column_number": 17, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'list2'", "line": "g = knapsack_dp(bag2, item_list2)", "line_number": 225, "column_number": 28, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}]}
