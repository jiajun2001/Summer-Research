{"quality": {"code": "BAD", "text": "Code quality (beta): BAD"}, "issues": [{"code": "WPS462", "text": "Wrong multiline string usage", "line": "# %%", "line_number": 6, "column_number": 5, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "WPS428", "text": "Found statement that has no effect", "line": "\"\"\"", "line_number": 7, "column_number": 1, "category": "ERROR_PRONE", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "E501", "text": "Too long line (187 symbols). Try to split it into smaller lines. It will make your code easy to understand.", "line": "As mentioned in the lecture, the **set cover problem** is an NP-complete problem. In this task, you will solve this question using both exhausive search (brute force) and greedy apporach.", "line_number": 9, "column_number": 121, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E501", "text": "Too long line (140 symbols). Try to split it into smaller lines. It will make your code easy to understand.", "line": "Given a `list` of `sets` where each `set` contains integers, please find the minimum number of sets that cover the integers from `1` to `10`", "line_number": 13, "column_number": 121, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "WPS462", "text": "Wrong multiline string usage", "line": "# %%", "line_number": 24, "column_number": 5, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "WPS428", "text": "Found statement that has no effect", "line": "\"\"\"", "line_number": 25, "column_number": 1, "category": "ERROR_PRONE", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "E501", "text": "Too long line (216 symbols). Try to split it into smaller lines. It will make your code easy to understand.", "line": "First, implement the brute force approach that tests `all` combinations. You can assume there will be a solution. To simplify your code a bit, you can use the `itertools`. Please read its document and examples below:", "line_number": 28, "column_number": 121, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "R503", "text": "you should add explicit return at end of the function if function have return value except None", "line": "for i in range(len(li)+1): #setting up the ramping up of itertools.combinations()", "line_number": 41, "column_number": 5, "category": "ERROR_PRONE", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "E226", "text": "missing whitespace around arithmetic operator", "line": "for i in range(len(li)+1): #setting up the ramping up of itertools.combinations()", "line_number": 41, "column_number": 27, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "for i in range(len(li)+1): #setting up the ramping up of itertools.combinations()", "line_number": 41, "column_number": 31, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E262", "text": "inline comment should start with '# '", "line": "for i in range(len(li)+1): #setting up the ramping up of itertools.combinations()", "line_number": 41, "column_number": 32, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'cmb'", "line": "for cmb in itertools.combinations(li, i): #look for all the possible combinations", "line_number": 42, "column_number": 13, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "for cmb in itertools.combinations(li, i): #look for all the possible combinations", "line_number": 42, "column_number": 50, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E262", "text": "inline comment should start with '# '", "line": "for cmb in itertools.combinations(li, i): #look for all the possible combinations", "line_number": 42, "column_number": 51, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'cmb'", "line": "flat = tuple(itertools.chain.from_iterable(cmb)) #flatten the tuple", "line_number": 43, "column_number": 56, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "flat = tuple(itertools.chain.from_iterable(cmb)) #flatten the tuple", "line_number": 43, "column_number": 61, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E262", "text": "inline comment should start with '# '", "line": "flat = tuple(itertools.chain.from_iterable(cmb)) #flatten the tuple", "line_number": 43, "column_number": 62, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "if len(flat) == 10: #if the list contain 10 elements", "line_number": 44, "column_number": 32, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E262", "text": "inline comment should start with '# '", "line": "if len(flat) == 10: #if the list contain 10 elements", "line_number": 44, "column_number": 33, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "if len(set(flat)) == len(flat): #check the length of a set() is equal to original len() of the list", "line_number": 45, "column_number": 48, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E262", "text": "inline comment should start with '# '", "line": "if len(set(flat)) == len(flat): #check the length of a set() is equal to original len() of the list", "line_number": 45, "column_number": 49, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'cmb'", "line": "return cmb #equals, we got it", "line_number": 46, "column_number": 28, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "return cmb #equals, we got it", "line_number": 46, "column_number": 31, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E262", "text": "inline comment should start with '# '", "line": "return cmb #equals, we got it", "line_number": 46, "column_number": 32, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'list1'", "line": "set_list1 = [ # first test input", "line_number": 52, "column_number": 5, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "set_list1 = [ # first test input", "line_number": 52, "column_number": 14, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "C812", "text": "missing trailing comma", "line": "[2, 4, 6, 8]", "line_number": 57, "column_number": 17, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'list2'", "line": "set_list2 = [ # second test input", "line_number": 60, "column_number": 5, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "set_list2 = [ # second test input", "line_number": 60, "column_number": 14, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "C812", "text": "missing trailing comma", "line": "[1, 8, 9, 10]", "line_number": 67, "column_number": 18, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'list1'", "line": "ss = brute_force_set(set_list1)", "line_number": 70, "column_number": 26, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "print(ss) # ([1, 2, 3], [4, 5, 6], [7, 8, 9, 10])", "line_number": 71, "column_number": 10, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'list2'", "line": "ss = brute_force_set(set_list2)", "line_number": 73, "column_number": 26, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "print(ss) # ([1, 7], [2, 4, 8, 9, 10], [3, 5, 6])", "line_number": 74, "column_number": 10, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "WPS462", "text": "Wrong multiline string usage", "line": "# %%", "line_number": 77, "column_number": 5, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "WPS428", "text": "Found statement that has no effect", "line": "\"\"\"", "line_number": 78, "column_number": 1, "category": "ERROR_PRONE", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "E501", "text": "Too long line (178 symbols). Try to split it into smaller lines. It will make your code easy to understand.", "line": "In this exercise, please implement a greedy algorithm that **for each step, takes a set that contains the most uncovered integers** until it covers all integers from `1` to `10`.", "line_number": 83, "column_number": 121, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "F401", "text": "'copy' imported but unused", "line": "import copy", "line_number": 87, "column_number": 1, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "WPS231", "text": "Found function with too much cognitive complexity: 20 > 12", "line": "def greedy_set(list_sets):", "line_number": 88, "column_number": 1, "category": "COMPLEXITY", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "ans = [] # your answer, should be a list of sets", "line_number": 90, "column_number": 13, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E265", "text": "block comment should start with '# '", "line": "#to find the list with most items", "line_number": 93, "column_number": 5, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E225", "text": "missing whitespace around operator", "line": "tmp=[]", "line_number": 94, "column_number": 8, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "tmp.append(len(i)) #add the len of each list into tmp list", "line_number": 96, "column_number": 27, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E262", "text": "inline comment should start with '# '", "line": "tmp.append(len(i)) #add the len of each list into tmp list", "line_number": 96, "column_number": 28, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'kk'", "line": "kk = 0", "line_number": 98, "column_number": 5, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "B007", "text": "Loop control variable 'n' not used within the loop body. If this is intended, replace it with an underscore.", "line": "for n in range(len(sets)): #set up for the search", "line_number": 105, "column_number": 13, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "for n in range(len(sets)): #set up for the search", "line_number": 105, "column_number": 35, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E262", "text": "inline comment should start with '# '", "line": "for n in range(len(sets)): #set up for the search", "line_number": 105, "column_number": 36, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "x = tmp.index(max(tmp)) #find the index of list with max items", "line_number": 106, "column_number": 36, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E262", "text": "inline comment should start with '# '", "line": "x = tmp.index(max(tmp)) #find the index of list with max items", "line_number": 106, "column_number": 37, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "in_dict = [k for k in sets[x] if k in covered] #see if the elements of the list is in dictionary", "line_number": 107, "column_number": 59, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E262", "text": "inline comment should start with '# '", "line": "in_dict = [k for k in sets[x] if k in covered] #see if the elements of the list is in dictionary", "line_number": 107, "column_number": 60, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "WPS504", "text": "Found negated condition", "line": "if len(in_dict) != 0: #if there are items in dict already", "line_number": 108, "column_number": 13, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "WPS507", "text": "Found useless `len()` compare", "line": "if len(in_dict) != 0: #if there are items in dict already", "line_number": 108, "column_number": 16, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "if len(in_dict) != 0: #if there are items in dict already", "line_number": 108, "column_number": 34, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E262", "text": "inline comment should start with '# '", "line": "if len(in_dict) != 0: #if there are items in dict already", "line_number": 108, "column_number": 35, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "tmp[x] = 0 #set the location of the list to 0, so it won't be picked again", "line_number": 109, "column_number": 27, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E262", "text": "inline comment should start with '# '", "line": "tmp[x] = 0 #set the location of the list to 0, so it won't be picked again", "line_number": 109, "column_number": 28, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "break #break the for loop, to next iteration", "line_number": 110, "column_number": 22, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E262", "text": "inline comment should start with '# '", "line": "break #break the for loop, to next iteration", "line_number": 110, "column_number": 23, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "else: #if ALL the items in the list is not in dict", "line_number": 111, "column_number": 18, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E262", "text": "inline comment should start with '# '", "line": "else: #if ALL the items in the list is not in dict", "line_number": 111, "column_number": 19, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "covered[j] = 1 #add the items into dict", "line_number": 113, "column_number": 35, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E262", "text": "inline comment should start with '# '", "line": "covered[j] = 1 #add the items into dict", "line_number": 113, "column_number": 36, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "ans.append(sets[x]) #add the list to ans", "line_number": 114, "column_number": 36, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E262", "text": "inline comment should start with '# '", "line": "ans.append(sets[x]) #add the list to ans", "line_number": 114, "column_number": 37, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "tmp[x] = 0 #clear the value of the list, so we won't revisit it again", "line_number": 115, "column_number": 27, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E262", "text": "inline comment should start with '# '", "line": "tmp[x] = 0 #clear the value of the list, so we won't revisit it again", "line_number": 115, "column_number": 28, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "if len(covered) == 10: #if len of dict is 10, that means we found what we want", "line_number": 116, "column_number": 31, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E262", "text": "inline comment should start with '# '", "line": "if len(covered) == 10: #if len of dict is 10, that means we found what we want", "line_number": 116, "column_number": 32, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "return ans #returning the list", "line_number": 117, "column_number": 23, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E262", "text": "inline comment should start with '# '", "line": "return ans #returning the list", "line_number": 117, "column_number": 24, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'kk'", "line": "kk += 1", "line_number": 121, "column_number": 9, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'kk'", "line": "if kk > 10:", "line_number": 122, "column_number": 12, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'list1'", "line": "set_list1 = [ # first test input", "line_number": 128, "column_number": 5, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "set_list1 = [ # first test input", "line_number": 128, "column_number": 14, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "C812", "text": "missing trailing comma", "line": "[2, 4, 6, 8]", "line_number": 133, "column_number": 17, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'list2'", "line": "set_list2 = [ # second test input", "line_number": 136, "column_number": 5, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "set_list2 = [ # second test input", "line_number": 136, "column_number": 14, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "C812", "text": "missing trailing comma", "line": "[1, 8, 9, 10]", "line_number": 143, "column_number": 18, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'list1'", "line": "s = greedy_set(set_list1)", "line_number": 146, "column_number": 20, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "print(s) # [[7, 8, 9, 10], [1, 2, 3], [4, 5, 6]]", "line_number": 147, "column_number": 9, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'list2'", "line": "s = greedy_set(set_list2)", "line_number": 149, "column_number": 20, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "print(s) # [[2, 4, 8, 9, 10], [3, 5, 6], [1, 7]]", "line_number": 150, "column_number": 9, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "WPS462", "text": "Wrong multiline string usage", "line": "# %%", "line_number": 152, "column_number": 5, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "WPS428", "text": "Found statement that has no effect", "line": "\"\"\"", "line_number": 153, "column_number": 1, "category": "ERROR_PRONE", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "E501", "text": "Too long line (214 symbols). Try to split it into smaller lines. It will make your code easy to understand.", "line": "It\u2019s Boxing Day and you are in a shopping contest! You have one shopping bag and you would like to fill your bags with items that have the largest sum of values. Please solve this problem using dynamic programming.", "line_number": 156, "column_number": 121, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'bag1'", "line": "bag1 = 4 # the maximum weight for the bag", "line_number": 160, "column_number": 1, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "bag1 = 4 # the maximum weight for the bag", "line_number": 160, "column_number": 9, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'list1'", "line": "item_list1 = [", "line_number": 161, "column_number": 6, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "C812", "text": "missing trailing comma", "line": "['laptop', 3, 2000]", "line_number": 164, "column_number": 24, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'bag2'", "line": "bag2 = 7 # the maximum weight for the bag", "line_number": 167, "column_number": 1, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "bag2 = 7 # the maximum weight for the bag", "line_number": 167, "column_number": 9, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'list2'", "line": "item_list2 = [", "line_number": 168, "column_number": 6, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "WPS231", "text": "Found function with too much cognitive complexity: 26 > 12", "line": "def knapsack_dp(bag_size, items):", "line_number": 178, "column_number": 1, "category": "COMPLEXITY", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "E225", "text": "missing whitespace around operator", "line": "grid = [[0]* (num_col+1) for _ in range(num_row)] # initialise the grid", "line_number": 181, "column_number": 16, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E226", "text": "missing whitespace around arithmetic operator", "line": "grid = [[0]* (num_col+1) for _ in range(num_row)] # initialise the grid", "line_number": 181, "column_number": 26, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "grid = [[0]* (num_col+1) for _ in range(num_row)] # initialise the grid", "line_number": 181, "column_number": 54, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "F841", "text": "local variable 'prev_max' is assigned to but never used", "line": "prev_max = 0", "line_number": 182, "column_number": 5, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "E226", "text": "missing whitespace around arithmetic operator", "line": "for j in range(num_col+1):", "line_number": 188, "column_number": 31, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "if j != 0: #not the first column", "line_number": 189, "column_number": 23, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E262", "text": "inline comment should start with '# '", "line": "if j != 0: #not the first column", "line_number": 189, "column_number": 24, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "if i == 0: #if it is the first row", "line_number": 190, "column_number": 27, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E262", "text": "inline comment should start with '# '", "line": "if i == 0: #if it is the first row", "line_number": 190, "column_number": 28, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "WPS204", "text": "Found overused expression: items[i]; used 7 > 4", "line": "if items[i][1] <= j: #compare the \"slots\", if the first item can fit", "line_number": 191, "column_number": 24, "category": "COMPLEXITY", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "if items[i][1] <= j: #compare the \"slots\", if the first item can fit", "line_number": 191, "column_number": 41, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E262", "text": "inline comment should start with '# '", "line": "if items[i][1] <= j: #compare the \"slots\", if the first item can fit", "line_number": 191, "column_number": 42, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "WPS220", "text": "Found too deep nesting: 24 > 20", "line": "grid[i][j] = items[i][2] #put the item (value) in", "line_number": 192, "column_number": 25, "category": "COMPLEXITY", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "grid[i][j] = items[i][2] #put the item (value) in", "line_number": 192, "column_number": 49, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E262", "text": "inline comment should start with '# '", "line": "grid[i][j] = items[i][2] #put the item (value) in", "line_number": 192, "column_number": 50, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "else: #not the first row", "line_number": 193, "column_number": 22, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E262", "text": "inline comment should start with '# '", "line": "else: #not the first row", "line_number": 193, "column_number": 23, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "if items[i][1] > j: # if the item cannot fit", "line_number": 194, "column_number": 40, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "WPS220", "text": "Found too deep nesting: 24 > 20", "line": "grid[i][j] = grid[i-1][j] #copy the highest valued option from last row", "line_number": 195, "column_number": 25, "category": "COMPLEXITY", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "WPS204", "text": "Found overused expression: grid[i - 1]; used 5 > 4", "line": "grid[i][j] = grid[i-1][j] #copy the highest valued option from last row", "line_number": 195, "column_number": 38, "category": "COMPLEXITY", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "WPS204", "text": "Found overused expression: i - 1; used 5 > 4", "line": "grid[i][j] = grid[i-1][j] #copy the highest valued option from last row", "line_number": 195, "column_number": 43, "category": "COMPLEXITY", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "E226", "text": "missing whitespace around arithmetic operator", "line": "grid[i][j] = grid[i-1][j] #copy the highest valued option from last row", "line_number": 195, "column_number": 44, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "grid[i][j] = grid[i-1][j] #copy the highest valued option from last row", "line_number": 195, "column_number": 50, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E262", "text": "inline comment should start with '# '", "line": "grid[i][j] = grid[i-1][j] #copy the highest valued option from last row", "line_number": 195, "column_number": 51, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "else: #if the item can fit", "line_number": 196, "column_number": 26, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E262", "text": "inline comment should start with '# '", "line": "else: #if the item can fit", "line_number": 196, "column_number": 27, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "WPS220", "text": "Found too deep nesting: 24 > 20", "line": "if (items[i][2] + grid[i-1][j-items[i][1]]) > grid[i-1][j]: #compare the combined value of the item and the highest valued compliment option from last row", "line_number": 197, "column_number": 25, "category": "COMPLEXITY", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "E226", "text": "missing whitespace around arithmetic operator", "line": "if (items[i][2] + grid[i-1][j-items[i][1]]) > grid[i-1][j]: #compare the combined value of the item and the highest valued compliment option from last row", "line_number": 197, "column_number": 49, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E226", "text": "missing whitespace around arithmetic operator", "line": "if (items[i][2] + grid[i-1][j-items[i][1]]) > grid[i-1][j]: #compare the combined value of the item and the highest valued compliment option from last row", "line_number": 197, "column_number": 54, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E226", "text": "missing whitespace around arithmetic operator", "line": "if (items[i][2] + grid[i-1][j-items[i][1]]) > grid[i-1][j]: #compare the combined value of the item and the highest valued compliment option from last row", "line_number": 197, "column_number": 77, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "if (items[i][2] + grid[i-1][j-items[i][1]]) > grid[i-1][j]: #compare the combined value of the item and the highest valued compliment option from last row", "line_number": 197, "column_number": 84, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E262", "text": "inline comment should start with '# '", "line": "if (items[i][2] + grid[i-1][j-items[i][1]]) > grid[i-1][j]: #compare the combined value of the item and the highest valued compliment option from last row", "line_number": 197, "column_number": 85, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E501", "text": "Too long line (178 symbols). Try to split it into smaller lines. It will make your code easy to understand.", "line": "if (items[i][2] + grid[i-1][j-items[i][1]]) > grid[i-1][j]: #compare the combined value of the item and the highest valued compliment option from last row", "line_number": 197, "column_number": 121, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "WPS220", "text": "Found too deep nesting: 28 > 20", "line": "grid[i][j] = items[i][2] + grid[i-1][j-items[i][1]] #if it is greater than the last best option (on last row), update the new combination", "line_number": 198, "column_number": 29, "category": "COMPLEXITY", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "E226", "text": "missing whitespace around arithmetic operator", "line": "grid[i][j] = items[i][2] + grid[i-1][j-items[i][1]] #if it is greater than the last best option (on last row), update the new combination", "line_number": 198, "column_number": 62, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E226", "text": "missing whitespace around arithmetic operator", "line": "grid[i][j] = items[i][2] + grid[i-1][j-items[i][1]] #if it is greater than the last best option (on last row), update the new combination", "line_number": 198, "column_number": 67, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "grid[i][j] = items[i][2] + grid[i-1][j-items[i][1]] #if it is greater than the last best option (on last row), update the new combination", "line_number": 198, "column_number": 80, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E262", "text": "inline comment should start with '# '", "line": "grid[i][j] = items[i][2] + grid[i-1][j-items[i][1]] #if it is greater than the last best option (on last row), update the new combination", "line_number": 198, "column_number": 81, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E501", "text": "Too long line (165 symbols). Try to split it into smaller lines. It will make your code easy to understand.", "line": "grid[i][j] = items[i][2] + grid[i-1][j-items[i][1]] #if it is greater than the last best option (on last row), update the new combination", "line_number": 198, "column_number": 121, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "else: #if the last row have a better option", "line_number": 199, "column_number": 30, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E262", "text": "inline comment should start with '# '", "line": "else: #if the last row have a better option", "line_number": 199, "column_number": 31, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "WPS220", "text": "Found too deep nesting: 28 > 20", "line": "grid[i][j] = grid[i-1][j] #copy the last best option", "line_number": 200, "column_number": 29, "category": "COMPLEXITY", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "E226", "text": "missing whitespace around arithmetic operator", "line": "grid[i][j] = grid[i-1][j] #copy the last best option", "line_number": 200, "column_number": 48, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "grid[i][j] = grid[i-1][j] #copy the last best option", "line_number": 200, "column_number": 54, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E262", "text": "inline comment should start with '# '", "line": "grid[i][j] = grid[i-1][j] #copy the last best option", "line_number": 200, "column_number": 55, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "WPS519", "text": "Found implicit `sum()` call", "line": "for c in r:", "line_number": 206, "column_number": 9, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "WPS237", "text": "Found a too complex `f` string", "line": "s += f'{c:4} '", "line_number": 207, "column_number": 18, "category": "COMPLEXITY", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "WPS336", "text": "Found explicit string concatenation", "line": "s += f'{c:4} '", "line_number": 207, "column_number": 18, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'bag1'", "line": "g = knapsack_dp(bag1, item_list1)", "line_number": 210, "column_number": 17, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'list1'", "line": "g = knapsack_dp(bag1, item_list1)", "line_number": 210, "column_number": 28, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'bag2'", "line": "g = knapsack_dp(bag2, item_list2)", "line_number": 213, "column_number": 17, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'list2'", "line": "g = knapsack_dp(bag2, item_list2)", "line_number": 213, "column_number": 28, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}]}
