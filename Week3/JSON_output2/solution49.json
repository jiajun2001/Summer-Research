{"quality": {"code": "BAD", "text": "Code quality (beta): BAD"}, "issues": [{"code": "WPS462", "text": "Wrong multiline string usage", "line": "# %%", "line_number": 6, "column_number": 5, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "W0105", "text": "String statement has no effect", "line": "\"\"\"", "line_number": 7, "column_number": 1, "category": "ERROR_PRONE", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "E501", "text": "Too long line (187 symbols). Try to split it into smaller lines. It will make your code easy to understand.", "line": "As mentioned in the lecture, the **set cover problem** is an NP-complete problem. In this task, you will solve this question using both exhausive search (brute force) and greedy apporach.", "line_number": 9, "column_number": 121, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E501", "text": "Too long line (140 symbols). Try to split it into smaller lines. It will make your code easy to understand.", "line": "Given a `list` of `sets` where each `set` contains integers, please find the minimum number of sets that cover the integers from `1` to `10`", "line_number": 13, "column_number": 121, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "WPS462", "text": "Wrong multiline string usage", "line": "# %%", "line_number": 24, "column_number": 5, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "W0105", "text": "String statement has no effect", "line": "\"\"\"", "line_number": 25, "column_number": 1, "category": "ERROR_PRONE", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "E501", "text": "Too long line (216 symbols). Try to split it into smaller lines. It will make your code easy to understand.", "line": "First, implement the brute force approach that tests `all` combinations. You can assume there will be a solution. To simplify your code a bit, you can use the `itertools`. Please read its document and examples below:", "line_number": 28, "column_number": 121, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "R1710", "text": "Either all return statements in a function should return an expression, or none of them should.", "line": "def brute_force_set(li):", "line_number": 37, "column_number": 1, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "R1721", "text": "Unnecessary use of a comprehension. Instead of using an identity comprehension, consider using the list, dict or set constructor. It is faster and simpler. For example, instead of {key: value for key, value in list_of_tuples} use dict(list_of_tuples).", "line": "idx_list = list(combinations([i for i in range(len(li))], 3))", "line_number": 41, "column_number": 1, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "R503", "text": "you should add explicit return at end of the function if function have return value except None", "line": "for idx in idx_list:", "line_number": 43, "column_number": 5, "category": "ERROR_PRONE", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "E226", "text": "missing whitespace around arithmetic operator", "line": "if sorted(data_list) == [i+1 for i in range(10)]:", "line_number": 45, "column_number": 35, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'list1'", "line": "set_list1 = [ # first test input", "line_number": 51, "column_number": 5, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "set_list1 = [ # first test input", "line_number": 51, "column_number": 14, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "C812", "text": "missing trailing comma", "line": "[2, 4, 6, 8]", "line_number": 56, "column_number": 17, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'list2'", "line": "set_list2 = [ # second test input", "line_number": 59, "column_number": 5, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "set_list2 = [ # second test input", "line_number": 59, "column_number": 14, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "C812", "text": "missing trailing comma", "line": "[1, 8, 9, 10]", "line_number": 66, "column_number": 18, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'list1'", "line": "ss = brute_force_set(set_list1)", "line_number": 69, "column_number": 26, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "print(ss) # ([1, 2, 3], [4, 5, 6], [7, 8, 9, 10])", "line_number": 70, "column_number": 10, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'list2'", "line": "ss = brute_force_set(set_list2)", "line_number": 72, "column_number": 26, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "print(ss) # ([1, 7], [2, 4, 8, 9, 10], [3, 5, 6])", "line_number": 73, "column_number": 10, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "WPS462", "text": "Wrong multiline string usage", "line": "# %%", "line_number": 75, "column_number": 5, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "W0105", "text": "String statement has no effect", "line": "\"\"\"", "line_number": 76, "column_number": 1, "category": "ERROR_PRONE", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "E501", "text": "Too long line (178 symbols). Try to split it into smaller lines. It will make your code easy to understand.", "line": "In this exercise, please implement a greedy algorithm that **for each step, takes a set that contains the most uncovered integers** until it covers all integers from `1` to `10`.", "line_number": 81, "column_number": 121, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "W0611", "text": "Unused import copy", "line": "import copy", "line_number": 85, "column_number": 1, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "C901", "text": "Cyclomatic complexity is too high (11). You can figure out how to simplify this code or split it into a set of small functions / methods. It will make your code easy to understand and less error prone.", "line": "def greedy_set(list_sets):", "line_number": 86, "column_number": 1, "category": "COMPLEXITY", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "WPS231", "text": "Found function with too much cognitive complexity: 36 > 12", "line": "def greedy_set(list_sets):", "line_number": 86, "column_number": 1, "category": "COMPLEXITY", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "ans = [] # your answer, should be a list of sets", "line_number": 88, "column_number": 13, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'kk'", "line": "kk = 0", "line_number": 91, "column_number": 5, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "WPS204", "text": "Found overused expression: sets[i]; used 9 > 7", "line": "length_list = [len(sets[i]) for i in range(len(sets))]", "line_number": 99, "column_number": 28, "category": "COMPLEXITY", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "WPS204", "text": "Found overused expression: sets[i]; used 9 > 4", "line": "length_list = [len(sets[i]) for i in range(len(sets))]", "line_number": 99, "column_number": 28, "category": "COMPLEXITY", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "C0200", "text": "Consider using enumerate instead of iterating with range and len", "line": "for i in range(len(sets)):", "line_number": 101, "column_number": 9, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "WPS441", "text": "Found control variable used after block: i", "line": "for j in range(len(sets[i])):", "line_number": 105, "column_number": 33, "category": "ERROR_PRONE", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "WPS441", "text": "Found control variable used after block: i", "line": "if sets[i][j] in covered.keys():", "line_number": 106, "column_number": 21, "category": "ERROR_PRONE", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "WPS441", "text": "Found control variable used after block: i", "line": "del sets[i]", "line_number": 108, "column_number": 26, "category": "ERROR_PRONE", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "WPS440", "text": "Found block variables overlap: j", "line": "for j in range(len(sets[i])):", "line_number": 111, "column_number": 13, "category": "ERROR_PRONE", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "WPS441", "text": "Found control variable used after block: i", "line": "for j in range(len(sets[i])):", "line_number": 111, "column_number": 37, "category": "ERROR_PRONE", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "WPS441", "text": "Found control variable used after block: i", "line": "covered[sets[i][j]] = 1", "line_number": 112, "column_number": 30, "category": "ERROR_PRONE", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "WPS441", "text": "Found control variable used after block: i", "line": "ans.append(sets[i])", "line_number": 113, "column_number": 29, "category": "ERROR_PRONE", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "WPS441", "text": "Found control variable used after block: i", "line": "del sets[i]", "line_number": 114, "column_number": 22, "category": "ERROR_PRONE", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "C414", "text": "Unnecessary list call within sorted().", "line": "if sorted(list(covered.keys())) == [j+1 for j in range(10)]:", "line_number": 117, "column_number": 12, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "WPS441", "text": "Found control variable used after block: j", "line": "if sorted(list(covered.keys())) == [j+1 for j in range(10)]:", "line_number": 117, "column_number": 45, "category": "ERROR_PRONE", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "E226", "text": "missing whitespace around arithmetic operator", "line": "if sorted(list(covered.keys())) == [j+1 for j in range(10)]:", "line_number": 117, "column_number": 46, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'kk'", "line": "kk += 1", "line_number": 120, "column_number": 9, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'kk'", "line": "if kk > 10:", "line_number": 121, "column_number": 12, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'list1'", "line": "set_list1 = [ # first test input", "line_number": 128, "column_number": 5, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "set_list1 = [ # first test input", "line_number": 128, "column_number": 14, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "C812", "text": "missing trailing comma", "line": "[2, 4, 6, 8]", "line_number": 133, "column_number": 17, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'list2'", "line": "set_list2 = [ # second test input", "line_number": 136, "column_number": 5, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "set_list2 = [ # second test input", "line_number": 136, "column_number": 14, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "C812", "text": "missing trailing comma", "line": "[1, 8, 9, 10]", "line_number": 143, "column_number": 18, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'list1'", "line": "s = greedy_set(set_list1)", "line_number": 146, "column_number": 20, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "print(s) # [[7, 8, 9, 10], [1, 2, 3], [4, 5, 6]]", "line_number": 147, "column_number": 9, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'list2'", "line": "s = greedy_set(set_list2)", "line_number": 149, "column_number": 20, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "print(s) # [[2, 4, 8, 9, 10], [3, 5, 6], [1, 7]]", "line_number": 150, "column_number": 9, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "WPS462", "text": "Wrong multiline string usage", "line": "# %%", "line_number": 152, "column_number": 5, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "W0105", "text": "String statement has no effect", "line": "\"\"\"", "line_number": 153, "column_number": 1, "category": "ERROR_PRONE", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "E501", "text": "Too long line (214 symbols). Try to split it into smaller lines. It will make your code easy to understand.", "line": "It\u2019s Boxing Day and you are in a shopping contest! You have one shopping bag and you would like to fill your bags with items that have the largest sum of values. Please solve this problem using dynamic programming.", "line_number": 156, "column_number": 121, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'bag1'", "line": "bag1 = 4 # the maximum weight for the bag", "line_number": 160, "column_number": 1, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "bag1 = 4 # the maximum weight for the bag", "line_number": 160, "column_number": 9, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'list1'", "line": "item_list1 = [", "line_number": 161, "column_number": 6, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "C812", "text": "missing trailing comma", "line": "['laptop', 3, 2000]", "line_number": 164, "column_number": 24, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'bag2'", "line": "bag2 = 7 # the maximum weight for the bag", "line_number": 167, "column_number": 1, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "bag2 = 7 # the maximum weight for the bag", "line_number": 167, "column_number": 9, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'list2'", "line": "item_list2 = [", "line_number": 168, "column_number": 6, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "WPS231", "text": "Found function with too much cognitive complexity: 38 > 12", "line": "def knapsack_dp(bag_size, items):", "line_number": 178, "column_number": 1, "category": "COMPLEXITY", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "C901", "text": "Cyclomatic complexity is too high (11). You can figure out how to simplify this code or split it into a set of small functions / methods. It will make your code easy to understand and less error prone.", "line": "def knapsack_dp(bag_size, items):", "line_number": 178, "column_number": 1, "category": "COMPLEXITY", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "C002", "text": "Too long function (50 lines). Try to split it into smaller functions / methods. It will make your code easy to understand and less error prone.", "line": "def knapsack_dp(bag_size, items):", "line_number": 178, "column_number": 0, "category": "BEST_PRACTICES", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E225", "text": "missing whitespace around operator", "line": "grid = [[0]* (num_col+1) for _ in range(num_row)] # initialise the grid", "line_number": 181, "column_number": 16, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E226", "text": "missing whitespace around arithmetic operator", "line": "grid = [[0]* (num_col+1) for _ in range(num_row)] # initialise the grid", "line_number": 181, "column_number": 26, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "grid = [[0]* (num_col+1) for _ in range(num_row)] # initialise the grid", "line_number": 181, "column_number": 54, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E226", "text": "missing whitespace around arithmetic operator", "line": "weight_l = [items[a][1] for a in range(i+1)]", "line_number": 189, "column_number": 53, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E226", "text": "missing whitespace around arithmetic operator", "line": "value_l = [items[a][2] for a in range(i+1)]", "line_number": 190, "column_number": 52, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "WPS204", "text": "Found overused expression: j + 1; used 6 > 4", "line": "if (j+1) < min(weight_l):", "line_number": 192, "column_number": 17, "category": "COMPLEXITY", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "E226", "text": "missing whitespace around arithmetic operator", "line": "if (j+1) < min(weight_l):", "line_number": 192, "column_number": 18, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E226", "text": "missing whitespace around arithmetic operator", "line": "new_list = [grid[a][j+1] for a in range(num_row)]", "line_number": 194, "column_number": 38, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E226", "text": "missing whitespace around arithmetic operator", "line": "grid[i][j+1] = max(new_list)", "line_number": 195, "column_number": 26, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E226", "text": "missing whitespace around arithmetic operator", "line": "count = [a+1 for a in range(len(weight_l))]", "line_number": 200, "column_number": 27, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "WPS519", "text": "Found implicit `sum()` call", "line": "for c in count:", "line_number": 202, "column_number": 17, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "R1721", "text": "Unnecessary use of a comprehension. Instead of using an identity comprehension, consider using the list, dict or set constructor. It is faster and simpler. For example, instead of {key: value for key, value in list_of_tuples} use dict(list_of_tuples).", "line": "idx_list += list(combinations([a for a in range(len(weight_l))], c))", "line_number": 203, "column_number": 1, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "C0200", "text": "Consider using enumerate instead of iterating with range and len", "line": "for a in range(len(i_l)):", "line_number": 207, "column_number": 21, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "WPS220", "text": "Found too deep nesting: 24 > 20", "line": "num_list.append(i_l[a])", "line_number": 208, "column_number": 25, "category": "COMPLEXITY", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "C0200", "text": "Consider using enumerate instead of iterating with range and len", "line": "for a in range(len(num_list)):", "line_number": 212, "column_number": 21, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "WPS440", "text": "Found block variables overlap: a", "line": "for a in range(len(num_list)):", "line_number": 212, "column_number": 21, "category": "ERROR_PRONE", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "E226", "text": "missing whitespace around arithmetic operator", "line": "if weight_sum <= (j+1):", "line_number": 215, "column_number": 40, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "WPS220", "text": "Found too deep nesting: 24 > 20", "line": "weight_list.append(weight_sum)", "line_number": 216, "column_number": 25, "category": "COMPLEXITY", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "WPS220", "text": "Found too deep nesting: 24 > 20", "line": "value_list.append(value_sum)", "line_number": 217, "column_number": 25, "category": "COMPLEXITY", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "WPS507", "text": "Found useless `len()` compare", "line": "if len(value_list) > 0:", "line_number": 219, "column_number": 20, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "WPS220", "text": "Found too deep nesting: 24 > 20", "line": "prev_max = max(value_list)", "line_number": 222, "column_number": 25, "category": "COMPLEXITY", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "WPS220", "text": "Found too deep nesting: 24 > 20", "line": "grid[i][j+1] = prev_max", "line_number": 223, "column_number": 25, "category": "COMPLEXITY", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "E226", "text": "missing whitespace around arithmetic operator", "line": "grid[i][j+1] = prev_max", "line_number": 223, "column_number": 34, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "WPS220", "text": "Found too deep nesting: 24 > 20", "line": "grid[i][j+1] = max(value_list)", "line_number": 225, "column_number": 25, "category": "COMPLEXITY", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "E226", "text": "missing whitespace around arithmetic operator", "line": "grid[i][j+1] = max(value_list)", "line_number": 225, "column_number": 34, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "W0621", "text": "Redefining name 's' from outer scope (line 146)", "line": "s = ' '", "line_number": 232, "column_number": 9, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "WPS519", "text": "Found implicit `sum()` call", "line": "for c in r:", "line_number": 233, "column_number": 9, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "WPS237", "text": "Found a too complex `f` string", "line": "s += f'{c:4} '", "line_number": 234, "column_number": 18, "category": "COMPLEXITY", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "WPS336", "text": "Found explicit string concatenation", "line": "s += f'{c:4} '", "line_number": 234, "column_number": 18, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'bag1'", "line": "g = knapsack_dp(bag1, item_list1)", "line_number": 237, "column_number": 17, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'list1'", "line": "g = knapsack_dp(bag1, item_list1)", "line_number": 237, "column_number": 28, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'bag2'", "line": "g = knapsack_dp(bag2, item_list2)", "line_number": 240, "column_number": 17, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'list2'", "line": "g = knapsack_dp(bag2, item_list2)", "line_number": 240, "column_number": 28, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}]}
