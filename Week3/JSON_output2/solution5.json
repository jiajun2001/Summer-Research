{"quality": {"code": "BAD", "text": "Code quality (beta): BAD"}, "issues": [{"code": "WPS462", "text": "Wrong multiline string usage", "line": "# %%", "line_number": 6, "column_number": 5, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "W0105", "text": "String statement has no effect", "line": "\"\"\"", "line_number": 7, "column_number": 1, "category": "ERROR_PRONE", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "E501", "text": "Too long line (133 symbols). Try to split it into smaller lines. It will make your code easy to understand.", "line": "In this weeks workshop, you have analysed different types of hash functions. Now, please implement and evaluate these hash functions.", "line_number": 10, "column_number": 121, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E501", "text": "Too long line (169 symbols). Try to split it into smaller lines. It will make your code easy to understand.", "line": "Please implement the following hash functions where `val` is the input and `n` is the size of the hash table. You can assume that the `val`  will be a lower-case string.", "line_number": 12, "column_number": 121, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E501", "text": "Too long line (376 symbols). Try to split it into smaller lines. It will make your code easy to understand.", "line": "1. `hash4(val, n)` : Map every letter to a prime number, e.g. a = 1, b = 2, c = 3, d = 5. For a string, the hash function is the sum of all the corresponding numbers modulo the size of the hash. For example, if the hash table is 10, and the string is bad, the index is `(3+2+7)%10 = 2`. Note that you should ignore the characters that is not in the prime number mapping below.", "line_number": 16, "column_number": 121, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "W0613", "text": "Unused argument 'val'", "line": "def hash1(val, n):", "line_number": 20, "column_number": 11, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "W0613", "text": "Unused argument 'n'", "line": "def hash1(val, n):", "line_number": 20, "column_number": 16, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'hash1'", "line": "def hash1(val, n):", "line_number": 20, "column_number": 5, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "W0613", "text": "Unused argument 'n'", "line": "def hash2(val, n):", "line_number": 24, "column_number": 16, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'hash2'", "line": "def hash2(val, n):", "line_number": 24, "column_number": 5, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "W0613", "text": "Unused argument 'n'", "line": "def hash3(val, n):", "line_number": 28, "column_number": 16, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'hash3'", "line": "def hash3(val, n):", "line_number": 28, "column_number": 5, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'hash4'", "line": "def hash4(val, n):", "line_number": 35, "column_number": 5, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "WPS122", "text": "Found all unused variables definition: _sum", "line": "_sum = 0", "line_number": 39, "column_number": 5, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "WPS519", "text": "Found implicit `sum()` call", "line": "for s in val:", "line_number": 40, "column_number": 5, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "WPS121", "text": "Found usage of a variable marked as unused: _sum", "line": "_sum += d.get(s, 0)", "line_number": 41, "column_number": 9, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "WPS121", "text": "Found usage of a variable marked as unused: _sum", "line": "return _sum % n", "line_number": 42, "column_number": 12, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'hash1'", "line": "print(hash1('adelaide', 10))  # 1", "line_number": 46, "column_number": 7, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'hash2'", "line": "print(hash2('adelaide', 10))  # 8", "line_number": 47, "column_number": 7, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'hash3'", "line": "print(hash3('adelaide', 10))  # 0", "line_number": 48, "column_number": 7, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'hash4'", "line": "print(hash4('adelaide', 10))  # 6", "line_number": 49, "column_number": 7, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "WPS462", "text": "Wrong multiline string usage", "line": "# %%", "line_number": 51, "column_number": 5, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "W0105", "text": "String statement has no effect", "line": "\"\"\"", "line_number": 52, "column_number": 1, "category": "ERROR_PRONE", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "WPS462", "text": "Wrong multiline string usage", "line": "# %%", "line_number": 56, "column_number": 5, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "W0105", "text": "String statement has no effect", "line": "\"\"\"", "line_number": 57, "column_number": 1, "category": "ERROR_PRONE", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "E501", "text": "Too long line (142 symbols). Try to split it into smaller lines. It will make your code easy to understand.", "line": "In this exercise, you will implement your own HashTable class. You will use chaining when collisions happen. The functions to be completed are", "line_number": 58, "column_number": 121, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E501", "text": "Too long line (181 symbols). Try to split it into smaller lines. It will make your code easy to understand.", "line": "- `add_element(self, val)` function inserts an element into the hash table. Your code should first calculate the hash number of the input value `val`, then insert it into the table.", "line_number": 59, "column_number": 121, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E501", "text": "Too long line (168 symbols). Try to split it into smaller lines. It will make your code easy to understand.", "line": "- `search(self, val)` function search for the input value `val` in the hash table. If the value is already inside the table, it should return `True`, otherwise `False`.", "line_number": 60, "column_number": 121, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E501", "text": "Too long line (248 symbols). Try to split it into smaller lines. It will make your code easy to understand.", "line": "The provided test code first reads a list of books from a file `books.txt`, and then constructs a HashTable containing all books. You can think of it as a book management system in a library that keeps track of weather a book is inside the library.", "line_number": 62, "column_number": 121, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC100", "text": "Possibly misspelt word: '2D'", "line": "table = [[] for i in range(table_size)]  # allocate an empty 2D list", "line_number": 74, "column_number": 46, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E265", "text": "block comment should start with '# '", "line": "#'''add an element into the hash table'''", "line_number": 79, "column_number": 5, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "WPS122", "text": "Found all unused variables definition: _hash", "line": "_hash = hash4_b(val)", "line_number": 85, "column_number": 5, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'hash4'", "line": "_hash = hash4_b(val)", "line_number": 85, "column_number": 13, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "WPS121", "text": "Found usage of a variable marked as unused: _hash", "line": "column = table[_hash]", "line_number": 86, "column_number": 20, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "WPS507", "text": "Found useless `len()` compare", "line": "if len(column):", "line_number": 87, "column_number": 5, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "E265", "text": "block comment should start with '# '", "line": "#'''search if the val is already in the hash table'''", "line_number": 95, "column_number": 5, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "WPS122", "text": "Found all unused variables definition: _hash", "line": "_hash = hash4_b(val)", "line_number": 98, "column_number": 5, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'hash4'", "line": "_hash = hash4_b(val)", "line_number": 98, "column_number": 13, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "WPS121", "text": "Found usage of a variable marked as unused: _hash", "line": "column = table[_hash]", "line_number": 99, "column_number": 20, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'hash4'", "line": "def hash4_b(val):", "line_number": 103, "column_number": 5, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC100", "text": "Possibly misspelt word: 'hash4'", "line": "# Copy your hash4 function to here", "line_number": 107, "column_number": 5, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "WPS122", "text": "Found all unused variables definition: _sum", "line": "_sum = 0", "line_number": 112, "column_number": 5, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "WPS519", "text": "Found implicit `sum()` call", "line": "for s in val:", "line_number": 114, "column_number": 9, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "WPS121", "text": "Found usage of a variable marked as unused: _sum", "line": "_sum += d.get(s, 0)", "line_number": 115, "column_number": 13, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "WPS121", "text": "Found usage of a variable marked as unused: _sum", "line": "return _sum % size", "line_number": 116, "column_number": 12, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "WPS440", "text": "Found block variables overlap: f", "line": "with open('books.txt', 'r') as f:", "line_number": 132, "column_number": 1, "category": "ERROR_PRONE", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "WPS440", "text": "Found block variables overlap: line", "line": "for line in f:", "line_number": 134, "column_number": 5, "category": "ERROR_PRONE", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "WPS462", "text": "Wrong multiline string usage", "line": "# %%", "line_number": 139, "column_number": 5, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "W0105", "text": "String statement has no effect", "line": "\"\"\"", "line_number": 140, "column_number": 1, "category": "ERROR_PRONE", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "E501", "text": "Too long line (137 symbols). Try to split it into smaller lines. It will make your code easy to understand.", "line": "Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.", "line_number": 143, "column_number": 121, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'dup'", "line": "def check_dup(li):", "line_number": 162, "column_number": 11, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'dup'", "line": "b = check_dup([1, 3, 1, 2])", "line_number": 171, "column_number": 11, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'dup'", "line": "b = check_dup([1, 2, 3, 4])", "line_number": 173, "column_number": 11, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'dup'", "line": "b = check_dup([1, 1, 1, 3, 3, 4, 3, 2, 4, 2])", "line_number": 175, "column_number": 11, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "WPS462", "text": "Wrong multiline string usage", "line": "# %%", "line_number": 178, "column_number": 5, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "W0105", "text": "String statement has no effect", "line": "\"\"\"", "line_number": 179, "column_number": 1, "category": "ERROR_PRONE", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "WPS462", "text": "Wrong multiline string usage", "line": "# %%", "line_number": 183, "column_number": 5, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "W0105", "text": "String statement has no effect", "line": "\"\"\"", "line_number": 184, "column_number": 1, "category": "ERROR_PRONE", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "E501", "text": "Too long line (129 symbols). Try to split it into smaller lines. It will make your code easy to understand.", "line": "Given an array of **integers** nums and an **integer** target, return indices of the two numbers such that they add up to target.", "line_number": 185, "column_number": 121, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E501", "text": "Too long line (151 symbols). Try to split it into smaller lines. It will make your code easy to understand.", "line": "You may assume that each input would have **exactly one solution**, and you may not use the same element twice. You can return the answer in any order.", "line_number": 187, "column_number": 121, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E501", "text": "Too long line (214 symbols). Try to split it into smaller lines. It will make your code easy to understand.", "line": "**Note:** the most intuitive solution is $O(n^2)$ that checks every pair of the numbers. However, you can use hash table to solve the question in linear time! You will get full mark by using either of the approach.", "line_number": 189, "column_number": 121, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "R1710", "text": "Either all return statements in a function should return an expression, or none of them should.", "line": "def two_sum(li, target):", "line_number": 210, "column_number": 1, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "R503", "text": "you should add explicit return at end of the function if function have return value except None", "line": "for i,n in enumerate(li):", "line_number": 214, "column_number": 5, "category": "ERROR_PRONE", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "E231", "text": "missing whitespace after ','", "line": "for i,n in enumerate(li):", "line_number": 214, "column_number": 10, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "WPS529", "text": "Found implicit `.get()` dict usage", "line": "return i, d[v]", "line_number": 217, "column_number": 23, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "WPS432", "text": "Found a magic number: 22. The use of unnamed magic numbers in code hides the developers' intent in choosing that number, increases opportunities for subtle errors and makes it more difficult for the program to be adapted and extended in the future. However, for small programs it can be allowed, but it is better to use constants instead of magic numbers.", "line": "ans = two_sum([2, 7, 11, 15], 22)", "line_number": 224, "column_number": 31, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E262", "text": "inline comment should start with '# '", "line": "print(ans)  #(3, 1)", "line_number": 225, "column_number": 13, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "WPS432", "text": "Found a magic number: 18. The use of unnamed magic numbers in code hides the developers' intent in choosing that number, increases opportunities for subtle errors and makes it more difficult for the program to be adapted and extended in the future. However, for small programs it can be allowed, but it is better to use constants instead of magic numbers.", "line": "ans = two_sum([2, 7, 11, 15], 18)", "line_number": 226, "column_number": 31, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E262", "text": "inline comment should start with '# '", "line": "print(ans)  #(2, 1)", "line_number": 227, "column_number": 13, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E262", "text": "inline comment should start with '# '", "line": "print(ans)  #None", "line_number": 229, "column_number": 13, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}]}
