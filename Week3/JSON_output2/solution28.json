{"quality": {"code": "BAD", "text": "Code quality (beta): BAD"}, "issues": [{"code": "WPS462", "text": "Wrong multiline string usage", "line": "# %%", "line_number": 7, "column_number": 5, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "W0105", "text": "String statement has no effect", "line": "\"\"\"", "line_number": 8, "column_number": 1, "category": "ERROR_PRONE", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "WPS462", "text": "Wrong multiline string usage", "line": "# %%", "line_number": 14, "column_number": 5, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "W0105", "text": "String statement has no effect", "line": "\"\"\"", "line_number": 15, "column_number": 1, "category": "ERROR_PRONE", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "dag = {} # DAG", "line_number": 33, "column_number": 9, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'q1'", "line": "def q1_add_node(node, graph):", "line_number": 35, "column_number": 5, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'q1'", "line": "def q1_add_edge(node1, node2, graph):", "line_number": 41, "column_number": 5, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'node1'", "line": "def q1_add_edge(node1, node2, graph):", "line_number": 41, "column_number": 17, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'node2'", "line": "def q1_add_edge(node1, node2, graph):", "line_number": 41, "column_number": 24, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC100", "text": "Possibly misspelt word: '2''''", "line": "# '''add an edge from node 1 to node 2'''", "line_number": 42, "column_number": 5, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'node1'", "line": "node1 = node1.lower()", "line_number": 43, "column_number": 5, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'node1'", "line": "node1 = node1.lower()", "line_number": 43, "column_number": 13, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'node2'", "line": "node2 = node2.lower()", "line_number": 44, "column_number": 5, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'node2'", "line": "node2 = node2.lower()", "line_number": 44, "column_number": 13, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'q1'", "line": "q1_add_node(node1, graph)", "line_number": 47, "column_number": 5, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'node1'", "line": "q1_add_node(node1, graph)", "line_number": 47, "column_number": 17, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'q1'", "line": "q1_add_node(node2, graph)", "line_number": 48, "column_number": 5, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'node2'", "line": "q1_add_node(node2, graph)", "line_number": 48, "column_number": 17, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC100", "text": "Possibly misspelt word: 'node1'", "line": "# add edge node1 -> node2", "line_number": 50, "column_number": 5, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC100", "text": "Possibly misspelt word: 'node2'", "line": "# add edge node1 -> node2", "line_number": 50, "column_number": 5, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'node1'", "line": "node = graph[node1]", "line_number": 51, "column_number": 18, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'node2'", "line": "if node2 not in node:", "line_number": 52, "column_number": 8, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'node2'", "line": "node.append(node2)", "line_number": 53, "column_number": 21, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "R1710", "text": "Either all return statements in a function should return an expression, or none of them should.", "line": "def q1_get_neighbor(node, graph):", "line_number": 55, "column_number": 1, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'q1'", "line": "def q1_get_neighbor(node, graph):", "line_number": 55, "column_number": 5, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E265", "text": "block comment should start with '# '", "line": "#'''get neighboring nodes'''", "line_number": 56, "column_number": 5, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "R503", "text": "you should add explicit return at end of the function if function have return value except None", "line": "if node in graph:", "line_number": 59, "column_number": 5, "category": "ERROR_PRONE", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "WPS529", "text": "Found implicit `.get()` dict usage", "line": "return copy.deepcopy(graph[node])", "line_number": 60, "column_number": 30, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'q1'", "line": "def q1_show(graph):", "line_number": 62, "column_number": 5, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'q1'", "line": "def q1_build_graph(graph):", "line_number": 65, "column_number": 5, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'q1'", "line": "q1_add_edge('you', 'alice', graph)", "line_number": 68, "column_number": 5, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'q1'", "line": "q1_add_edge('you', 'bob', graph)", "line_number": 69, "column_number": 5, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'q1'", "line": "q1_add_edge('you', 'claire', graph)", "line_number": 70, "column_number": 5, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'q1'", "line": "q1_add_edge('alice', 'danna', graph)", "line_number": 71, "column_number": 5, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'q1'", "line": "q1_add_edge('bob', 'ed', graph)", "line_number": 72, "column_number": 5, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'q1'", "line": "q1_add_edge('bob', 'danna', graph)", "line_number": 73, "column_number": 5, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'q1'", "line": "q1_add_edge('claire', 'fiona', graph)", "line_number": 74, "column_number": 5, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'q1'", "line": "q1_add_edge('claire', 'george', graph)", "line_number": 75, "column_number": 5, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "WPS428", "text": "Found statement that has no effect", "line": "...", "line_number": 76, "column_number": 5, "category": "ERROR_PRONE", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'q1'", "line": "def q1_bfs(node1, node2, graph):", "line_number": 79, "column_number": 5, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'bfs'", "line": "def q1_bfs(node1, node2, graph):", "line_number": 79, "column_number": 8, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'node1'", "line": "def q1_bfs(node1, node2, graph):", "line_number": 79, "column_number": 12, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'node2'", "line": "def q1_bfs(node1, node2, graph):", "line_number": 79, "column_number": 19, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E265", "text": "block comment should start with '# '", "line": "#'''return True if there is a path between node1 and node2'''", "line_number": 80, "column_number": 5, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC100", "text": "Possibly misspelt word: 'node1'", "line": "#'''return True if there is a path between node1 and node2'''", "line_number": 80, "column_number": 5, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC100", "text": "Possibly misspelt word: 'node2''''", "line": "#'''return True if there is a path between node1 and node2'''", "line_number": 80, "column_number": 5, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'node1'", "line": "node1 = node1.lower()", "line_number": 81, "column_number": 5, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'node1'", "line": "node1 = node1.lower()", "line_number": 81, "column_number": 13, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'node2'", "line": "node2 = node2.lower()", "line_number": 82, "column_number": 5, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'node2'", "line": "node2 = node2.lower()", "line_number": 82, "column_number": 13, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "A001", "text": "variable \"dict\" is shadowing a python builtin", "line": "dict={}", "line_number": 86, "column_number": 5, "category": "ERROR_PRONE", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "E225", "text": "missing whitespace around operator", "line": "dict={}", "line_number": 86, "column_number": 9, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E225", "text": "missing whitespace around operator", "line": "dict[k]=False", "line_number": 88, "column_number": 16, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E225", "text": "missing whitespace around operator", "line": "list_=[]", "line_number": 89, "column_number": 10, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'node1'", "line": "list_.append(node1)", "line_number": 90, "column_number": 18, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'node1'", "line": "dict[node1]=True", "line_number": 91, "column_number": 10, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E225", "text": "missing whitespace around operator", "line": "dict[node1]=True", "line_number": 91, "column_number": 16, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "C0325", "text": "Unnecessary parens after 'while' keyword", "line": "while (len(list_)>0):", "line_number": 93, "column_number": 1, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "WPS507", "text": "Found useless `len()` compare", "line": "while (len(list_)>0):", "line_number": 93, "column_number": 12, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "E225", "text": "missing whitespace around operator", "line": "a=list_.pop()", "line_number": 94, "column_number": 10, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E225", "text": "missing whitespace around operator", "line": "n=q1_get_neighbor(a,graph)", "line_number": 95, "column_number": 10, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E231", "text": "missing whitespace after ','", "line": "n=q1_get_neighbor(a,graph)", "line_number": 95, "column_number": 28, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'q1'", "line": "n=q1_get_neighbor(a,graph)", "line_number": 95, "column_number": 11, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "C0121", "text": "Comparison 'dict[i] == False' should be 'dict[i] is False' if checking for the singleton value False, or 'not dict[i]' if testing for falsiness", "line": "if dict[i]==False:", "line_number": 97, "column_number": 16, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "E712", "text": "comparison to False should be 'if cond is False:' or 'if not cond:'", "line": "if dict[i]==False:", "line_number": 97, "column_number": 23, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E225", "text": "missing whitespace around operator", "line": "if dict[i]==False:", "line_number": 97, "column_number": 23, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E225", "text": "missing whitespace around operator", "line": "dict[i]=True", "line_number": 99, "column_number": 24, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'node2'", "line": "return dict[node2]", "line_number": 100, "column_number": 17, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "R503", "text": "you should add explicit return at end of the function if function have return value except None", "line": "...", "line_number": 102, "column_number": 5, "category": "ERROR_PRONE", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "WPS428", "text": "Found statement that has no effect", "line": "...", "line_number": 102, "column_number": 5, "category": "ERROR_PRONE", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'q1'", "line": "q1_build_graph(dag)", "line_number": 105, "column_number": 1, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'q1'", "line": "print(q1_show(dag))  # output: {'you': ['alice', 'bob', 'claire'], 'alice': ['danna'],", "line_number": 106, "column_number": 7, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC100", "text": "Possibly misspelt word: ''danna''", "line": "print(q1_show(dag))  # output: {'you': ['alice', 'bob', 'claire'], 'alice': ['danna'],", "line_number": 106, "column_number": 23, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E114", "text": "indentation is not a multiple of      (comment)", "line": "# 'bob': ['ed', 'danna'], 'claire': ['fiona', 'george'],", "line_number": 107, "column_number": 19, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E116", "text": "unexpected indentation (comment)", "line": "# 'bob': ['ed', 'danna'], 'claire': ['fiona', 'george'],", "line_number": 107, "column_number": 19, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC100", "text": "Possibly misspelt word: ''danna''", "line": "# 'bob': ['ed', 'danna'], 'claire': ['fiona', 'george'],", "line_number": 107, "column_number": 19, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E114", "text": "indentation is not a multiple of      (comment)", "line": "# 'danna': [], 'ed': [], 'fiona': [], 'george': []}", "line_number": 108, "column_number": 19, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E116", "text": "unexpected indentation (comment)", "line": "# 'danna': [], 'ed': [], 'fiona': [], 'george': []}", "line_number": 108, "column_number": 19, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC100", "text": "Possibly misspelt word: ''danna''", "line": "# 'danna': [], 'ed': [], 'fiona': [], 'george': []}", "line_number": 108, "column_number": 19, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'q1'", "line": "f = q1_bfs('you', 'fiona', dag)", "line_number": 111, "column_number": 5, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'bfs'", "line": "f = q1_bfs('you', 'fiona', dag)", "line_number": 111, "column_number": 8, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "print(f) # True", "line_number": 112, "column_number": 9, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'q1'", "line": "f = q1_bfs('alice', 'bob', dag)", "line_number": 113, "column_number": 5, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'bfs'", "line": "f = q1_bfs('alice', 'bob', dag)", "line_number": 113, "column_number": 8, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "print(f) # False", "line_number": 114, "column_number": 9, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "WPS462", "text": "Wrong multiline string usage", "line": "# %%", "line_number": 116, "column_number": 5, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "W0105", "text": "String statement has no effect", "line": "\"\"\"", "line_number": 117, "column_number": 1, "category": "ERROR_PRONE", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "WPS462", "text": "Wrong multiline string usage", "line": "# %%", "line_number": 123, "column_number": 5, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "W0105", "text": "String statement has no effect", "line": "\"\"\"", "line_number": 124, "column_number": 1, "category": "ERROR_PRONE", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "E501", "text": "Too long line (157 symbols). Try to split it into smaller lines. It will make your code easy to understand.", "line": "Below is another weighted graph `MyWDAG`. Please read the code carefully and play with it. After you understand the code, please do the following two things:", "line_number": 125, "column_number": 121, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "W0404", "text": "Reimport 'copy' (imported line 31)", "line": "import copy", "line_number": 139, "column_number": 1, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "WPS440", "text": "Found block variables overlap: copy", "line": "import copy", "line_number": 139, "column_number": 1, "category": "ERROR_PRONE", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'mywdag'", "line": "mywdag = {} # MyWDAG", "line_number": 141, "column_number": 1, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "mywdag = {} # MyWDAG", "line_number": 141, "column_number": 12, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'q2'", "line": "def q2_add_edge(node1, node2, graph, weight = 1):", "line_number": 143, "column_number": 5, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'node1'", "line": "def q2_add_edge(node1, node2, graph, weight = 1):", "line_number": 143, "column_number": 17, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'node2'", "line": "def q2_add_edge(node1, node2, graph, weight = 1):", "line_number": 143, "column_number": 24, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E251", "text": "unexpected spaces around keyword / parameter equals", "line": "def q2_add_edge(node1, node2, graph, weight = 1):", "line_number": 143, "column_number": 44, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E251", "text": "unexpected spaces around keyword / parameter equals", "line": "def q2_add_edge(node1, node2, graph, weight = 1):", "line_number": 143, "column_number": 46, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC100", "text": "Possibly misspelt word: '2''''", "line": "# '''add an edge from node 1 to node 2'''", "line_number": 144, "column_number": 5, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'node1'", "line": "node1 = node1.lower()", "line_number": 145, "column_number": 5, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'node1'", "line": "node1 = node1.lower()", "line_number": 145, "column_number": 13, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'node2'", "line": "node2 = node2.lower()", "line_number": 146, "column_number": 5, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'node2'", "line": "node2 = node2.lower()", "line_number": 146, "column_number": 13, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E713", "text": "test for membership should be 'not in'", "line": "if not node1 in graph:", "line_number": 148, "column_number": 8, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "WPS508", "text": "Found incorrect `not` with compare usage", "line": "if not node1 in graph:", "line_number": 148, "column_number": 8, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'node1'", "line": "if not node1 in graph:", "line_number": 148, "column_number": 12, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'node1'", "line": "graph[node1] = {}", "line_number": 149, "column_number": 15, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E713", "text": "test for membership should be 'not in'", "line": "if not node2 in graph:", "line_number": 150, "column_number": 8, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "WPS508", "text": "Found incorrect `not` with compare usage", "line": "if not node2 in graph:", "line_number": 150, "column_number": 8, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'node2'", "line": "if not node2 in graph:", "line_number": 150, "column_number": 12, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'node2'", "line": "graph[node2] = {}", "line_number": 151, "column_number": 15, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'node1'", "line": "graph[node1][node2] = weight", "line_number": 152, "column_number": 11, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'node2'", "line": "graph[node1][node2] = weight", "line_number": 152, "column_number": 18, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "R1710", "text": "Either all return statements in a function should return an expression, or none of them should.", "line": "def q2_get_neighbor(node, graph):", "line_number": 154, "column_number": 1, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'q2'", "line": "def q2_get_neighbor(node, graph):", "line_number": 154, "column_number": 5, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E265", "text": "block comment should start with '# '", "line": "#'''get neighboring nodes'''", "line_number": 155, "column_number": 5, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "R503", "text": "you should add explicit return at end of the function if function have return value except None", "line": "if node in graph:", "line_number": 157, "column_number": 5, "category": "ERROR_PRONE", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "WPS529", "text": "Found implicit `.get()` dict usage", "line": "return copy.deepcopy(graph[node])", "line_number": 158, "column_number": 30, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'q2'", "line": "def q2_show(graph):", "line_number": 160, "column_number": 5, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'q2'", "line": "def q2_build_graph(graph):", "line_number": 163, "column_number": 5, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'q2'", "line": "q2_add_edge(\"a\",\"b\",graph,5)", "line_number": 167, "column_number": 5, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E231", "text": "missing whitespace after ','", "line": "q2_add_edge(\"a\",\"b\",graph,5)", "line_number": 167, "column_number": 20, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E231", "text": "missing whitespace after ','", "line": "q2_add_edge(\"a\",\"b\",graph,5)", "line_number": 167, "column_number": 24, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E231", "text": "missing whitespace after ','", "line": "q2_add_edge(\"a\",\"b\",graph,5)", "line_number": 167, "column_number": 30, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'q2'", "line": "q2_add_edge(\"a\",\"c\",graph,0)", "line_number": 168, "column_number": 5, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E231", "text": "missing whitespace after ','", "line": "q2_add_edge(\"a\",\"c\",graph,0)", "line_number": 168, "column_number": 20, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E231", "text": "missing whitespace after ','", "line": "q2_add_edge(\"a\",\"c\",graph,0)", "line_number": 168, "column_number": 24, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E231", "text": "missing whitespace after ','", "line": "q2_add_edge(\"a\",\"c\",graph,0)", "line_number": 168, "column_number": 30, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'q2'", "line": "q2_add_edge(\"b\",\"d\",graph,15)", "line_number": 169, "column_number": 5, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "WPS432", "text": "Found a magic number: 15. The use of unnamed magic numbers in code hides the developers' intent in choosing that number, increases opportunities for subtle errors and makes it more difficult for the program to be adapted and extended in the future. However, for small programs it can be allowed, but it is better to use constants instead of magic numbers.", "line": "q2_add_edge(\"b\",\"d\",graph,15)", "line_number": 169, "column_number": 31, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E231", "text": "missing whitespace after ','", "line": "q2_add_edge(\"b\",\"d\",graph,15)", "line_number": 169, "column_number": 20, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E231", "text": "missing whitespace after ','", "line": "q2_add_edge(\"b\",\"d\",graph,15)", "line_number": 169, "column_number": 24, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E231", "text": "missing whitespace after ','", "line": "q2_add_edge(\"b\",\"d\",graph,15)", "line_number": 169, "column_number": 30, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'q2'", "line": "q2_add_edge(\"b\",\"e\",graph,20)", "line_number": 170, "column_number": 5, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "WPS432", "text": "Found a magic number: 20. The use of unnamed magic numbers in code hides the developers' intent in choosing that number, increases opportunities for subtle errors and makes it more difficult for the program to be adapted and extended in the future. However, for small programs it can be allowed, but it is better to use constants instead of magic numbers.", "line": "q2_add_edge(\"b\",\"e\",graph,20)", "line_number": 170, "column_number": 31, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E231", "text": "missing whitespace after ','", "line": "q2_add_edge(\"b\",\"e\",graph,20)", "line_number": 170, "column_number": 20, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E231", "text": "missing whitespace after ','", "line": "q2_add_edge(\"b\",\"e\",graph,20)", "line_number": 170, "column_number": 24, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E231", "text": "missing whitespace after ','", "line": "q2_add_edge(\"b\",\"e\",graph,20)", "line_number": 170, "column_number": 30, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'q2'", "line": "q2_add_edge(\"d\",\"f\",graph,20)", "line_number": 171, "column_number": 5, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "WPS432", "text": "Found a magic number: 20. The use of unnamed magic numbers in code hides the developers' intent in choosing that number, increases opportunities for subtle errors and makes it more difficult for the program to be adapted and extended in the future. However, for small programs it can be allowed, but it is better to use constants instead of magic numbers.", "line": "q2_add_edge(\"d\",\"f\",graph,20)", "line_number": 171, "column_number": 31, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E231", "text": "missing whitespace after ','", "line": "q2_add_edge(\"d\",\"f\",graph,20)", "line_number": 171, "column_number": 20, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E231", "text": "missing whitespace after ','", "line": "q2_add_edge(\"d\",\"f\",graph,20)", "line_number": 171, "column_number": 24, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E231", "text": "missing whitespace after ','", "line": "q2_add_edge(\"d\",\"f\",graph,20)", "line_number": 171, "column_number": 30, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'q2'", "line": "q2_add_edge(\"e\",\"f\",graph,10)", "line_number": 172, "column_number": 5, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E231", "text": "missing whitespace after ','", "line": "q2_add_edge(\"e\",\"f\",graph,10)", "line_number": 172, "column_number": 20, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E231", "text": "missing whitespace after ','", "line": "q2_add_edge(\"e\",\"f\",graph,10)", "line_number": 172, "column_number": 24, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E231", "text": "missing whitespace after ','", "line": "q2_add_edge(\"e\",\"f\",graph,10)", "line_number": 172, "column_number": 30, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'q2'", "line": "q2_add_edge(\"c\",\"d\",graph,30)", "line_number": 173, "column_number": 5, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "WPS432", "text": "Found a magic number: 30. The use of unnamed magic numbers in code hides the developers' intent in choosing that number, increases opportunities for subtle errors and makes it more difficult for the program to be adapted and extended in the future. However, for small programs it can be allowed, but it is better to use constants instead of magic numbers.", "line": "q2_add_edge(\"c\",\"d\",graph,30)", "line_number": 173, "column_number": 31, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E231", "text": "missing whitespace after ','", "line": "q2_add_edge(\"c\",\"d\",graph,30)", "line_number": 173, "column_number": 20, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E231", "text": "missing whitespace after ','", "line": "q2_add_edge(\"c\",\"d\",graph,30)", "line_number": 173, "column_number": 24, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E231", "text": "missing whitespace after ','", "line": "q2_add_edge(\"c\",\"d\",graph,30)", "line_number": 173, "column_number": 30, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'q2'", "line": "q2_add_edge(\"c\",\"e\",graph,35)", "line_number": 174, "column_number": 5, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "WPS432", "text": "Found a magic number: 35. The use of unnamed magic numbers in code hides the developers' intent in choosing that number, increases opportunities for subtle errors and makes it more difficult for the program to be adapted and extended in the future. However, for small programs it can be allowed, but it is better to use constants instead of magic numbers.", "line": "q2_add_edge(\"c\",\"e\",graph,35)", "line_number": 174, "column_number": 31, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E231", "text": "missing whitespace after ','", "line": "q2_add_edge(\"c\",\"e\",graph,35)", "line_number": 174, "column_number": 20, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E231", "text": "missing whitespace after ','", "line": "q2_add_edge(\"c\",\"e\",graph,35)", "line_number": 174, "column_number": 24, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E231", "text": "missing whitespace after ','", "line": "q2_add_edge(\"c\",\"e\",graph,35)", "line_number": 174, "column_number": 30, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "WPS231", "text": "Found function with too much cognitive complexity: 25 > 12", "line": "def q2_dijkstra(node1, node2, graph):", "line_number": 177, "column_number": 1, "category": "COMPLEXITY", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "C901", "text": "Cyclomatic complexity is too high (11). You can figure out how to simplify this code or split it into a set of small functions / methods. It will make your code easy to understand and less error prone.", "line": "def q2_dijkstra(node1, node2, graph):", "line_number": 177, "column_number": 1, "category": "COMPLEXITY", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'q2'", "line": "def q2_dijkstra(node1, node2, graph):", "line_number": 177, "column_number": 5, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'node1'", "line": "def q2_dijkstra(node1, node2, graph):", "line_number": 177, "column_number": 17, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'node2'", "line": "def q2_dijkstra(node1, node2, graph):", "line_number": 177, "column_number": 24, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "C002", "text": "Too long function (51 lines). Try to split it into smaller functions / methods. It will make your code easy to understand and less error prone.", "line": "def q2_dijkstra(node1, node2, graph):", "line_number": 177, "column_number": 0, "category": "BEST_PRACTICES", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'node1'", "line": "node1 = node1.lower()", "line_number": 178, "column_number": 5, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'node1'", "line": "node1 = node1.lower()", "line_number": 178, "column_number": 13, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'node2'", "line": "node2 = node2.lower()", "line_number": 179, "column_number": 5, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'node2'", "line": "node2 = node2.lower()", "line_number": 179, "column_number": 13, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'nei'", "line": "nei = graph[node1]", "line_number": 191, "column_number": 5, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'node1'", "line": "nei = graph[node1]", "line_number": 191, "column_number": 17, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'nei'", "line": "for n in nei:", "line_number": 192, "column_number": 14, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'node1'", "line": "costs[n] = graph[node1][n]", "line_number": 193, "column_number": 26, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC100", "text": "Possibly misspelt word: 'unvisisted'", "line": "# Find lowest cost unvisisted node and set it as node", "line_number": 200, "column_number": 9, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "WPS528", "text": "Found implicit `.items()` usage", "line": "for n in costs:", "line_number": 203, "column_number": 9, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "WPS440", "text": "Found block variables overlap: n", "line": "for n in costs:", "line_number": 203, "column_number": 9, "category": "ERROR_PRONE", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "E225", "text": "missing whitespace around operator", "line": "if costs[n]<max_c:", "line_number": 205, "column_number": 28, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E225", "text": "missing whitespace around operator", "line": "max_c=costs[n]", "line_number": 206, "column_number": 26, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E225", "text": "missing whitespace around operator", "line": "node=n", "line_number": 207, "column_number": 25, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC100", "text": "Possibly misspelt word: 'unvisisted'", "line": "# if no unvisisted node, break", "line_number": 210, "column_number": 9, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "C0325", "text": "Unnecessary parens after 'if' keyword", "line": "if(node == -1):", "line_number": 211, "column_number": 1, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC100", "text": "Possibly misspelt word: 'visisted'", "line": "# 2. Update the visisted node", "line_number": 216, "column_number": 9, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "WPS528", "text": "Found implicit `.items()` usage", "line": "for i in neighbors:", "line_number": 220, "column_number": 9, "category": "BEST_PRACTICES", "difficulty": "MEDIUM", "influence_on_penalty": 0}, {"code": "E211", "text": "whitespace before '['", "line": "if costs [i]>costs[node]+neighbors[i]:", "line_number": 222, "column_number": 25, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E225", "text": "missing whitespace around operator", "line": "if costs [i]>costs[node]+neighbors[i]:", "line_number": 222, "column_number": 29, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E226", "text": "missing whitespace around arithmetic operator", "line": "if costs [i]>costs[node]+neighbors[i]:", "line_number": 222, "column_number": 41, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E225", "text": "missing whitespace around operator", "line": "costs[i]=costs[node]+neighbors[i]", "line_number": 223, "column_number": 29, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E226", "text": "missing whitespace around arithmetic operator", "line": "costs[i]=costs[node]+neighbors[i]", "line_number": 223, "column_number": 41, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'q2'", "line": "q2_build_graph(mywdag)", "line_number": 229, "column_number": 1, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'mywdag'", "line": "q2_build_graph(mywdag)", "line_number": 229, "column_number": 16, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'q2'", "line": "q2_dijkstra('a', 'f', mywdag) #{'a': 10000, 'b': 5, 'c': 0, 'd': 20, 'e': 25, 'f': 35}", "line_number": 230, "column_number": 1, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "SC200", "text": "Possibly misspelt word: 'mywdag'", "line": "q2_dijkstra('a', 'f', mywdag) #{'a': 10000, 'b': 5, 'c': 0, 'd': 20, 'e': 25, 'f': 35}", "line_number": 230, "column_number": 23, "category": "INFO", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "q2_dijkstra('a', 'f', mywdag) #{'a': 10000, 'b': 5, 'c': 0, 'd': 20, 'e': 25, 'f': 35}", "line_number": 230, "column_number": 30, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E262", "text": "inline comment should start with '# '", "line": "q2_dijkstra('a', 'f', mywdag) #{'a': 10000, 'b': 5, 'c': 0, 'd': 20, 'e': 25, 'f': 35}", "line_number": 230, "column_number": 31, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}]}
