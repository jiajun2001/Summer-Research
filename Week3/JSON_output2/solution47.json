{"quality": {"code": "BAD", "text": "Code quality (beta): BAD"}, "issues": [{"code": "E501", "text": "Too long line (189 symbols). Try to split it into smaller lines. It will make your code easy to understand.", "line": "# As mentioned in the lecture, the **set cover problem** is an NP-complete problem. In this task, you will solve this question using both exhausive search (brute force) and greedy apporach.", "line_number": 7, "column_number": 121, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E501", "text": "Too long line (142 symbols). Try to split it into smaller lines. It will make your code easy to understand.", "line": "# Given a `list` of `sets` where each `set` contains integers, please find the minimum number of sets that cover the integers from `1` to `10`", "line_number": 11, "column_number": 121, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E501", "text": "Too long line (218 symbols). Try to split it into smaller lines. It will make your code easy to understand.", "line": "# First, implement the brute force approach that tests `all` combinations. You can assume there will be a solution. To simplify your code a bit, you can use the `itertools`. Please read its document and examples below:", "line_number": 23, "column_number": 121, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E231", "text": "missing whitespace after ','", "line": "for i in range(1,len(li)+1):", "line_number": 37, "column_number": 21, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E226", "text": "missing whitespace around arithmetic operator", "line": "for i in range(1,len(li)+1):", "line_number": 37, "column_number": 29, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E231", "text": "missing whitespace after ','", "line": "lists = list(itertools.combinations(li,i))", "line_number": 38, "column_number": 47, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E741", "text": "ambiguous variable name 'l'", "line": "for l in lists:", "line_number": 39, "column_number": 13, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E226", "text": "missing whitespace around arithmetic operator", "line": "integers[number-1] = True", "line_number": 43, "column_number": 36, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "set_list1 = [ # first test input", "line_number": 50, "column_number": 14, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "set_list2 = [ # second test input", "line_number": 58, "column_number": 14, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "print(ss) # ([1, 2, 3], [4, 5, 6], [7, 8, 9, 10])", "line_number": 69, "column_number": 10, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "print(ss) # ([1, 7], [2, 4, 8, 9, 10], [3, 5, 6])", "line_number": 72, "column_number": 10, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E501", "text": "Too long line (180 symbols). Try to split it into smaller lines. It will make your code easy to understand.", "line": "# In this exercise, please implement a greedy algorithm that **for each step, takes a set that contains the most uncovered integers** until it covers all integers from `1` to `10`.", "line_number": 79, "column_number": 121, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "ans = [] # your answer, should be a list of sets", "line_number": 87, "column_number": 13, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "set_list1 = [ # first test input", "line_number": 121, "column_number": 14, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "set_list2 = [ # second test input", "line_number": 129, "column_number": 14, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "print(s) # [[7, 8, 9, 10], [1, 2, 3], [4, 5, 6]]", "line_number": 140, "column_number": 9, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "print(s) # [[2, 4, 8, 9, 10], [3, 5, 6], [1, 7]]", "line_number": 143, "column_number": 9, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E501", "text": "Too long line (216 symbols). Try to split it into smaller lines. It will make your code easy to understand.", "line": "# It\u2019s Boxing Day and you are in a shopping contest! You have one shopping bag and you would like to fill your bags with items that have the largest sum of values. Please solve this problem using dynamic programming.", "line_number": 148, "column_number": 121, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "bag1 = 4 # the maximum weight for the bag", "line_number": 153, "column_number": 9, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "bag2 = 7 # the maximum weight for the bag", "line_number": 160, "column_number": 9, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E225", "text": "missing whitespace around operator", "line": "grid = [[0]* (num_col+1) for _ in range(num_row)] # initialise the grid", "line_number": 174, "column_number": 16, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E226", "text": "missing whitespace around arithmetic operator", "line": "grid = [[0]* (num_col+1) for _ in range(num_row)] # initialise the grid", "line_number": 174, "column_number": 26, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E261", "text": "at least two spaces before inline comment", "line": "grid = [[0]* (num_col+1) for _ in range(num_row)] # initialise the grid", "line_number": 174, "column_number": 54, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E231", "text": "missing whitespace after ','", "line": "for i in range(0,num_row):", "line_number": 180, "column_number": 21, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E231", "text": "missing whitespace after ','", "line": "for j in range(1,num_col+1):", "line_number": 181, "column_number": 25, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E226", "text": "missing whitespace around arithmetic operator", "line": "for j in range(1,num_col+1):", "line_number": 181, "column_number": 33, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E226", "text": "missing whitespace around arithmetic operator", "line": "grid[i][j] = grid[i-1][j]", "line_number": 187, "column_number": 36, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E0001", "text": "expected an indented block (<unknown>, line 191)", "line": "def display(grid):", "line_number": 191, "column_number": 1, "category": "ERROR_PRONE", "difficulty": "HARD", "influence_on_penalty": 0}, {"code": "E112", "text": "expected an indented block", "line": "def display(grid):", "line_number": 191, "column_number": 1, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "E999", "text": "IndentationError: expected an indented block", "line": "def display(grid):", "line_number": 191, "column_number": 1, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}, {"code": "W391", "text": "blank line at end of file", "line": "", "line_number": 223, "column_number": 1, "category": "CODE_STYLE", "difficulty": "EASY", "influence_on_penalty": 0}]}
